/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the ScepProfilesScepChallengeDynamic type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScepProfilesScepChallengeDynamic{}

// ScepProfilesScepChallengeDynamic struct for ScepProfilesScepChallengeDynamic
type ScepProfilesScepChallengeDynamic struct {
	// OTP server URL
	OtpServerUrl *string `json:"otp_server_url,omitempty"`
	// OTP password
	Password *string `json:"password,omitempty"`
	// OTP username
	Username             *string `json:"username,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScepProfilesScepChallengeDynamic ScepProfilesScepChallengeDynamic

// NewScepProfilesScepChallengeDynamic instantiates a new ScepProfilesScepChallengeDynamic object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScepProfilesScepChallengeDynamic() *ScepProfilesScepChallengeDynamic {
	this := ScepProfilesScepChallengeDynamic{}
	return &this
}

// NewScepProfilesScepChallengeDynamicWithDefaults instantiates a new ScepProfilesScepChallengeDynamic object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScepProfilesScepChallengeDynamicWithDefaults() *ScepProfilesScepChallengeDynamic {
	this := ScepProfilesScepChallengeDynamic{}
	return &this
}

// GetOtpServerUrl returns the OtpServerUrl field value if set, zero value otherwise.
func (o *ScepProfilesScepChallengeDynamic) GetOtpServerUrl() string {
	if o == nil || IsNil(o.OtpServerUrl) {
		var ret string
		return ret
	}
	return *o.OtpServerUrl
}

// GetOtpServerUrlOk returns a tuple with the OtpServerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallengeDynamic) GetOtpServerUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OtpServerUrl) {
		return nil, false
	}
	return o.OtpServerUrl, true
}

// HasOtpServerUrl returns a boolean if a field has been set.
func (o *ScepProfilesScepChallengeDynamic) HasOtpServerUrl() bool {
	if o != nil && !IsNil(o.OtpServerUrl) {
		return true
	}

	return false
}

// SetOtpServerUrl gets a reference to the given string and assigns it to the OtpServerUrl field.
func (o *ScepProfilesScepChallengeDynamic) SetOtpServerUrl(v string) {
	o.OtpServerUrl = &v
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *ScepProfilesScepChallengeDynamic) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallengeDynamic) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *ScepProfilesScepChallengeDynamic) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *ScepProfilesScepChallengeDynamic) SetPassword(v string) {
	o.Password = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ScepProfilesScepChallengeDynamic) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallengeDynamic) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ScepProfilesScepChallengeDynamic) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ScepProfilesScepChallengeDynamic) SetUsername(v string) {
	o.Username = &v
}

func (o ScepProfilesScepChallengeDynamic) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScepProfilesScepChallengeDynamic) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OtpServerUrl) {
		toSerialize["otp_server_url"] = o.OtpServerUrl
	}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScepProfilesScepChallengeDynamic) UnmarshalJSON(data []byte) (err error) {
	varScepProfilesScepChallengeDynamic := _ScepProfilesScepChallengeDynamic{}

	err = json.Unmarshal(data, &varScepProfilesScepChallengeDynamic)

	if err != nil {
		return err
	}

	*o = ScepProfilesScepChallengeDynamic(varScepProfilesScepChallengeDynamic)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "otp_server_url")
		delete(additionalProperties, "password")
		delete(additionalProperties, "username")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScepProfilesScepChallengeDynamic struct {
	value *ScepProfilesScepChallengeDynamic
	isSet bool
}

func (v NullableScepProfilesScepChallengeDynamic) Get() *ScepProfilesScepChallengeDynamic {
	return v.value
}

func (v *NullableScepProfilesScepChallengeDynamic) Set(val *ScepProfilesScepChallengeDynamic) {
	v.value = val
	v.isSet = true
}

func (v NullableScepProfilesScepChallengeDynamic) IsSet() bool {
	return v.isSet
}

func (v *NullableScepProfilesScepChallengeDynamic) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScepProfilesScepChallengeDynamic(val *ScepProfilesScepChallengeDynamic) *NullableScepProfilesScepChallengeDynamic {
	return &NullableScepProfilesScepChallengeDynamic{value: val, isSet: true}
}

func (v NullableScepProfilesScepChallengeDynamic) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScepProfilesScepChallengeDynamic) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
