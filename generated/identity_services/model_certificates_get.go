/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the CertificatesGet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatesGet{}

// CertificatesGet struct for CertificatesGet
type CertificatesGet struct {
	// Algorithm
	Algorithm *string `json:"algorithm,omitempty"`
	// CA certificate?
	Ca *bool `json:"ca,omitempty"`
	// Common name
	CommonName    *string `json:"common_name,omitempty"`
	CommonNameInt *string `json:"common_name_int,omitempty"`
	// The device in which the resource is defined
	Device      *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	ExpiryEpoch *string `json:"expiry_epoch,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the certificate
	Id *string `json:"id,omitempty"`
	// Issuer
	Issuer *string `json:"issuer,omitempty"`
	// Issue hash
	IssuerHash *string `json:"issuer_hash,omitempty"`
	// The name of the certificate
	Name *string `json:"name,omitempty"`
	// Not valid after this date
	NotValidAfter *string `json:"not_valid_after,omitempty"`
	// Not valid before this date
	NotValidBefore *string `json:"not_valid_before,omitempty"`
	// Public key
	PublicKey *string `json:"public_key,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Subject
	Subject *string `json:"subject,omitempty"`
	// Subject hash
	SubjectHash          *string `json:"subject_hash,omitempty"`
	SubjectInt           *string `json:"subject_int,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificatesGet CertificatesGet

// NewCertificatesGet instantiates a new CertificatesGet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesGet() *CertificatesGet {
	this := CertificatesGet{}
	return &this
}

// NewCertificatesGetWithDefaults instantiates a new CertificatesGet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesGetWithDefaults() *CertificatesGet {
	this := CertificatesGet{}
	return &this
}

// GetAlgorithm returns the Algorithm field value if set, zero value otherwise.
func (o *CertificatesGet) GetAlgorithm() string {
	if o == nil || IsNil(o.Algorithm) {
		var ret string
		return ret
	}
	return *o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetAlgorithmOk() (*string, bool) {
	if o == nil || IsNil(o.Algorithm) {
		return nil, false
	}
	return o.Algorithm, true
}

// HasAlgorithm returns a boolean if a field has been set.
func (o *CertificatesGet) HasAlgorithm() bool {
	if o != nil && !IsNil(o.Algorithm) {
		return true
	}

	return false
}

// SetAlgorithm gets a reference to the given string and assigns it to the Algorithm field.
func (o *CertificatesGet) SetAlgorithm(v string) {
	o.Algorithm = &v
}

// GetCa returns the Ca field value if set, zero value otherwise.
func (o *CertificatesGet) GetCa() bool {
	if o == nil || IsNil(o.Ca) {
		var ret bool
		return ret
	}
	return *o.Ca
}

// GetCaOk returns a tuple with the Ca field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetCaOk() (*bool, bool) {
	if o == nil || IsNil(o.Ca) {
		return nil, false
	}
	return o.Ca, true
}

// HasCa returns a boolean if a field has been set.
func (o *CertificatesGet) HasCa() bool {
	if o != nil && !IsNil(o.Ca) {
		return true
	}

	return false
}

// SetCa gets a reference to the given bool and assigns it to the Ca field.
func (o *CertificatesGet) SetCa(v bool) {
	o.Ca = &v
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *CertificatesGet) GetCommonName() string {
	if o == nil || IsNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *CertificatesGet) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *CertificatesGet) SetCommonName(v string) {
	o.CommonName = &v
}

// GetCommonNameInt returns the CommonNameInt field value if set, zero value otherwise.
func (o *CertificatesGet) GetCommonNameInt() string {
	if o == nil || IsNil(o.CommonNameInt) {
		var ret string
		return ret
	}
	return *o.CommonNameInt
}

// GetCommonNameIntOk returns a tuple with the CommonNameInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetCommonNameIntOk() (*string, bool) {
	if o == nil || IsNil(o.CommonNameInt) {
		return nil, false
	}
	return o.CommonNameInt, true
}

// HasCommonNameInt returns a boolean if a field has been set.
func (o *CertificatesGet) HasCommonNameInt() bool {
	if o != nil && !IsNil(o.CommonNameInt) {
		return true
	}

	return false
}

// SetCommonNameInt gets a reference to the given string and assigns it to the CommonNameInt field.
func (o *CertificatesGet) SetCommonNameInt(v string) {
	o.CommonNameInt = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CertificatesGet) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CertificatesGet) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CertificatesGet) SetDevice(v string) {
	o.Device = &v
}

// GetExpiryEpoch returns the ExpiryEpoch field value if set, zero value otherwise.
func (o *CertificatesGet) GetExpiryEpoch() string {
	if o == nil || IsNil(o.ExpiryEpoch) {
		var ret string
		return ret
	}
	return *o.ExpiryEpoch
}

// GetExpiryEpochOk returns a tuple with the ExpiryEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetExpiryEpochOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryEpoch) {
		return nil, false
	}
	return o.ExpiryEpoch, true
}

// HasExpiryEpoch returns a boolean if a field has been set.
func (o *CertificatesGet) HasExpiryEpoch() bool {
	if o != nil && !IsNil(o.ExpiryEpoch) {
		return true
	}

	return false
}

// SetExpiryEpoch gets a reference to the given string and assigns it to the ExpiryEpoch field.
func (o *CertificatesGet) SetExpiryEpoch(v string) {
	o.ExpiryEpoch = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *CertificatesGet) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *CertificatesGet) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *CertificatesGet) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificatesGet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificatesGet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificatesGet) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *CertificatesGet) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *CertificatesGet) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *CertificatesGet) SetIssuer(v string) {
	o.Issuer = &v
}

// GetIssuerHash returns the IssuerHash field value if set, zero value otherwise.
func (o *CertificatesGet) GetIssuerHash() string {
	if o == nil || IsNil(o.IssuerHash) {
		var ret string
		return ret
	}
	return *o.IssuerHash
}

// GetIssuerHashOk returns a tuple with the IssuerHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetIssuerHashOk() (*string, bool) {
	if o == nil || IsNil(o.IssuerHash) {
		return nil, false
	}
	return o.IssuerHash, true
}

// HasIssuerHash returns a boolean if a field has been set.
func (o *CertificatesGet) HasIssuerHash() bool {
	if o != nil && !IsNil(o.IssuerHash) {
		return true
	}

	return false
}

// SetIssuerHash gets a reference to the given string and assigns it to the IssuerHash field.
func (o *CertificatesGet) SetIssuerHash(v string) {
	o.IssuerHash = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertificatesGet) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertificatesGet) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertificatesGet) SetName(v string) {
	o.Name = &v
}

// GetNotValidAfter returns the NotValidAfter field value if set, zero value otherwise.
func (o *CertificatesGet) GetNotValidAfter() string {
	if o == nil || IsNil(o.NotValidAfter) {
		var ret string
		return ret
	}
	return *o.NotValidAfter
}

// GetNotValidAfterOk returns a tuple with the NotValidAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetNotValidAfterOk() (*string, bool) {
	if o == nil || IsNil(o.NotValidAfter) {
		return nil, false
	}
	return o.NotValidAfter, true
}

// HasNotValidAfter returns a boolean if a field has been set.
func (o *CertificatesGet) HasNotValidAfter() bool {
	if o != nil && !IsNil(o.NotValidAfter) {
		return true
	}

	return false
}

// SetNotValidAfter gets a reference to the given string and assigns it to the NotValidAfter field.
func (o *CertificatesGet) SetNotValidAfter(v string) {
	o.NotValidAfter = &v
}

// GetNotValidBefore returns the NotValidBefore field value if set, zero value otherwise.
func (o *CertificatesGet) GetNotValidBefore() string {
	if o == nil || IsNil(o.NotValidBefore) {
		var ret string
		return ret
	}
	return *o.NotValidBefore
}

// GetNotValidBeforeOk returns a tuple with the NotValidBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetNotValidBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.NotValidBefore) {
		return nil, false
	}
	return o.NotValidBefore, true
}

// HasNotValidBefore returns a boolean if a field has been set.
func (o *CertificatesGet) HasNotValidBefore() bool {
	if o != nil && !IsNil(o.NotValidBefore) {
		return true
	}

	return false
}

// SetNotValidBefore gets a reference to the given string and assigns it to the NotValidBefore field.
func (o *CertificatesGet) SetNotValidBefore(v string) {
	o.NotValidBefore = &v
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise.
func (o *CertificatesGet) GetPublicKey() string {
	if o == nil || IsNil(o.PublicKey) {
		var ret string
		return ret
	}
	return *o.PublicKey
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetPublicKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PublicKey) {
		return nil, false
	}
	return o.PublicKey, true
}

// HasPublicKey returns a boolean if a field has been set.
func (o *CertificatesGet) HasPublicKey() bool {
	if o != nil && !IsNil(o.PublicKey) {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given string and assigns it to the PublicKey field.
func (o *CertificatesGet) SetPublicKey(v string) {
	o.PublicKey = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *CertificatesGet) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *CertificatesGet) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *CertificatesGet) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CertificatesGet) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CertificatesGet) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *CertificatesGet) SetSubject(v string) {
	o.Subject = &v
}

// GetSubjectHash returns the SubjectHash field value if set, zero value otherwise.
func (o *CertificatesGet) GetSubjectHash() string {
	if o == nil || IsNil(o.SubjectHash) {
		var ret string
		return ret
	}
	return *o.SubjectHash
}

// GetSubjectHashOk returns a tuple with the SubjectHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetSubjectHashOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectHash) {
		return nil, false
	}
	return o.SubjectHash, true
}

// HasSubjectHash returns a boolean if a field has been set.
func (o *CertificatesGet) HasSubjectHash() bool {
	if o != nil && !IsNil(o.SubjectHash) {
		return true
	}

	return false
}

// SetSubjectHash gets a reference to the given string and assigns it to the SubjectHash field.
func (o *CertificatesGet) SetSubjectHash(v string) {
	o.SubjectHash = &v
}

// GetSubjectInt returns the SubjectInt field value if set, zero value otherwise.
func (o *CertificatesGet) GetSubjectInt() string {
	if o == nil || IsNil(o.SubjectInt) {
		var ret string
		return ret
	}
	return *o.SubjectInt
}

// GetSubjectIntOk returns a tuple with the SubjectInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesGet) GetSubjectIntOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectInt) {
		return nil, false
	}
	return o.SubjectInt, true
}

// HasSubjectInt returns a boolean if a field has been set.
func (o *CertificatesGet) HasSubjectInt() bool {
	if o != nil && !IsNil(o.SubjectInt) {
		return true
	}

	return false
}

// SetSubjectInt gets a reference to the given string and assigns it to the SubjectInt field.
func (o *CertificatesGet) SetSubjectInt(v string) {
	o.SubjectInt = &v
}

func (o CertificatesGet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatesGet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Algorithm) {
		toSerialize["algorithm"] = o.Algorithm
	}
	if !IsNil(o.Ca) {
		toSerialize["ca"] = o.Ca
	}
	if !IsNil(o.CommonName) {
		toSerialize["common_name"] = o.CommonName
	}
	if !IsNil(o.CommonNameInt) {
		toSerialize["common_name_int"] = o.CommonNameInt
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.ExpiryEpoch) {
		toSerialize["expiry_epoch"] = o.ExpiryEpoch
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.IssuerHash) {
		toSerialize["issuer_hash"] = o.IssuerHash
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotValidAfter) {
		toSerialize["not_valid_after"] = o.NotValidAfter
	}
	if !IsNil(o.NotValidBefore) {
		toSerialize["not_valid_before"] = o.NotValidBefore
	}
	if !IsNil(o.PublicKey) {
		toSerialize["public_key"] = o.PublicKey
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.SubjectHash) {
		toSerialize["subject_hash"] = o.SubjectHash
	}
	if !IsNil(o.SubjectInt) {
		toSerialize["subject_int"] = o.SubjectInt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificatesGet) UnmarshalJSON(data []byte) (err error) {
	varCertificatesGet := _CertificatesGet{}

	err = json.Unmarshal(data, &varCertificatesGet)

	if err != nil {
		return err
	}

	*o = CertificatesGet(varCertificatesGet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "algorithm")
		delete(additionalProperties, "ca")
		delete(additionalProperties, "common_name")
		delete(additionalProperties, "common_name_int")
		delete(additionalProperties, "device")
		delete(additionalProperties, "expiry_epoch")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "issuer")
		delete(additionalProperties, "issuer_hash")
		delete(additionalProperties, "name")
		delete(additionalProperties, "not_valid_after")
		delete(additionalProperties, "not_valid_before")
		delete(additionalProperties, "public_key")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "subject_hash")
		delete(additionalProperties, "subject_int")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificatesGet struct {
	value *CertificatesGet
	isSet bool
}

func (v NullableCertificatesGet) Get() *CertificatesGet {
	return v.value
}

func (v *NullableCertificatesGet) Set(val *CertificatesGet) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesGet) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesGet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesGet(val *CertificatesGet) *NullableCertificatesGet {
	return &NullableCertificatesGet{value: val, isSet: true}
}

func (v NullableCertificatesGet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesGet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
