/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the ExportCertificateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCertificateResponse{}

// ExportCertificateResponse struct for ExportCertificateResponse
type ExportCertificateResponse struct {
	Certificate          *string `json:"certificate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportCertificateResponse ExportCertificateResponse

// NewExportCertificateResponse instantiates a new ExportCertificateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCertificateResponse() *ExportCertificateResponse {
	this := ExportCertificateResponse{}
	return &this
}

// NewExportCertificateResponseWithDefaults instantiates a new ExportCertificateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCertificateResponseWithDefaults() *ExportCertificateResponse {
	this := ExportCertificateResponse{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *ExportCertificateResponse) GetCertificate() string {
	if o == nil || IsNil(o.Certificate) {
		var ret string
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCertificateResponse) GetCertificateOk() (*string, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *ExportCertificateResponse) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given string and assigns it to the Certificate field.
func (o *ExportCertificateResponse) SetCertificate(v string) {
	o.Certificate = &v
}

func (o ExportCertificateResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCertificateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExportCertificateResponse) UnmarshalJSON(data []byte) (err error) {
	varExportCertificateResponse := _ExportCertificateResponse{}

	err = json.Unmarshal(data, &varExportCertificateResponse)

	if err != nil {
		return err
	}

	*o = ExportCertificateResponse(varExportCertificateResponse)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportCertificateResponse struct {
	value *ExportCertificateResponse
	isSet bool
}

func (v NullableExportCertificateResponse) Get() *ExportCertificateResponse {
	return v.value
}

func (v *NullableExportCertificateResponse) Set(val *ExportCertificateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCertificateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCertificateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCertificateResponse(val *ExportCertificateResponse) *NullableExportCertificateResponse {
	return &NullableExportCertificateResponse{value: val, isSet: true}
}

func (v NullableExportCertificateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCertificateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
