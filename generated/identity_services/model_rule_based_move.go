/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the RuleBasedMove type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RuleBasedMove{}

// RuleBasedMove struct for RuleBasedMove
type RuleBasedMove struct {
	// The position of the rule relative to other rules in this rulebase.
	Destination string `json:"destination"`
	// A destination target rule UUID. This is only used if the `destination` value is `before` or `after`.
	DestinationRule *string `json:"destination_rule,omitempty"`
	// The position of the rule relative to the local rulebase
	Rulebase             string `json:"rulebase"`
	AdditionalProperties map[string]interface{}
}

type _RuleBasedMove RuleBasedMove

// NewRuleBasedMove instantiates a new RuleBasedMove object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRuleBasedMove(destination string, rulebase string) *RuleBasedMove {
	this := RuleBasedMove{}
	this.Destination = destination
	this.Rulebase = rulebase
	return &this
}

// NewRuleBasedMoveWithDefaults instantiates a new RuleBasedMove object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRuleBasedMoveWithDefaults() *RuleBasedMove {
	this := RuleBasedMove{}
	return &this
}

// GetDestination returns the Destination field value
func (o *RuleBasedMove) GetDestination() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *RuleBasedMove) GetDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Destination, true
}

// SetDestination sets field value
func (o *RuleBasedMove) SetDestination(v string) {
	o.Destination = v
}

// GetDestinationRule returns the DestinationRule field value if set, zero value otherwise.
func (o *RuleBasedMove) GetDestinationRule() string {
	if o == nil || IsNil(o.DestinationRule) {
		var ret string
		return ret
	}
	return *o.DestinationRule
}

// GetDestinationRuleOk returns a tuple with the DestinationRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RuleBasedMove) GetDestinationRuleOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationRule) {
		return nil, false
	}
	return o.DestinationRule, true
}

// HasDestinationRule returns a boolean if a field has been set.
func (o *RuleBasedMove) HasDestinationRule() bool {
	if o != nil && !IsNil(o.DestinationRule) {
		return true
	}

	return false
}

// SetDestinationRule gets a reference to the given string and assigns it to the DestinationRule field.
func (o *RuleBasedMove) SetDestinationRule(v string) {
	o.DestinationRule = &v
}

// GetRulebase returns the Rulebase field value
func (o *RuleBasedMove) GetRulebase() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Rulebase
}

// GetRulebaseOk returns a tuple with the Rulebase field value
// and a boolean to check if the value has been set.
func (o *RuleBasedMove) GetRulebaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Rulebase, true
}

// SetRulebase sets field value
func (o *RuleBasedMove) SetRulebase(v string) {
	o.Rulebase = v
}

func (o RuleBasedMove) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RuleBasedMove) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.DestinationRule) {
		toSerialize["destination_rule"] = o.DestinationRule
	}
	toSerialize["rulebase"] = o.Rulebase

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RuleBasedMove) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination",
		"rulebase",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRuleBasedMove := _RuleBasedMove{}

	err = json.Unmarshal(data, &varRuleBasedMove)

	if err != nil {
		return err
	}

	*o = RuleBasedMove(varRuleBasedMove)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "destination")
		delete(additionalProperties, "destination_rule")
		delete(additionalProperties, "rulebase")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRuleBasedMove struct {
	value *RuleBasedMove
	isSet bool
}

func (v NullableRuleBasedMove) Get() *RuleBasedMove {
	return v.value
}

func (v *NullableRuleBasedMove) Set(val *RuleBasedMove) {
	v.value = val
	v.isSet = true
}

func (v NullableRuleBasedMove) IsSet() bool {
	return v.isSet
}

func (v *NullableRuleBasedMove) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRuleBasedMove(val *RuleBasedMove) *NullableRuleBasedMove {
	return &NullableRuleBasedMove{value: val, isSet: true}
}

func (v NullableRuleBasedMove) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRuleBasedMove) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
