/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the CertificateProfilesUsernameField type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProfilesUsernameField{}

// CertificateProfilesUsernameField Certificate username field
type CertificateProfilesUsernameField struct {
	// Common name
	Subject *string `json:"subject,omitempty"`
	// Email address
	SubjectAlt           *string `json:"subject_alt,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateProfilesUsernameField CertificateProfilesUsernameField

// NewCertificateProfilesUsernameField instantiates a new CertificateProfilesUsernameField object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProfilesUsernameField() *CertificateProfilesUsernameField {
	this := CertificateProfilesUsernameField{}
	return &this
}

// NewCertificateProfilesUsernameFieldWithDefaults instantiates a new CertificateProfilesUsernameField object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateProfilesUsernameFieldWithDefaults() *CertificateProfilesUsernameField {
	this := CertificateProfilesUsernameField{}
	return &this
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *CertificateProfilesUsernameField) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfilesUsernameField) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *CertificateProfilesUsernameField) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *CertificateProfilesUsernameField) SetSubject(v string) {
	o.Subject = &v
}

// GetSubjectAlt returns the SubjectAlt field value if set, zero value otherwise.
func (o *CertificateProfilesUsernameField) GetSubjectAlt() string {
	if o == nil || IsNil(o.SubjectAlt) {
		var ret string
		return ret
	}
	return *o.SubjectAlt
}

// GetSubjectAltOk returns a tuple with the SubjectAlt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfilesUsernameField) GetSubjectAltOk() (*string, bool) {
	if o == nil || IsNil(o.SubjectAlt) {
		return nil, false
	}
	return o.SubjectAlt, true
}

// HasSubjectAlt returns a boolean if a field has been set.
func (o *CertificateProfilesUsernameField) HasSubjectAlt() bool {
	if o != nil && !IsNil(o.SubjectAlt) {
		return true
	}

	return false
}

// SetSubjectAlt gets a reference to the given string and assigns it to the SubjectAlt field.
func (o *CertificateProfilesUsernameField) SetSubjectAlt(v string) {
	o.SubjectAlt = &v
}

func (o CertificateProfilesUsernameField) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProfilesUsernameField) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.SubjectAlt) {
		toSerialize["subject_alt"] = o.SubjectAlt
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateProfilesUsernameField) UnmarshalJSON(data []byte) (err error) {
	varCertificateProfilesUsernameField := _CertificateProfilesUsernameField{}

	err = json.Unmarshal(data, &varCertificateProfilesUsernameField)

	if err != nil {
		return err
	}

	*o = CertificateProfilesUsernameField(varCertificateProfilesUsernameField)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "subject")
		delete(additionalProperties, "subject_alt")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateProfilesUsernameField struct {
	value *CertificateProfilesUsernameField
	isSet bool
}

func (v NullableCertificateProfilesUsernameField) Get() *CertificateProfilesUsernameField {
	return v.value
}

func (v *NullableCertificateProfilesUsernameField) Set(val *CertificateProfilesUsernameField) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProfilesUsernameField) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProfilesUsernameField) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProfilesUsernameField(val *CertificateProfilesUsernameField) *NullableCertificateProfilesUsernameField {
	return &NullableCertificateProfilesUsernameField{value: val, isSet: true}
}

func (v NullableCertificateProfilesUsernameField) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProfilesUsernameField) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
