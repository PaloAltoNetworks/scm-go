/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ScepProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScepProfiles{}

// ScepProfiles struct for ScepProfiles
type ScepProfiles struct {
	Algorithm ScepProfilesAlgorithm `json:"algorithm"`
	// Certificate Authority identity
	CaIdentityName        string                             `json:"ca_identity_name"`
	CertificateAttributes *ScepProfilesCertificateAttributes `json:"certificate_attributes,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Digest for CSR
	Digest string `json:"digest"`
	// CA certificate fingerprint
	Fingerprint *string `json:"fingerprint,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the SCEP profile
	Id string `json:"id"`
	// The name of the SCEP profile
	Name string `json:"name"`
	// SCEP server CA certificate
	ScepCaCert    *string                   `json:"scep_ca_cert,omitempty"`
	ScepChallenge ScepProfilesScepChallenge `json:"scep_challenge"`
	// SCEP client ceertificate
	ScepClientCert *string `json:"scep_client_cert,omitempty"`
	// SCEP server URL
	ScepUrl string `json:"scep_url"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Subject
	Subject string `json:"subject"`
	// Use as digital signature?
	UseAsDigitalSignature *bool `json:"use_as_digital_signature,omitempty"`
	// Use for key encipherment?
	UseForKeyEncipherment *bool `json:"use_for_key_encipherment,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _ScepProfiles ScepProfiles

// NewScepProfiles instantiates a new ScepProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScepProfiles(algorithm ScepProfilesAlgorithm, caIdentityName string, digest string, id string, name string, scepChallenge ScepProfilesScepChallenge, scepUrl string, subject string) *ScepProfiles {
	this := ScepProfiles{}
	this.Algorithm = algorithm
	this.CaIdentityName = caIdentityName
	this.Digest = digest
	this.Id = id
	this.Name = name
	this.ScepChallenge = scepChallenge
	this.ScepUrl = scepUrl
	this.Subject = subject
	return &this
}

// NewScepProfilesWithDefaults instantiates a new ScepProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScepProfilesWithDefaults() *ScepProfiles {
	this := ScepProfiles{}
	var subject string = "CN=$USERNAME"
	this.Subject = subject
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *ScepProfiles) GetAlgorithm() ScepProfilesAlgorithm {
	if o == nil {
		var ret ScepProfilesAlgorithm
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetAlgorithmOk() (*ScepProfilesAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *ScepProfiles) SetAlgorithm(v ScepProfilesAlgorithm) {
	o.Algorithm = v
}

// GetCaIdentityName returns the CaIdentityName field value
func (o *ScepProfiles) GetCaIdentityName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CaIdentityName
}

// GetCaIdentityNameOk returns a tuple with the CaIdentityName field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetCaIdentityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaIdentityName, true
}

// SetCaIdentityName sets field value
func (o *ScepProfiles) SetCaIdentityName(v string) {
	o.CaIdentityName = v
}

// GetCertificateAttributes returns the CertificateAttributes field value if set, zero value otherwise.
func (o *ScepProfiles) GetCertificateAttributes() ScepProfilesCertificateAttributes {
	if o == nil || IsNil(o.CertificateAttributes) {
		var ret ScepProfilesCertificateAttributes
		return ret
	}
	return *o.CertificateAttributes
}

// GetCertificateAttributesOk returns a tuple with the CertificateAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetCertificateAttributesOk() (*ScepProfilesCertificateAttributes, bool) {
	if o == nil || IsNil(o.CertificateAttributes) {
		return nil, false
	}
	return o.CertificateAttributes, true
}

// HasCertificateAttributes returns a boolean if a field has been set.
func (o *ScepProfiles) HasCertificateAttributes() bool {
	if o != nil && !IsNil(o.CertificateAttributes) {
		return true
	}

	return false
}

// SetCertificateAttributes gets a reference to the given ScepProfilesCertificateAttributes and assigns it to the CertificateAttributes field.
func (o *ScepProfiles) SetCertificateAttributes(v ScepProfilesCertificateAttributes) {
	o.CertificateAttributes = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ScepProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ScepProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *ScepProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetDigest returns the Digest field value
func (o *ScepProfiles) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *ScepProfiles) SetDigest(v string) {
	o.Digest = v
}

// GetFingerprint returns the Fingerprint field value if set, zero value otherwise.
func (o *ScepProfiles) GetFingerprint() string {
	if o == nil || IsNil(o.Fingerprint) {
		var ret string
		return ret
	}
	return *o.Fingerprint
}

// GetFingerprintOk returns a tuple with the Fingerprint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetFingerprintOk() (*string, bool) {
	if o == nil || IsNil(o.Fingerprint) {
		return nil, false
	}
	return o.Fingerprint, true
}

// HasFingerprint returns a boolean if a field has been set.
func (o *ScepProfiles) HasFingerprint() bool {
	if o != nil && !IsNil(o.Fingerprint) {
		return true
	}

	return false
}

// SetFingerprint gets a reference to the given string and assigns it to the Fingerprint field.
func (o *ScepProfiles) SetFingerprint(v string) {
	o.Fingerprint = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ScepProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ScepProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *ScepProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *ScepProfiles) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ScepProfiles) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ScepProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ScepProfiles) SetName(v string) {
	o.Name = v
}

// GetScepCaCert returns the ScepCaCert field value if set, zero value otherwise.
func (o *ScepProfiles) GetScepCaCert() string {
	if o == nil || IsNil(o.ScepCaCert) {
		var ret string
		return ret
	}
	return *o.ScepCaCert
}

// GetScepCaCertOk returns a tuple with the ScepCaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetScepCaCertOk() (*string, bool) {
	if o == nil || IsNil(o.ScepCaCert) {
		return nil, false
	}
	return o.ScepCaCert, true
}

// HasScepCaCert returns a boolean if a field has been set.
func (o *ScepProfiles) HasScepCaCert() bool {
	if o != nil && !IsNil(o.ScepCaCert) {
		return true
	}

	return false
}

// SetScepCaCert gets a reference to the given string and assigns it to the ScepCaCert field.
func (o *ScepProfiles) SetScepCaCert(v string) {
	o.ScepCaCert = &v
}

// GetScepChallenge returns the ScepChallenge field value
func (o *ScepProfiles) GetScepChallenge() ScepProfilesScepChallenge {
	if o == nil {
		var ret ScepProfilesScepChallenge
		return ret
	}

	return o.ScepChallenge
}

// GetScepChallengeOk returns a tuple with the ScepChallenge field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetScepChallengeOk() (*ScepProfilesScepChallenge, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScepChallenge, true
}

// SetScepChallenge sets field value
func (o *ScepProfiles) SetScepChallenge(v ScepProfilesScepChallenge) {
	o.ScepChallenge = v
}

// GetScepClientCert returns the ScepClientCert field value if set, zero value otherwise.
func (o *ScepProfiles) GetScepClientCert() string {
	if o == nil || IsNil(o.ScepClientCert) {
		var ret string
		return ret
	}
	return *o.ScepClientCert
}

// GetScepClientCertOk returns a tuple with the ScepClientCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetScepClientCertOk() (*string, bool) {
	if o == nil || IsNil(o.ScepClientCert) {
		return nil, false
	}
	return o.ScepClientCert, true
}

// HasScepClientCert returns a boolean if a field has been set.
func (o *ScepProfiles) HasScepClientCert() bool {
	if o != nil && !IsNil(o.ScepClientCert) {
		return true
	}

	return false
}

// SetScepClientCert gets a reference to the given string and assigns it to the ScepClientCert field.
func (o *ScepProfiles) SetScepClientCert(v string) {
	o.ScepClientCert = &v
}

// GetScepUrl returns the ScepUrl field value
func (o *ScepProfiles) GetScepUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScepUrl
}

// GetScepUrlOk returns a tuple with the ScepUrl field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetScepUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScepUrl, true
}

// SetScepUrl sets field value
func (o *ScepProfiles) SetScepUrl(v string) {
	o.ScepUrl = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *ScepProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *ScepProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *ScepProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSubject returns the Subject field value
func (o *ScepProfiles) GetSubject() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Subject, true
}

// SetSubject sets field value
func (o *ScepProfiles) SetSubject(v string) {
	o.Subject = v
}

// GetUseAsDigitalSignature returns the UseAsDigitalSignature field value if set, zero value otherwise.
func (o *ScepProfiles) GetUseAsDigitalSignature() bool {
	if o == nil || IsNil(o.UseAsDigitalSignature) {
		var ret bool
		return ret
	}
	return *o.UseAsDigitalSignature
}

// GetUseAsDigitalSignatureOk returns a tuple with the UseAsDigitalSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetUseAsDigitalSignatureOk() (*bool, bool) {
	if o == nil || IsNil(o.UseAsDigitalSignature) {
		return nil, false
	}
	return o.UseAsDigitalSignature, true
}

// HasUseAsDigitalSignature returns a boolean if a field has been set.
func (o *ScepProfiles) HasUseAsDigitalSignature() bool {
	if o != nil && !IsNil(o.UseAsDigitalSignature) {
		return true
	}

	return false
}

// SetUseAsDigitalSignature gets a reference to the given bool and assigns it to the UseAsDigitalSignature field.
func (o *ScepProfiles) SetUseAsDigitalSignature(v bool) {
	o.UseAsDigitalSignature = &v
}

// GetUseForKeyEncipherment returns the UseForKeyEncipherment field value if set, zero value otherwise.
func (o *ScepProfiles) GetUseForKeyEncipherment() bool {
	if o == nil || IsNil(o.UseForKeyEncipherment) {
		var ret bool
		return ret
	}
	return *o.UseForKeyEncipherment
}

// GetUseForKeyEnciphermentOk returns a tuple with the UseForKeyEncipherment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfiles) GetUseForKeyEnciphermentOk() (*bool, bool) {
	if o == nil || IsNil(o.UseForKeyEncipherment) {
		return nil, false
	}
	return o.UseForKeyEncipherment, true
}

// HasUseForKeyEncipherment returns a boolean if a field has been set.
func (o *ScepProfiles) HasUseForKeyEncipherment() bool {
	if o != nil && !IsNil(o.UseForKeyEncipherment) {
		return true
	}

	return false
}

// SetUseForKeyEncipherment gets a reference to the given bool and assigns it to the UseForKeyEncipherment field.
func (o *ScepProfiles) SetUseForKeyEncipherment(v bool) {
	o.UseForKeyEncipherment = &v
}

func (o ScepProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScepProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	toSerialize["ca_identity_name"] = o.CaIdentityName
	if !IsNil(o.CertificateAttributes) {
		toSerialize["certificate_attributes"] = o.CertificateAttributes
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	toSerialize["digest"] = o.Digest
	if !IsNil(o.Fingerprint) {
		toSerialize["fingerprint"] = o.Fingerprint
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.ScepCaCert) {
		toSerialize["scep_ca_cert"] = o.ScepCaCert
	}
	toSerialize["scep_challenge"] = o.ScepChallenge
	if !IsNil(o.ScepClientCert) {
		toSerialize["scep_client_cert"] = o.ScepClientCert
	}
	toSerialize["scep_url"] = o.ScepUrl
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	toSerialize["subject"] = o.Subject
	if !IsNil(o.UseAsDigitalSignature) {
		toSerialize["use_as_digital_signature"] = o.UseAsDigitalSignature
	}
	if !IsNil(o.UseForKeyEncipherment) {
		toSerialize["use_for_key_encipherment"] = o.UseForKeyEncipherment
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScepProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algorithm",
		"ca_identity_name",
		"digest",
		"id",
		"name",
		"scep_challenge",
		"scep_url",
		"subject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varScepProfiles := _ScepProfiles{}

	err = json.Unmarshal(data, &varScepProfiles)

	if err != nil {
		return err
	}

	*o = ScepProfiles(varScepProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "algorithm")
		delete(additionalProperties, "ca_identity_name")
		delete(additionalProperties, "certificate_attributes")
		delete(additionalProperties, "device")
		delete(additionalProperties, "digest")
		delete(additionalProperties, "fingerprint")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "scep_ca_cert")
		delete(additionalProperties, "scep_challenge")
		delete(additionalProperties, "scep_client_cert")
		delete(additionalProperties, "scep_url")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "subject")
		delete(additionalProperties, "use_as_digital_signature")
		delete(additionalProperties, "use_for_key_encipherment")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScepProfiles struct {
	value *ScepProfiles
	isSet bool
}

func (v NullableScepProfiles) Get() *ScepProfiles {
	return v.value
}

func (v *NullableScepProfiles) Set(val *ScepProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableScepProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableScepProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScepProfiles(val *ScepProfiles) *NullableScepProfiles {
	return &NullableScepProfiles{value: val, isSet: true}
}

func (v NullableScepProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScepProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
