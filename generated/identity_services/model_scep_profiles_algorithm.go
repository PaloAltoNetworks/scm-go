/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the ScepProfilesAlgorithm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScepProfilesAlgorithm{}

// ScepProfilesAlgorithm struct for ScepProfilesAlgorithm
type ScepProfilesAlgorithm struct {
	Rsa                  *ScepProfilesAlgorithmRsa `json:"rsa,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScepProfilesAlgorithm ScepProfilesAlgorithm

// NewScepProfilesAlgorithm instantiates a new ScepProfilesAlgorithm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScepProfilesAlgorithm() *ScepProfilesAlgorithm {
	this := ScepProfilesAlgorithm{}
	return &this
}

// NewScepProfilesAlgorithmWithDefaults instantiates a new ScepProfilesAlgorithm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScepProfilesAlgorithmWithDefaults() *ScepProfilesAlgorithm {
	this := ScepProfilesAlgorithm{}
	return &this
}

// GetRsa returns the Rsa field value if set, zero value otherwise.
func (o *ScepProfilesAlgorithm) GetRsa() ScepProfilesAlgorithmRsa {
	if o == nil || IsNil(o.Rsa) {
		var ret ScepProfilesAlgorithmRsa
		return ret
	}
	return *o.Rsa
}

// GetRsaOk returns a tuple with the Rsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesAlgorithm) GetRsaOk() (*ScepProfilesAlgorithmRsa, bool) {
	if o == nil || IsNil(o.Rsa) {
		return nil, false
	}
	return o.Rsa, true
}

// HasRsa returns a boolean if a field has been set.
func (o *ScepProfilesAlgorithm) HasRsa() bool {
	if o != nil && !IsNil(o.Rsa) {
		return true
	}

	return false
}

// SetRsa gets a reference to the given ScepProfilesAlgorithmRsa and assigns it to the Rsa field.
func (o *ScepProfilesAlgorithm) SetRsa(v ScepProfilesAlgorithmRsa) {
	o.Rsa = &v
}

func (o ScepProfilesAlgorithm) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScepProfilesAlgorithm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rsa) {
		toSerialize["rsa"] = o.Rsa
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScepProfilesAlgorithm) UnmarshalJSON(data []byte) (err error) {
	varScepProfilesAlgorithm := _ScepProfilesAlgorithm{}

	err = json.Unmarshal(data, &varScepProfilesAlgorithm)

	if err != nil {
		return err
	}

	*o = ScepProfilesAlgorithm(varScepProfilesAlgorithm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rsa")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScepProfilesAlgorithm struct {
	value *ScepProfilesAlgorithm
	isSet bool
}

func (v NullableScepProfilesAlgorithm) Get() *ScepProfilesAlgorithm {
	return v.value
}

func (v *NullableScepProfilesAlgorithm) Set(val *ScepProfilesAlgorithm) {
	v.value = val
	v.isSet = true
}

func (v NullableScepProfilesAlgorithm) IsSet() bool {
	return v.isSet
}

func (v *NullableScepProfilesAlgorithm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScepProfilesAlgorithm(val *ScepProfilesAlgorithm) *NullableScepProfilesAlgorithm {
	return &NullableScepProfilesAlgorithm{value: val, isSet: true}
}

func (v NullableScepProfilesAlgorithm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScepProfilesAlgorithm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
