/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificatesImport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatesImport{}

// CertificatesImport struct for CertificatesImport
type CertificatesImport struct {
	// The Base64 encoded content of the certificate public key
	CertificateFile string `json:"certificate_file"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Certificate format
	Format string `json:"format"`
	// The Base64 encoded content of the certificate private key
	KeyFile *string `json:"key_file,omitempty"`
	// The name of the certificate
	Name string `json:"name"`
	// Passphrase to protect the certificate private key
	Passphrase *string `json:"passphrase,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _CertificatesImport CertificatesImport

// NewCertificatesImport instantiates a new CertificatesImport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesImport(certificateFile string, format string, name string) *CertificatesImport {
	this := CertificatesImport{}
	this.CertificateFile = certificateFile
	this.Format = format
	this.Name = name
	return &this
}

// NewCertificatesImportWithDefaults instantiates a new CertificatesImport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesImportWithDefaults() *CertificatesImport {
	this := CertificatesImport{}
	var format string = "pem"
	this.Format = format
	return &this
}

// GetCertificateFile returns the CertificateFile field value
func (o *CertificatesImport) GetCertificateFile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateFile
}

// GetCertificateFileOk returns a tuple with the CertificateFile field value
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetCertificateFileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateFile, true
}

// SetCertificateFile sets field value
func (o *CertificatesImport) SetCertificateFile(v string) {
	o.CertificateFile = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CertificatesImport) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CertificatesImport) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CertificatesImport) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *CertificatesImport) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *CertificatesImport) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *CertificatesImport) SetFolder(v string) {
	o.Folder = &v
}

// GetFormat returns the Format field value
func (o *CertificatesImport) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *CertificatesImport) SetFormat(v string) {
	o.Format = v
}

// GetKeyFile returns the KeyFile field value if set, zero value otherwise.
func (o *CertificatesImport) GetKeyFile() string {
	if o == nil || IsNil(o.KeyFile) {
		var ret string
		return ret
	}
	return *o.KeyFile
}

// GetKeyFileOk returns a tuple with the KeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetKeyFileOk() (*string, bool) {
	if o == nil || IsNil(o.KeyFile) {
		return nil, false
	}
	return o.KeyFile, true
}

// HasKeyFile returns a boolean if a field has been set.
func (o *CertificatesImport) HasKeyFile() bool {
	if o != nil && !IsNil(o.KeyFile) {
		return true
	}

	return false
}

// SetKeyFile gets a reference to the given string and assigns it to the KeyFile field.
func (o *CertificatesImport) SetKeyFile(v string) {
	o.KeyFile = &v
}

// GetName returns the Name field value
func (o *CertificatesImport) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificatesImport) SetName(v string) {
	o.Name = v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *CertificatesImport) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *CertificatesImport) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *CertificatesImport) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *CertificatesImport) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesImport) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *CertificatesImport) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *CertificatesImport) SetSnippet(v string) {
	o.Snippet = &v
}

func (o CertificatesImport) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatesImport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate_file"] = o.CertificateFile
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["format"] = o.Format
	if !IsNil(o.KeyFile) {
		toSerialize["key_file"] = o.KeyFile
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificatesImport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate_file",
		"format",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificatesImport := _CertificatesImport{}

	err = json.Unmarshal(data, &varCertificatesImport)

	if err != nil {
		return err
	}

	*o = CertificatesImport(varCertificatesImport)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate_file")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "format")
		delete(additionalProperties, "key_file")
		delete(additionalProperties, "name")
		delete(additionalProperties, "passphrase")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificatesImport struct {
	value *CertificatesImport
	isSet bool
}

func (v NullableCertificatesImport) Get() *CertificatesImport {
	return v.value
}

func (v *NullableCertificatesImport) Set(val *CertificatesImport) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesImport) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesImport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesImport(val *CertificatesImport) *NullableCertificatesImport {
	return &NullableCertificatesImport{value: val, isSet: true}
}

func (v NullableCertificatesImport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesImport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
