/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticationProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationProfiles{}

// AuthenticationProfiles struct for AuthenticationProfiles
type AuthenticationProfiles struct {
	AllowList []string `json:"allow_list,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The UUID of the authentication profile
	Id              string                                 `json:"id"`
	Lockout         *AuthenticationProfilesLockout         `json:"lockout,omitempty"`
	Method          *AuthenticationProfilesMethod          `json:"method,omitempty"`
	MultiFactorAuth *AuthenticationProfilesMultiFactorAuth `json:"multi_factor_auth,omitempty"`
	// The name of the authentication profile
	Name         string                              `json:"name"`
	SingleSignOn *AuthenticationProfilesSingleSignOn `json:"single_sign_on,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	UserDomain           *string `json:"user_domain,omitempty"`
	UsernameModifier     *string `json:"username_modifier,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticationProfiles AuthenticationProfiles

// NewAuthenticationProfiles instantiates a new AuthenticationProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationProfiles(id string, name string) *AuthenticationProfiles {
	this := AuthenticationProfiles{}
	this.Id = id
	this.Name = name
	return &this
}

// NewAuthenticationProfilesWithDefaults instantiates a new AuthenticationProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationProfilesWithDefaults() *AuthenticationProfiles {
	this := AuthenticationProfiles{}
	return &this
}

// GetAllowList returns the AllowList field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetAllowList() []string {
	if o == nil || IsNil(o.AllowList) {
		var ret []string
		return ret
	}
	return o.AllowList
}

// GetAllowListOk returns a tuple with the AllowList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetAllowListOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowList) {
		return nil, false
	}
	return o.AllowList, true
}

// HasAllowList returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasAllowList() bool {
	if o != nil && !IsNil(o.AllowList) {
		return true
	}

	return false
}

// SetAllowList gets a reference to the given []string and assigns it to the AllowList field.
func (o *AuthenticationProfiles) SetAllowList(v []string) {
	o.AllowList = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *AuthenticationProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *AuthenticationProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *AuthenticationProfiles) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AuthenticationProfiles) SetId(v string) {
	o.Id = v
}

// GetLockout returns the Lockout field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetLockout() AuthenticationProfilesLockout {
	if o == nil || IsNil(o.Lockout) {
		var ret AuthenticationProfilesLockout
		return ret
	}
	return *o.Lockout
}

// GetLockoutOk returns a tuple with the Lockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetLockoutOk() (*AuthenticationProfilesLockout, bool) {
	if o == nil || IsNil(o.Lockout) {
		return nil, false
	}
	return o.Lockout, true
}

// HasLockout returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasLockout() bool {
	if o != nil && !IsNil(o.Lockout) {
		return true
	}

	return false
}

// SetLockout gets a reference to the given AuthenticationProfilesLockout and assigns it to the Lockout field.
func (o *AuthenticationProfiles) SetLockout(v AuthenticationProfilesLockout) {
	o.Lockout = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetMethod() AuthenticationProfilesMethod {
	if o == nil || IsNil(o.Method) {
		var ret AuthenticationProfilesMethod
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetMethodOk() (*AuthenticationProfilesMethod, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given AuthenticationProfilesMethod and assigns it to the Method field.
func (o *AuthenticationProfiles) SetMethod(v AuthenticationProfilesMethod) {
	o.Method = &v
}

// GetMultiFactorAuth returns the MultiFactorAuth field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetMultiFactorAuth() AuthenticationProfilesMultiFactorAuth {
	if o == nil || IsNil(o.MultiFactorAuth) {
		var ret AuthenticationProfilesMultiFactorAuth
		return ret
	}
	return *o.MultiFactorAuth
}

// GetMultiFactorAuthOk returns a tuple with the MultiFactorAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetMultiFactorAuthOk() (*AuthenticationProfilesMultiFactorAuth, bool) {
	if o == nil || IsNil(o.MultiFactorAuth) {
		return nil, false
	}
	return o.MultiFactorAuth, true
}

// HasMultiFactorAuth returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasMultiFactorAuth() bool {
	if o != nil && !IsNil(o.MultiFactorAuth) {
		return true
	}

	return false
}

// SetMultiFactorAuth gets a reference to the given AuthenticationProfilesMultiFactorAuth and assigns it to the MultiFactorAuth field.
func (o *AuthenticationProfiles) SetMultiFactorAuth(v AuthenticationProfilesMultiFactorAuth) {
	o.MultiFactorAuth = &v
}

// GetName returns the Name field value
func (o *AuthenticationProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthenticationProfiles) SetName(v string) {
	o.Name = v
}

// GetSingleSignOn returns the SingleSignOn field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetSingleSignOn() AuthenticationProfilesSingleSignOn {
	if o == nil || IsNil(o.SingleSignOn) {
		var ret AuthenticationProfilesSingleSignOn
		return ret
	}
	return *o.SingleSignOn
}

// GetSingleSignOnOk returns a tuple with the SingleSignOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetSingleSignOnOk() (*AuthenticationProfilesSingleSignOn, bool) {
	if o == nil || IsNil(o.SingleSignOn) {
		return nil, false
	}
	return o.SingleSignOn, true
}

// HasSingleSignOn returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasSingleSignOn() bool {
	if o != nil && !IsNil(o.SingleSignOn) {
		return true
	}

	return false
}

// SetSingleSignOn gets a reference to the given AuthenticationProfilesSingleSignOn and assigns it to the SingleSignOn field.
func (o *AuthenticationProfiles) SetSingleSignOn(v AuthenticationProfilesSingleSignOn) {
	o.SingleSignOn = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *AuthenticationProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetUserDomain returns the UserDomain field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetUserDomain() string {
	if o == nil || IsNil(o.UserDomain) {
		var ret string
		return ret
	}
	return *o.UserDomain
}

// GetUserDomainOk returns a tuple with the UserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetUserDomainOk() (*string, bool) {
	if o == nil || IsNil(o.UserDomain) {
		return nil, false
	}
	return o.UserDomain, true
}

// HasUserDomain returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasUserDomain() bool {
	if o != nil && !IsNil(o.UserDomain) {
		return true
	}

	return false
}

// SetUserDomain gets a reference to the given string and assigns it to the UserDomain field.
func (o *AuthenticationProfiles) SetUserDomain(v string) {
	o.UserDomain = &v
}

// GetUsernameModifier returns the UsernameModifier field value if set, zero value otherwise.
func (o *AuthenticationProfiles) GetUsernameModifier() string {
	if o == nil || IsNil(o.UsernameModifier) {
		var ret string
		return ret
	}
	return *o.UsernameModifier
}

// GetUsernameModifierOk returns a tuple with the UsernameModifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationProfiles) GetUsernameModifierOk() (*string, bool) {
	if o == nil || IsNil(o.UsernameModifier) {
		return nil, false
	}
	return o.UsernameModifier, true
}

// HasUsernameModifier returns a boolean if a field has been set.
func (o *AuthenticationProfiles) HasUsernameModifier() bool {
	if o != nil && !IsNil(o.UsernameModifier) {
		return true
	}

	return false
}

// SetUsernameModifier gets a reference to the given string and assigns it to the UsernameModifier field.
func (o *AuthenticationProfiles) SetUsernameModifier(v string) {
	o.UsernameModifier = &v
}

func (o AuthenticationProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowList) {
		toSerialize["allow_list"] = o.AllowList
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Lockout) {
		toSerialize["lockout"] = o.Lockout
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.MultiFactorAuth) {
		toSerialize["multi_factor_auth"] = o.MultiFactorAuth
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SingleSignOn) {
		toSerialize["single_sign_on"] = o.SingleSignOn
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.UserDomain) {
		toSerialize["user_domain"] = o.UserDomain
	}
	if !IsNil(o.UsernameModifier) {
		toSerialize["username_modifier"] = o.UsernameModifier
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticationProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationProfiles := _AuthenticationProfiles{}

	err = json.Unmarshal(data, &varAuthenticationProfiles)

	if err != nil {
		return err
	}

	*o = AuthenticationProfiles(varAuthenticationProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allow_list")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lockout")
		delete(additionalProperties, "method")
		delete(additionalProperties, "multi_factor_auth")
		delete(additionalProperties, "name")
		delete(additionalProperties, "single_sign_on")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "user_domain")
		delete(additionalProperties, "username_modifier")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticationProfiles struct {
	value *AuthenticationProfiles
	isSet bool
}

func (v NullableAuthenticationProfiles) Get() *AuthenticationProfiles {
	return v.value
}

func (v *NullableAuthenticationProfiles) Set(val *AuthenticationProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationProfiles(val *AuthenticationProfiles) *NullableAuthenticationProfiles {
	return &NullableAuthenticationProfiles{value: val, isSet: true}
}

func (v NullableAuthenticationProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
