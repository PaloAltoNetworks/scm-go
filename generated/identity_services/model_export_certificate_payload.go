/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ExportCertificatePayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportCertificatePayload{}

// ExportCertificatePayload struct for ExportCertificatePayload
type ExportCertificatePayload struct {
	Format               string  `json:"format"`
	Passphrase           *string `json:"passphrase,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ExportCertificatePayload ExportCertificatePayload

// NewExportCertificatePayload instantiates a new ExportCertificatePayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportCertificatePayload(format string) *ExportCertificatePayload {
	this := ExportCertificatePayload{}
	this.Format = format
	return &this
}

// NewExportCertificatePayloadWithDefaults instantiates a new ExportCertificatePayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportCertificatePayloadWithDefaults() *ExportCertificatePayload {
	this := ExportCertificatePayload{}
	return &this
}

// GetFormat returns the Format field value
func (o *ExportCertificatePayload) GetFormat() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Format
}

// GetFormatOk returns a tuple with the Format field value
// and a boolean to check if the value has been set.
func (o *ExportCertificatePayload) GetFormatOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Format, true
}

// SetFormat sets field value
func (o *ExportCertificatePayload) SetFormat(v string) {
	o.Format = v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *ExportCertificatePayload) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportCertificatePayload) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *ExportCertificatePayload) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *ExportCertificatePayload) SetPassphrase(v string) {
	o.Passphrase = &v
}

func (o ExportCertificatePayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportCertificatePayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["format"] = o.Format
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExportCertificatePayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"format",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExportCertificatePayload := _ExportCertificatePayload{}

	err = json.Unmarshal(data, &varExportCertificatePayload)

	if err != nil {
		return err
	}

	*o = ExportCertificatePayload(varExportCertificatePayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "format")
		delete(additionalProperties, "passphrase")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExportCertificatePayload struct {
	value *ExportCertificatePayload
	isSet bool
}

func (v NullableExportCertificatePayload) Get() *ExportCertificatePayload {
	return v.value
}

func (v *NullableExportCertificatePayload) Set(val *ExportCertificatePayload) {
	v.value = val
	v.isSet = true
}

func (v NullableExportCertificatePayload) IsSet() bool {
	return v.isSet
}

func (v *NullableExportCertificatePayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportCertificatePayload(val *ExportCertificatePayload) *NullableExportCertificatePayload {
	return &NullableExportCertificatePayload{value: val, isSet: true}
}

func (v NullableExportCertificatePayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportCertificatePayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
