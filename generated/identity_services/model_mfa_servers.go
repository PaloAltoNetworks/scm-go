/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the MfaServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaServers{}

// MfaServers struct for MfaServers
type MfaServers struct {
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the MFA server
	Id string `json:"id"`
	// The MFA server certificate profile
	MfaCertProfile string                   `json:"mfa_cert_profile"`
	MfaVendorType  *MfaServersMfaVendorType `json:"mfa_vendor_type,omitempty"`
	// The name of the MFA server profile
	Name string `json:"name"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _MfaServers MfaServers

// NewMfaServers instantiates a new MfaServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaServers(id string, mfaCertProfile string, name string) *MfaServers {
	this := MfaServers{}
	this.Id = id
	this.MfaCertProfile = mfaCertProfile
	this.Name = name
	return &this
}

// NewMfaServersWithDefaults instantiates a new MfaServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaServersWithDefaults() *MfaServers {
	this := MfaServers{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *MfaServers) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServers) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *MfaServers) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *MfaServers) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *MfaServers) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServers) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *MfaServers) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *MfaServers) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *MfaServers) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *MfaServers) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *MfaServers) SetId(v string) {
	o.Id = v
}

// GetMfaCertProfile returns the MfaCertProfile field value
func (o *MfaServers) GetMfaCertProfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MfaCertProfile
}

// GetMfaCertProfileOk returns a tuple with the MfaCertProfile field value
// and a boolean to check if the value has been set.
func (o *MfaServers) GetMfaCertProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MfaCertProfile, true
}

// SetMfaCertProfile sets field value
func (o *MfaServers) SetMfaCertProfile(v string) {
	o.MfaCertProfile = v
}

// GetMfaVendorType returns the MfaVendorType field value if set, zero value otherwise.
func (o *MfaServers) GetMfaVendorType() MfaServersMfaVendorType {
	if o == nil || IsNil(o.MfaVendorType) {
		var ret MfaServersMfaVendorType
		return ret
	}
	return *o.MfaVendorType
}

// GetMfaVendorTypeOk returns a tuple with the MfaVendorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServers) GetMfaVendorTypeOk() (*MfaServersMfaVendorType, bool) {
	if o == nil || IsNil(o.MfaVendorType) {
		return nil, false
	}
	return o.MfaVendorType, true
}

// HasMfaVendorType returns a boolean if a field has been set.
func (o *MfaServers) HasMfaVendorType() bool {
	if o != nil && !IsNil(o.MfaVendorType) {
		return true
	}

	return false
}

// SetMfaVendorType gets a reference to the given MfaServersMfaVendorType and assigns it to the MfaVendorType field.
func (o *MfaServers) SetMfaVendorType(v MfaServersMfaVendorType) {
	o.MfaVendorType = &v
}

// GetName returns the Name field value
func (o *MfaServers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MfaServers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MfaServers) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *MfaServers) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServers) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *MfaServers) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *MfaServers) SetSnippet(v string) {
	o.Snippet = &v
}

func (o MfaServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	toSerialize["mfa_cert_profile"] = o.MfaCertProfile
	if !IsNil(o.MfaVendorType) {
		toSerialize["mfa_vendor_type"] = o.MfaVendorType
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MfaServers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"mfa_cert_profile",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMfaServers := _MfaServers{}

	err = json.Unmarshal(data, &varMfaServers)

	if err != nil {
		return err
	}

	*o = MfaServers(varMfaServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "mfa_cert_profile")
		delete(additionalProperties, "mfa_vendor_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMfaServers struct {
	value *MfaServers
	isSet bool
}

func (v NullableMfaServers) Get() *MfaServers {
	return v.value
}

func (v *NullableMfaServers) Set(val *MfaServers) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaServers) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaServers(val *MfaServers) *NullableMfaServers {
	return &NullableMfaServers{value: val, isSet: true}
}

func (v NullableMfaServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
