/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the ScepProfilesScepChallenge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ScepProfilesScepChallenge{}

// ScepProfilesScepChallenge One Time Password challenge
type ScepProfilesScepChallenge struct {
	Dynamic *ScepProfilesScepChallengeDynamic `json:"dynamic,omitempty"`
	// Challenge to use for SCEP server on mobile clients
	Fixed *string `json:"fixed,omitempty"`
	// No OTP
	None                 *string `json:"none,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ScepProfilesScepChallenge ScepProfilesScepChallenge

// NewScepProfilesScepChallenge instantiates a new ScepProfilesScepChallenge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScepProfilesScepChallenge() *ScepProfilesScepChallenge {
	this := ScepProfilesScepChallenge{}
	return &this
}

// NewScepProfilesScepChallengeWithDefaults instantiates a new ScepProfilesScepChallenge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScepProfilesScepChallengeWithDefaults() *ScepProfilesScepChallenge {
	this := ScepProfilesScepChallenge{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *ScepProfilesScepChallenge) GetDynamic() ScepProfilesScepChallengeDynamic {
	if o == nil || IsNil(o.Dynamic) {
		var ret ScepProfilesScepChallengeDynamic
		return ret
	}
	return *o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallenge) GetDynamicOk() (*ScepProfilesScepChallengeDynamic, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return nil, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *ScepProfilesScepChallenge) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given ScepProfilesScepChallengeDynamic and assigns it to the Dynamic field.
func (o *ScepProfilesScepChallenge) SetDynamic(v ScepProfilesScepChallengeDynamic) {
	o.Dynamic = &v
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *ScepProfilesScepChallenge) GetFixed() string {
	if o == nil || IsNil(o.Fixed) {
		var ret string
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallenge) GetFixedOk() (*string, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *ScepProfilesScepChallenge) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given string and assigns it to the Fixed field.
func (o *ScepProfilesScepChallenge) SetFixed(v string) {
	o.Fixed = &v
}

// GetNone returns the None field value if set, zero value otherwise.
func (o *ScepProfilesScepChallenge) GetNone() string {
	if o == nil || IsNil(o.None) {
		var ret string
		return ret
	}
	return *o.None
}

// GetNoneOk returns a tuple with the None field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ScepProfilesScepChallenge) GetNoneOk() (*string, bool) {
	if o == nil || IsNil(o.None) {
		return nil, false
	}
	return o.None, true
}

// HasNone returns a boolean if a field has been set.
func (o *ScepProfilesScepChallenge) HasNone() bool {
	if o != nil && !IsNil(o.None) {
		return true
	}

	return false
}

// SetNone gets a reference to the given string and assigns it to the None field.
func (o *ScepProfilesScepChallenge) SetNone(v string) {
	o.None = &v
}

func (o ScepProfilesScepChallenge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ScepProfilesScepChallenge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.None) {
		toSerialize["none"] = o.None
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ScepProfilesScepChallenge) UnmarshalJSON(data []byte) (err error) {
	varScepProfilesScepChallenge := _ScepProfilesScepChallenge{}

	err = json.Unmarshal(data, &varScepProfilesScepChallenge)

	if err != nil {
		return err
	}

	*o = ScepProfilesScepChallenge(varScepProfilesScepChallenge)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dynamic")
		delete(additionalProperties, "fixed")
		delete(additionalProperties, "none")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableScepProfilesScepChallenge struct {
	value *ScepProfilesScepChallenge
	isSet bool
}

func (v NullableScepProfilesScepChallenge) Get() *ScepProfilesScepChallenge {
	return v.value
}

func (v *NullableScepProfilesScepChallenge) Set(val *ScepProfilesScepChallenge) {
	v.value = val
	v.isSet = true
}

func (v NullableScepProfilesScepChallenge) IsSet() bool {
	return v.isSet
}

func (v *NullableScepProfilesScepChallenge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScepProfilesScepChallenge(val *ScepProfilesScepChallenge) *NullableScepProfilesScepChallenge {
	return &NullableScepProfilesScepChallenge{value: val, isSet: true}
}

func (v NullableScepProfilesScepChallenge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScepProfilesScepChallenge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
