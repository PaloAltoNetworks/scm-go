/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the MfaServersMfaVendorTypeRsaSecuridAccessV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaServersMfaVendorTypeRsaSecuridAccessV1{}

// MfaServersMfaVendorTypeRsaSecuridAccessV1 Integration with [RSA SecurID](https://www.rsa.com/products/securid/)
type MfaServersMfaVendorTypeRsaSecuridAccessV1 struct {
	// RSA SecurID access ID
	RsaAccessid *string `json:"rsa_accessid,omitempty"`
	// RSA SecurID access key
	RsaAccesskey *string `json:"rsa_accesskey,omitempty"`
	// RSA SecurID hostname
	RsaApiHost *string `json:"rsa_api_host,omitempty"`
	// RSA SecurID assurance level
	RsaAssurancepolicyid *string `json:"rsa_assurancepolicyid,omitempty"`
	// RSA SecurID API base URI
	RsaBaseuri *string `json:"rsa_baseuri,omitempty"`
	// RSA SecurID timeout (seconds)
	RsaTimeout           *int32 `json:"rsa_timeout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MfaServersMfaVendorTypeRsaSecuridAccessV1 MfaServersMfaVendorTypeRsaSecuridAccessV1

// NewMfaServersMfaVendorTypeRsaSecuridAccessV1 instantiates a new MfaServersMfaVendorTypeRsaSecuridAccessV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaServersMfaVendorTypeRsaSecuridAccessV1() *MfaServersMfaVendorTypeRsaSecuridAccessV1 {
	this := MfaServersMfaVendorTypeRsaSecuridAccessV1{}
	var rsaBaseuri string = "/mfa/v1_1"
	this.RsaBaseuri = &rsaBaseuri
	var rsaTimeout int32 = 30
	this.RsaTimeout = &rsaTimeout
	return &this
}

// NewMfaServersMfaVendorTypeRsaSecuridAccessV1WithDefaults instantiates a new MfaServersMfaVendorTypeRsaSecuridAccessV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaServersMfaVendorTypeRsaSecuridAccessV1WithDefaults() *MfaServersMfaVendorTypeRsaSecuridAccessV1 {
	this := MfaServersMfaVendorTypeRsaSecuridAccessV1{}
	var rsaBaseuri string = "/mfa/v1_1"
	this.RsaBaseuri = &rsaBaseuri
	var rsaTimeout int32 = 30
	this.RsaTimeout = &rsaTimeout
	return &this
}

// GetRsaAccessid returns the RsaAccessid field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAccessid() string {
	if o == nil || IsNil(o.RsaAccessid) {
		var ret string
		return ret
	}
	return *o.RsaAccessid
}

// GetRsaAccessidOk returns a tuple with the RsaAccessid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAccessidOk() (*string, bool) {
	if o == nil || IsNil(o.RsaAccessid) {
		return nil, false
	}
	return o.RsaAccessid, true
}

// HasRsaAccessid returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaAccessid() bool {
	if o != nil && !IsNil(o.RsaAccessid) {
		return true
	}

	return false
}

// SetRsaAccessid gets a reference to the given string and assigns it to the RsaAccessid field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaAccessid(v string) {
	o.RsaAccessid = &v
}

// GetRsaAccesskey returns the RsaAccesskey field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAccesskey() string {
	if o == nil || IsNil(o.RsaAccesskey) {
		var ret string
		return ret
	}
	return *o.RsaAccesskey
}

// GetRsaAccesskeyOk returns a tuple with the RsaAccesskey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAccesskeyOk() (*string, bool) {
	if o == nil || IsNil(o.RsaAccesskey) {
		return nil, false
	}
	return o.RsaAccesskey, true
}

// HasRsaAccesskey returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaAccesskey() bool {
	if o != nil && !IsNil(o.RsaAccesskey) {
		return true
	}

	return false
}

// SetRsaAccesskey gets a reference to the given string and assigns it to the RsaAccesskey field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaAccesskey(v string) {
	o.RsaAccesskey = &v
}

// GetRsaApiHost returns the RsaApiHost field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaApiHost() string {
	if o == nil || IsNil(o.RsaApiHost) {
		var ret string
		return ret
	}
	return *o.RsaApiHost
}

// GetRsaApiHostOk returns a tuple with the RsaApiHost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaApiHostOk() (*string, bool) {
	if o == nil || IsNil(o.RsaApiHost) {
		return nil, false
	}
	return o.RsaApiHost, true
}

// HasRsaApiHost returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaApiHost() bool {
	if o != nil && !IsNil(o.RsaApiHost) {
		return true
	}

	return false
}

// SetRsaApiHost gets a reference to the given string and assigns it to the RsaApiHost field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaApiHost(v string) {
	o.RsaApiHost = &v
}

// GetRsaAssurancepolicyid returns the RsaAssurancepolicyid field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAssurancepolicyid() string {
	if o == nil || IsNil(o.RsaAssurancepolicyid) {
		var ret string
		return ret
	}
	return *o.RsaAssurancepolicyid
}

// GetRsaAssurancepolicyidOk returns a tuple with the RsaAssurancepolicyid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaAssurancepolicyidOk() (*string, bool) {
	if o == nil || IsNil(o.RsaAssurancepolicyid) {
		return nil, false
	}
	return o.RsaAssurancepolicyid, true
}

// HasRsaAssurancepolicyid returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaAssurancepolicyid() bool {
	if o != nil && !IsNil(o.RsaAssurancepolicyid) {
		return true
	}

	return false
}

// SetRsaAssurancepolicyid gets a reference to the given string and assigns it to the RsaAssurancepolicyid field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaAssurancepolicyid(v string) {
	o.RsaAssurancepolicyid = &v
}

// GetRsaBaseuri returns the RsaBaseuri field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaBaseuri() string {
	if o == nil || IsNil(o.RsaBaseuri) {
		var ret string
		return ret
	}
	return *o.RsaBaseuri
}

// GetRsaBaseuriOk returns a tuple with the RsaBaseuri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaBaseuriOk() (*string, bool) {
	if o == nil || IsNil(o.RsaBaseuri) {
		return nil, false
	}
	return o.RsaBaseuri, true
}

// HasRsaBaseuri returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaBaseuri() bool {
	if o != nil && !IsNil(o.RsaBaseuri) {
		return true
	}

	return false
}

// SetRsaBaseuri gets a reference to the given string and assigns it to the RsaBaseuri field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaBaseuri(v string) {
	o.RsaBaseuri = &v
}

// GetRsaTimeout returns the RsaTimeout field value if set, zero value otherwise.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaTimeout() int32 {
	if o == nil || IsNil(o.RsaTimeout) {
		var ret int32
		return ret
	}
	return *o.RsaTimeout
}

// GetRsaTimeoutOk returns a tuple with the RsaTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) GetRsaTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.RsaTimeout) {
		return nil, false
	}
	return o.RsaTimeout, true
}

// HasRsaTimeout returns a boolean if a field has been set.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) HasRsaTimeout() bool {
	if o != nil && !IsNil(o.RsaTimeout) {
		return true
	}

	return false
}

// SetRsaTimeout gets a reference to the given int32 and assigns it to the RsaTimeout field.
func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) SetRsaTimeout(v int32) {
	o.RsaTimeout = &v
}

func (o MfaServersMfaVendorTypeRsaSecuridAccessV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaServersMfaVendorTypeRsaSecuridAccessV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RsaAccessid) {
		toSerialize["rsa_accessid"] = o.RsaAccessid
	}
	if !IsNil(o.RsaAccesskey) {
		toSerialize["rsa_accesskey"] = o.RsaAccesskey
	}
	if !IsNil(o.RsaApiHost) {
		toSerialize["rsa_api_host"] = o.RsaApiHost
	}
	if !IsNil(o.RsaAssurancepolicyid) {
		toSerialize["rsa_assurancepolicyid"] = o.RsaAssurancepolicyid
	}
	if !IsNil(o.RsaBaseuri) {
		toSerialize["rsa_baseuri"] = o.RsaBaseuri
	}
	if !IsNil(o.RsaTimeout) {
		toSerialize["rsa_timeout"] = o.RsaTimeout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MfaServersMfaVendorTypeRsaSecuridAccessV1) UnmarshalJSON(data []byte) (err error) {
	varMfaServersMfaVendorTypeRsaSecuridAccessV1 := _MfaServersMfaVendorTypeRsaSecuridAccessV1{}

	err = json.Unmarshal(data, &varMfaServersMfaVendorTypeRsaSecuridAccessV1)

	if err != nil {
		return err
	}

	*o = MfaServersMfaVendorTypeRsaSecuridAccessV1(varMfaServersMfaVendorTypeRsaSecuridAccessV1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "rsa_accessid")
		delete(additionalProperties, "rsa_accesskey")
		delete(additionalProperties, "rsa_api_host")
		delete(additionalProperties, "rsa_assurancepolicyid")
		delete(additionalProperties, "rsa_baseuri")
		delete(additionalProperties, "rsa_timeout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMfaServersMfaVendorTypeRsaSecuridAccessV1 struct {
	value *MfaServersMfaVendorTypeRsaSecuridAccessV1
	isSet bool
}

func (v NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) Get() *MfaServersMfaVendorTypeRsaSecuridAccessV1 {
	return v.value
}

func (v *NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) Set(val *MfaServersMfaVendorTypeRsaSecuridAccessV1) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaServersMfaVendorTypeRsaSecuridAccessV1(val *MfaServersMfaVendorTypeRsaSecuridAccessV1) *NullableMfaServersMfaVendorTypeRsaSecuridAccessV1 {
	return &NullableMfaServersMfaVendorTypeRsaSecuridAccessV1{value: val, isSet: true}
}

func (v NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaServersMfaVendorTypeRsaSecuridAccessV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
