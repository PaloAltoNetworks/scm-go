/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the MfaServersMfaVendorTypeOktaAdaptiveV1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaServersMfaVendorTypeOktaAdaptiveV1{}

// MfaServersMfaVendorTypeOktaAdaptiveV1 Integration with [Okta Adaptive MFA](https://www.okta.com/products/adaptive-multi-factor-authentication)
type MfaServersMfaVendorTypeOktaAdaptiveV1 struct {
	// Okta API hostname
	OktaApiHost string `json:"okta_api_host"`
	OktaBaseuri string `json:"okta_baseuri"`
	// Okta organization
	OktaOrg string `json:"okta_org"`
	// Okta timeout (seconds)
	OktaTimeout int32 `json:"okta_timeout"`
	// Okta API token
	OktaToken            string `json:"okta_token"`
	AdditionalProperties map[string]interface{}
}

type _MfaServersMfaVendorTypeOktaAdaptiveV1 MfaServersMfaVendorTypeOktaAdaptiveV1

// NewMfaServersMfaVendorTypeOktaAdaptiveV1 instantiates a new MfaServersMfaVendorTypeOktaAdaptiveV1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaServersMfaVendorTypeOktaAdaptiveV1(oktaApiHost string, oktaBaseuri string, oktaOrg string, oktaTimeout int32, oktaToken string) *MfaServersMfaVendorTypeOktaAdaptiveV1 {
	this := MfaServersMfaVendorTypeOktaAdaptiveV1{}
	this.OktaApiHost = oktaApiHost
	this.OktaBaseuri = oktaBaseuri
	this.OktaOrg = oktaOrg
	this.OktaTimeout = oktaTimeout
	this.OktaToken = oktaToken
	return &this
}

// NewMfaServersMfaVendorTypeOktaAdaptiveV1WithDefaults instantiates a new MfaServersMfaVendorTypeOktaAdaptiveV1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaServersMfaVendorTypeOktaAdaptiveV1WithDefaults() *MfaServersMfaVendorTypeOktaAdaptiveV1 {
	this := MfaServersMfaVendorTypeOktaAdaptiveV1{}
	var oktaBaseuri string = "/api/v1"
	this.OktaBaseuri = oktaBaseuri
	var oktaTimeout int32 = 30
	this.OktaTimeout = oktaTimeout
	return &this
}

// GetOktaApiHost returns the OktaApiHost field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaApiHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaApiHost
}

// GetOktaApiHostOk returns a tuple with the OktaApiHost field value
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaApiHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaApiHost, true
}

// SetOktaApiHost sets field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) SetOktaApiHost(v string) {
	o.OktaApiHost = v
}

// GetOktaBaseuri returns the OktaBaseuri field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaBaseuri() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaBaseuri
}

// GetOktaBaseuriOk returns a tuple with the OktaBaseuri field value
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaBaseuriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaBaseuri, true
}

// SetOktaBaseuri sets field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) SetOktaBaseuri(v string) {
	o.OktaBaseuri = v
}

// GetOktaOrg returns the OktaOrg field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaOrg() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaOrg
}

// GetOktaOrgOk returns a tuple with the OktaOrg field value
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaOrgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaOrg, true
}

// SetOktaOrg sets field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) SetOktaOrg(v string) {
	o.OktaOrg = v
}

// GetOktaTimeout returns the OktaTimeout field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.OktaTimeout
}

// GetOktaTimeoutOk returns a tuple with the OktaTimeout field value
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaTimeout, true
}

// SetOktaTimeout sets field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) SetOktaTimeout(v int32) {
	o.OktaTimeout = v
}

// GetOktaToken returns the OktaToken field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OktaToken
}

// GetOktaTokenOk returns a tuple with the OktaToken field value
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) GetOktaTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OktaToken, true
}

// SetOktaToken sets field value
func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) SetOktaToken(v string) {
	o.OktaToken = v
}

func (o MfaServersMfaVendorTypeOktaAdaptiveV1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaServersMfaVendorTypeOktaAdaptiveV1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["okta_api_host"] = o.OktaApiHost
	toSerialize["okta_baseuri"] = o.OktaBaseuri
	toSerialize["okta_org"] = o.OktaOrg
	toSerialize["okta_timeout"] = o.OktaTimeout
	toSerialize["okta_token"] = o.OktaToken

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MfaServersMfaVendorTypeOktaAdaptiveV1) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"okta_api_host",
		"okta_baseuri",
		"okta_org",
		"okta_timeout",
		"okta_token",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMfaServersMfaVendorTypeOktaAdaptiveV1 := _MfaServersMfaVendorTypeOktaAdaptiveV1{}

	err = json.Unmarshal(data, &varMfaServersMfaVendorTypeOktaAdaptiveV1)

	if err != nil {
		return err
	}

	*o = MfaServersMfaVendorTypeOktaAdaptiveV1(varMfaServersMfaVendorTypeOktaAdaptiveV1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "okta_api_host")
		delete(additionalProperties, "okta_baseuri")
		delete(additionalProperties, "okta_org")
		delete(additionalProperties, "okta_timeout")
		delete(additionalProperties, "okta_token")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMfaServersMfaVendorTypeOktaAdaptiveV1 struct {
	value *MfaServersMfaVendorTypeOktaAdaptiveV1
	isSet bool
}

func (v NullableMfaServersMfaVendorTypeOktaAdaptiveV1) Get() *MfaServersMfaVendorTypeOktaAdaptiveV1 {
	return v.value
}

func (v *NullableMfaServersMfaVendorTypeOktaAdaptiveV1) Set(val *MfaServersMfaVendorTypeOktaAdaptiveV1) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaServersMfaVendorTypeOktaAdaptiveV1) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaServersMfaVendorTypeOktaAdaptiveV1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaServersMfaVendorTypeOktaAdaptiveV1(val *MfaServersMfaVendorTypeOktaAdaptiveV1) *NullableMfaServersMfaVendorTypeOktaAdaptiveV1 {
	return &NullableMfaServersMfaVendorTypeOktaAdaptiveV1{value: val, isSet: true}
}

func (v NullableMfaServersMfaVendorTypeOktaAdaptiveV1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaServersMfaVendorTypeOktaAdaptiveV1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
