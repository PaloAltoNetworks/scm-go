/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the RadiusServerProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadiusServerProfiles{}

// RadiusServerProfiles struct for RadiusServerProfiles
type RadiusServerProfiles struct {
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the RADIUS server profile
	Id string `json:"id"`
	// The name of the RADIUS server profile
	Name     string                       `json:"name"`
	Protocol RadiusServerProfilesProtocol `json:"protocol"`
	// The number of RADIUS server retries
	Retries *int32                            `json:"retries,omitempty"`
	Server  []RadiusServerProfilesServerInner `json:"server"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The RADIUS server authentication timeout (seconds)
	Timeout              *int32 `json:"timeout,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RadiusServerProfiles RadiusServerProfiles

// NewRadiusServerProfiles instantiates a new RadiusServerProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadiusServerProfiles(id string, name string, protocol RadiusServerProfilesProtocol, server []RadiusServerProfilesServerInner) *RadiusServerProfiles {
	this := RadiusServerProfiles{}
	this.Id = id
	this.Name = name
	this.Protocol = protocol
	this.Server = server
	return &this
}

// NewRadiusServerProfilesWithDefaults instantiates a new RadiusServerProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadiusServerProfilesWithDefaults() *RadiusServerProfiles {
	this := RadiusServerProfiles{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *RadiusServerProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *RadiusServerProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *RadiusServerProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *RadiusServerProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *RadiusServerProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *RadiusServerProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *RadiusServerProfiles) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RadiusServerProfiles) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *RadiusServerProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RadiusServerProfiles) SetName(v string) {
	o.Name = v
}

// GetProtocol returns the Protocol field value
func (o *RadiusServerProfiles) GetProtocol() RadiusServerProfilesProtocol {
	if o == nil {
		var ret RadiusServerProfilesProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetProtocolOk() (*RadiusServerProfilesProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *RadiusServerProfiles) SetProtocol(v RadiusServerProfilesProtocol) {
	o.Protocol = v
}

// GetRetries returns the Retries field value if set, zero value otherwise.
func (o *RadiusServerProfiles) GetRetries() int32 {
	if o == nil || IsNil(o.Retries) {
		var ret int32
		return ret
	}
	return *o.Retries
}

// GetRetriesOk returns a tuple with the Retries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetRetriesOk() (*int32, bool) {
	if o == nil || IsNil(o.Retries) {
		return nil, false
	}
	return o.Retries, true
}

// HasRetries returns a boolean if a field has been set.
func (o *RadiusServerProfiles) HasRetries() bool {
	if o != nil && !IsNil(o.Retries) {
		return true
	}

	return false
}

// SetRetries gets a reference to the given int32 and assigns it to the Retries field.
func (o *RadiusServerProfiles) SetRetries(v int32) {
	o.Retries = &v
}

// GetServer returns the Server field value
func (o *RadiusServerProfiles) GetServer() []RadiusServerProfilesServerInner {
	if o == nil {
		var ret []RadiusServerProfilesServerInner
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetServerOk() ([]RadiusServerProfilesServerInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server, true
}

// SetServer sets field value
func (o *RadiusServerProfiles) SetServer(v []RadiusServerProfilesServerInner) {
	o.Server = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *RadiusServerProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *RadiusServerProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *RadiusServerProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *RadiusServerProfiles) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfiles) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *RadiusServerProfiles) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *RadiusServerProfiles) SetTimeout(v int32) {
	o.Timeout = &v
}

func (o RadiusServerProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadiusServerProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.Retries) {
		toSerialize["retries"] = o.Retries
	}
	toSerialize["server"] = o.Server
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RadiusServerProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"protocol",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRadiusServerProfiles := _RadiusServerProfiles{}

	err = json.Unmarshal(data, &varRadiusServerProfiles)

	if err != nil {
		return err
	}

	*o = RadiusServerProfiles(varRadiusServerProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "retries")
		delete(additionalProperties, "server")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "timeout")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRadiusServerProfiles struct {
	value *RadiusServerProfiles
	isSet bool
}

func (v NullableRadiusServerProfiles) Get() *RadiusServerProfiles {
	return v.value
}

func (v *NullableRadiusServerProfiles) Set(val *RadiusServerProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableRadiusServerProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableRadiusServerProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadiusServerProfiles(val *RadiusServerProfiles) *NullableRadiusServerProfiles {
	return &NullableRadiusServerProfiles{value: val, isSet: true}
}

func (v NullableRadiusServerProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadiusServerProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
