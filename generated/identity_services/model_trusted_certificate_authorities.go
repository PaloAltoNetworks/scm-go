/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the TrustedCertificateAuthorities type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustedCertificateAuthorities{}

// TrustedCertificateAuthorities struct for TrustedCertificateAuthorities
type TrustedCertificateAuthorities struct {
	// The trusted certificate authority common name
	CommonName  *string `json:"common_name,omitempty"`
	ExpiryEpoch *string `json:"expiry_epoch,omitempty"`
	// Certificate filename
	Filename *string `json:"filename,omitempty"`
	// The UUID of the trusted certificate authority
	Id *string `json:"id,omitempty"`
	// Issuer
	Issuer *string `json:"issuer,omitempty"`
	// The trusted certificate authority name
	Name *string `json:"name,omitempty"`
	// Not valid after this date
	NotValidAfter *string `json:"not_valid_after,omitempty"`
	// Not valid before this date
	NotValidBefore *string `json:"not_valid_before,omitempty"`
	// Serial number
	SerialNumber *string `json:"serial_number,omitempty"`
	// Subject
	Subject              *string `json:"subject,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TrustedCertificateAuthorities TrustedCertificateAuthorities

// NewTrustedCertificateAuthorities instantiates a new TrustedCertificateAuthorities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedCertificateAuthorities() *TrustedCertificateAuthorities {
	this := TrustedCertificateAuthorities{}
	return &this
}

// NewTrustedCertificateAuthoritiesWithDefaults instantiates a new TrustedCertificateAuthorities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedCertificateAuthoritiesWithDefaults() *TrustedCertificateAuthorities {
	this := TrustedCertificateAuthorities{}
	return &this
}

// GetCommonName returns the CommonName field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetCommonName() string {
	if o == nil || IsNil(o.CommonName) {
		var ret string
		return ret
	}
	return *o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetCommonNameOk() (*string, bool) {
	if o == nil || IsNil(o.CommonName) {
		return nil, false
	}
	return o.CommonName, true
}

// HasCommonName returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasCommonName() bool {
	if o != nil && !IsNil(o.CommonName) {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given string and assigns it to the CommonName field.
func (o *TrustedCertificateAuthorities) SetCommonName(v string) {
	o.CommonName = &v
}

// GetExpiryEpoch returns the ExpiryEpoch field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetExpiryEpoch() string {
	if o == nil || IsNil(o.ExpiryEpoch) {
		var ret string
		return ret
	}
	return *o.ExpiryEpoch
}

// GetExpiryEpochOk returns a tuple with the ExpiryEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetExpiryEpochOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryEpoch) {
		return nil, false
	}
	return o.ExpiryEpoch, true
}

// HasExpiryEpoch returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasExpiryEpoch() bool {
	if o != nil && !IsNil(o.ExpiryEpoch) {
		return true
	}

	return false
}

// SetExpiryEpoch gets a reference to the given string and assigns it to the ExpiryEpoch field.
func (o *TrustedCertificateAuthorities) SetExpiryEpoch(v string) {
	o.ExpiryEpoch = &v
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *TrustedCertificateAuthorities) SetFilename(v string) {
	o.Filename = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TrustedCertificateAuthorities) SetId(v string) {
	o.Id = &v
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetIssuer() string {
	if o == nil || IsNil(o.Issuer) {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetIssuerOk() (*string, bool) {
	if o == nil || IsNil(o.Issuer) {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasIssuer() bool {
	if o != nil && !IsNil(o.Issuer) {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *TrustedCertificateAuthorities) SetIssuer(v string) {
	o.Issuer = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TrustedCertificateAuthorities) SetName(v string) {
	o.Name = &v
}

// GetNotValidAfter returns the NotValidAfter field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetNotValidAfter() string {
	if o == nil || IsNil(o.NotValidAfter) {
		var ret string
		return ret
	}
	return *o.NotValidAfter
}

// GetNotValidAfterOk returns a tuple with the NotValidAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetNotValidAfterOk() (*string, bool) {
	if o == nil || IsNil(o.NotValidAfter) {
		return nil, false
	}
	return o.NotValidAfter, true
}

// HasNotValidAfter returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasNotValidAfter() bool {
	if o != nil && !IsNil(o.NotValidAfter) {
		return true
	}

	return false
}

// SetNotValidAfter gets a reference to the given string and assigns it to the NotValidAfter field.
func (o *TrustedCertificateAuthorities) SetNotValidAfter(v string) {
	o.NotValidAfter = &v
}

// GetNotValidBefore returns the NotValidBefore field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetNotValidBefore() string {
	if o == nil || IsNil(o.NotValidBefore) {
		var ret string
		return ret
	}
	return *o.NotValidBefore
}

// GetNotValidBeforeOk returns a tuple with the NotValidBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetNotValidBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.NotValidBefore) {
		return nil, false
	}
	return o.NotValidBefore, true
}

// HasNotValidBefore returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasNotValidBefore() bool {
	if o != nil && !IsNil(o.NotValidBefore) {
		return true
	}

	return false
}

// SetNotValidBefore gets a reference to the given string and assigns it to the NotValidBefore field.
func (o *TrustedCertificateAuthorities) SetNotValidBefore(v string) {
	o.NotValidBefore = &v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *TrustedCertificateAuthorities) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *TrustedCertificateAuthorities) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrustedCertificateAuthorities) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *TrustedCertificateAuthorities) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *TrustedCertificateAuthorities) SetSubject(v string) {
	o.Subject = &v
}

func (o TrustedCertificateAuthorities) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustedCertificateAuthorities) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CommonName) {
		toSerialize["common_name"] = o.CommonName
	}
	if !IsNil(o.ExpiryEpoch) {
		toSerialize["expiry_epoch"] = o.ExpiryEpoch
	}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Issuer) {
		toSerialize["issuer"] = o.Issuer
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NotValidAfter) {
		toSerialize["not_valid_after"] = o.NotValidAfter
	}
	if !IsNil(o.NotValidBefore) {
		toSerialize["not_valid_before"] = o.NotValidBefore
	}
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrustedCertificateAuthorities) UnmarshalJSON(data []byte) (err error) {
	varTrustedCertificateAuthorities := _TrustedCertificateAuthorities{}

	err = json.Unmarshal(data, &varTrustedCertificateAuthorities)

	if err != nil {
		return err
	}

	*o = TrustedCertificateAuthorities(varTrustedCertificateAuthorities)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "common_name")
		delete(additionalProperties, "expiry_epoch")
		delete(additionalProperties, "filename")
		delete(additionalProperties, "id")
		delete(additionalProperties, "issuer")
		delete(additionalProperties, "name")
		delete(additionalProperties, "not_valid_after")
		delete(additionalProperties, "not_valid_before")
		delete(additionalProperties, "serial_number")
		delete(additionalProperties, "subject")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrustedCertificateAuthorities struct {
	value *TrustedCertificateAuthorities
	isSet bool
}

func (v NullableTrustedCertificateAuthorities) Get() *TrustedCertificateAuthorities {
	return v.value
}

func (v *NullableTrustedCertificateAuthorities) Set(val *TrustedCertificateAuthorities) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedCertificateAuthorities) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedCertificateAuthorities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedCertificateAuthorities(val *TrustedCertificateAuthorities) *NullableTrustedCertificateAuthorities {
	return &NullableTrustedCertificateAuthorities{value: val, isSet: true}
}

func (v NullableTrustedCertificateAuthorities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedCertificateAuthorities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
