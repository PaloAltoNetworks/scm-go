/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateProfilesCaCertificatesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProfilesCaCertificatesInner{}

// CertificateProfilesCaCertificatesInner CA certificate
type CertificateProfilesCaCertificatesInner struct {
	// Default OCSP URL
	DefaultOcspUrl *string `json:"default_ocsp_url,omitempty"`
	// CA certificate name
	Name string `json:"name"`
	// OCSP verify certificate
	OcspVerifyCert *string `json:"ocsp_verify_cert,omitempty"`
	// Template name/OID
	TemplateName         *string `json:"template_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateProfilesCaCertificatesInner CertificateProfilesCaCertificatesInner

// NewCertificateProfilesCaCertificatesInner instantiates a new CertificateProfilesCaCertificatesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProfilesCaCertificatesInner(name string) *CertificateProfilesCaCertificatesInner {
	this := CertificateProfilesCaCertificatesInner{}
	this.Name = name
	return &this
}

// NewCertificateProfilesCaCertificatesInnerWithDefaults instantiates a new CertificateProfilesCaCertificatesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateProfilesCaCertificatesInnerWithDefaults() *CertificateProfilesCaCertificatesInner {
	this := CertificateProfilesCaCertificatesInner{}
	return &this
}

// GetDefaultOcspUrl returns the DefaultOcspUrl field value if set, zero value otherwise.
func (o *CertificateProfilesCaCertificatesInner) GetDefaultOcspUrl() string {
	if o == nil || IsNil(o.DefaultOcspUrl) {
		var ret string
		return ret
	}
	return *o.DefaultOcspUrl
}

// GetDefaultOcspUrlOk returns a tuple with the DefaultOcspUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfilesCaCertificatesInner) GetDefaultOcspUrlOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultOcspUrl) {
		return nil, false
	}
	return o.DefaultOcspUrl, true
}

// HasDefaultOcspUrl returns a boolean if a field has been set.
func (o *CertificateProfilesCaCertificatesInner) HasDefaultOcspUrl() bool {
	if o != nil && !IsNil(o.DefaultOcspUrl) {
		return true
	}

	return false
}

// SetDefaultOcspUrl gets a reference to the given string and assigns it to the DefaultOcspUrl field.
func (o *CertificateProfilesCaCertificatesInner) SetDefaultOcspUrl(v string) {
	o.DefaultOcspUrl = &v
}

// GetName returns the Name field value
func (o *CertificateProfilesCaCertificatesInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificateProfilesCaCertificatesInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificateProfilesCaCertificatesInner) SetName(v string) {
	o.Name = v
}

// GetOcspVerifyCert returns the OcspVerifyCert field value if set, zero value otherwise.
func (o *CertificateProfilesCaCertificatesInner) GetOcspVerifyCert() string {
	if o == nil || IsNil(o.OcspVerifyCert) {
		var ret string
		return ret
	}
	return *o.OcspVerifyCert
}

// GetOcspVerifyCertOk returns a tuple with the OcspVerifyCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfilesCaCertificatesInner) GetOcspVerifyCertOk() (*string, bool) {
	if o == nil || IsNil(o.OcspVerifyCert) {
		return nil, false
	}
	return o.OcspVerifyCert, true
}

// HasOcspVerifyCert returns a boolean if a field has been set.
func (o *CertificateProfilesCaCertificatesInner) HasOcspVerifyCert() bool {
	if o != nil && !IsNil(o.OcspVerifyCert) {
		return true
	}

	return false
}

// SetOcspVerifyCert gets a reference to the given string and assigns it to the OcspVerifyCert field.
func (o *CertificateProfilesCaCertificatesInner) SetOcspVerifyCert(v string) {
	o.OcspVerifyCert = &v
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise.
func (o *CertificateProfilesCaCertificatesInner) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName) {
		var ret string
		return ret
	}
	return *o.TemplateName
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfilesCaCertificatesInner) GetTemplateNameOk() (*string, bool) {
	if o == nil || IsNil(o.TemplateName) {
		return nil, false
	}
	return o.TemplateName, true
}

// HasTemplateName returns a boolean if a field has been set.
func (o *CertificateProfilesCaCertificatesInner) HasTemplateName() bool {
	if o != nil && !IsNil(o.TemplateName) {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given string and assigns it to the TemplateName field.
func (o *CertificateProfilesCaCertificatesInner) SetTemplateName(v string) {
	o.TemplateName = &v
}

func (o CertificateProfilesCaCertificatesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProfilesCaCertificatesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultOcspUrl) {
		toSerialize["default_ocsp_url"] = o.DefaultOcspUrl
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.OcspVerifyCert) {
		toSerialize["ocsp_verify_cert"] = o.OcspVerifyCert
	}
	if !IsNil(o.TemplateName) {
		toSerialize["template_name"] = o.TemplateName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateProfilesCaCertificatesInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateProfilesCaCertificatesInner := _CertificateProfilesCaCertificatesInner{}

	err = json.Unmarshal(data, &varCertificateProfilesCaCertificatesInner)

	if err != nil {
		return err
	}

	*o = CertificateProfilesCaCertificatesInner(varCertificateProfilesCaCertificatesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "default_ocsp_url")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ocsp_verify_cert")
		delete(additionalProperties, "template_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateProfilesCaCertificatesInner struct {
	value *CertificateProfilesCaCertificatesInner
	isSet bool
}

func (v NullableCertificateProfilesCaCertificatesInner) Get() *CertificateProfilesCaCertificatesInner {
	return v.value
}

func (v *NullableCertificateProfilesCaCertificatesInner) Set(val *CertificateProfilesCaCertificatesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProfilesCaCertificatesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProfilesCaCertificatesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProfilesCaCertificatesInner(val *CertificateProfilesCaCertificatesInner) *NullableCertificateProfilesCaCertificatesInner {
	return &NullableCertificateProfilesCaCertificatesInner{value: val, isSet: true}
}

func (v NullableCertificateProfilesCaCertificatesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProfilesCaCertificatesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
