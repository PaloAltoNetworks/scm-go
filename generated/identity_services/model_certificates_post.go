/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificatesPost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificatesPost{}

// CertificatesPost struct for CertificatesPost
type CertificatesPost struct {
	Algorithm CertificatesPostAlgorithm `json:"algorithm"`
	// Alternate email
	AlternateEmail []string `json:"alternate_email,omitempty"`
	// Certificate name
	CertificateName string `json:"certificate_name"`
	// Common name
	CommonName string `json:"common_name"`
	// Country code
	CountryCode *string `json:"country_code,omitempty"`
	// Expiration (days)
	DayTillExpiration *int32 `json:"day_till_expiration,omitempty"`
	// Department
	Department []string `json:"department,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Hash algorithm
	Digest string `json:"digest"`
	// Email
	Email *string `json:"email,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Hostname
	Hostname []string `json:"hostname,omitempty"`
	// IP address
	Ip []string `json:"ip,omitempty"`
	// Block private key export?
	IsBlockPrivateKey *bool `json:"is_block_privateKey,omitempty"`
	// Certificate authority certificate?
	IsCertificateAuthority *bool `json:"is_certificate_authority,omitempty"`
	// Locality
	Locality *string `json:"locality,omitempty"`
	// OCSP responder URL
	OcspResponderUrl *string `json:"ocsp_responder_url,omitempty"`
	// Signed by
	SignedBy string `json:"signed_by"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// State
	State                *string `json:"state,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificatesPost CertificatesPost

// NewCertificatesPost instantiates a new CertificatesPost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificatesPost(algorithm CertificatesPostAlgorithm, certificateName string, commonName string, digest string, signedBy string) *CertificatesPost {
	this := CertificatesPost{}
	this.Algorithm = algorithm
	this.CertificateName = certificateName
	this.CommonName = commonName
	this.Digest = digest
	this.SignedBy = signedBy
	return &this
}

// NewCertificatesPostWithDefaults instantiates a new CertificatesPost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificatesPostWithDefaults() *CertificatesPost {
	this := CertificatesPost{}
	return &this
}

// GetAlgorithm returns the Algorithm field value
func (o *CertificatesPost) GetAlgorithm() CertificatesPostAlgorithm {
	if o == nil {
		var ret CertificatesPostAlgorithm
		return ret
	}

	return o.Algorithm
}

// GetAlgorithmOk returns a tuple with the Algorithm field value
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetAlgorithmOk() (*CertificatesPostAlgorithm, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Algorithm, true
}

// SetAlgorithm sets field value
func (o *CertificatesPost) SetAlgorithm(v CertificatesPostAlgorithm) {
	o.Algorithm = v
}

// GetAlternateEmail returns the AlternateEmail field value if set, zero value otherwise.
func (o *CertificatesPost) GetAlternateEmail() []string {
	if o == nil || IsNil(o.AlternateEmail) {
		var ret []string
		return ret
	}
	return o.AlternateEmail
}

// GetAlternateEmailOk returns a tuple with the AlternateEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetAlternateEmailOk() ([]string, bool) {
	if o == nil || IsNil(o.AlternateEmail) {
		return nil, false
	}
	return o.AlternateEmail, true
}

// HasAlternateEmail returns a boolean if a field has been set.
func (o *CertificatesPost) HasAlternateEmail() bool {
	if o != nil && !IsNil(o.AlternateEmail) {
		return true
	}

	return false
}

// SetAlternateEmail gets a reference to the given []string and assigns it to the AlternateEmail field.
func (o *CertificatesPost) SetAlternateEmail(v []string) {
	o.AlternateEmail = v
}

// GetCertificateName returns the CertificateName field value
func (o *CertificatesPost) GetCertificateName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertificateName
}

// GetCertificateNameOk returns a tuple with the CertificateName field value
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetCertificateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertificateName, true
}

// SetCertificateName sets field value
func (o *CertificatesPost) SetCertificateName(v string) {
	o.CertificateName = v
}

// GetCommonName returns the CommonName field value
func (o *CertificatesPost) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *CertificatesPost) SetCommonName(v string) {
	o.CommonName = v
}

// GetCountryCode returns the CountryCode field value if set, zero value otherwise.
func (o *CertificatesPost) GetCountryCode() string {
	if o == nil || IsNil(o.CountryCode) {
		var ret string
		return ret
	}
	return *o.CountryCode
}

// GetCountryCodeOk returns a tuple with the CountryCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetCountryCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCode) {
		return nil, false
	}
	return o.CountryCode, true
}

// HasCountryCode returns a boolean if a field has been set.
func (o *CertificatesPost) HasCountryCode() bool {
	if o != nil && !IsNil(o.CountryCode) {
		return true
	}

	return false
}

// SetCountryCode gets a reference to the given string and assigns it to the CountryCode field.
func (o *CertificatesPost) SetCountryCode(v string) {
	o.CountryCode = &v
}

// GetDayTillExpiration returns the DayTillExpiration field value if set, zero value otherwise.
func (o *CertificatesPost) GetDayTillExpiration() int32 {
	if o == nil || IsNil(o.DayTillExpiration) {
		var ret int32
		return ret
	}
	return *o.DayTillExpiration
}

// GetDayTillExpirationOk returns a tuple with the DayTillExpiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetDayTillExpirationOk() (*int32, bool) {
	if o == nil || IsNil(o.DayTillExpiration) {
		return nil, false
	}
	return o.DayTillExpiration, true
}

// HasDayTillExpiration returns a boolean if a field has been set.
func (o *CertificatesPost) HasDayTillExpiration() bool {
	if o != nil && !IsNil(o.DayTillExpiration) {
		return true
	}

	return false
}

// SetDayTillExpiration gets a reference to the given int32 and assigns it to the DayTillExpiration field.
func (o *CertificatesPost) SetDayTillExpiration(v int32) {
	o.DayTillExpiration = &v
}

// GetDepartment returns the Department field value if set, zero value otherwise.
func (o *CertificatesPost) GetDepartment() []string {
	if o == nil || IsNil(o.Department) {
		var ret []string
		return ret
	}
	return o.Department
}

// GetDepartmentOk returns a tuple with the Department field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetDepartmentOk() ([]string, bool) {
	if o == nil || IsNil(o.Department) {
		return nil, false
	}
	return o.Department, true
}

// HasDepartment returns a boolean if a field has been set.
func (o *CertificatesPost) HasDepartment() bool {
	if o != nil && !IsNil(o.Department) {
		return true
	}

	return false
}

// SetDepartment gets a reference to the given []string and assigns it to the Department field.
func (o *CertificatesPost) SetDepartment(v []string) {
	o.Department = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CertificatesPost) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CertificatesPost) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CertificatesPost) SetDevice(v string) {
	o.Device = &v
}

// GetDigest returns the Digest field value
func (o *CertificatesPost) GetDigest() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Digest
}

// GetDigestOk returns a tuple with the Digest field value
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetDigestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Digest, true
}

// SetDigest sets field value
func (o *CertificatesPost) SetDigest(v string) {
	o.Digest = v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *CertificatesPost) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *CertificatesPost) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *CertificatesPost) SetEmail(v string) {
	o.Email = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *CertificatesPost) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *CertificatesPost) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *CertificatesPost) SetFolder(v string) {
	o.Folder = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *CertificatesPost) GetHostname() []string {
	if o == nil || IsNil(o.Hostname) {
		var ret []string
		return ret
	}
	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetHostnameOk() ([]string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *CertificatesPost) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given []string and assigns it to the Hostname field.
func (o *CertificatesPost) SetHostname(v []string) {
	o.Hostname = v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *CertificatesPost) GetIp() []string {
	if o == nil || IsNil(o.Ip) {
		var ret []string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetIpOk() ([]string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *CertificatesPost) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []string and assigns it to the Ip field.
func (o *CertificatesPost) SetIp(v []string) {
	o.Ip = v
}

// GetIsBlockPrivateKey returns the IsBlockPrivateKey field value if set, zero value otherwise.
func (o *CertificatesPost) GetIsBlockPrivateKey() bool {
	if o == nil || IsNil(o.IsBlockPrivateKey) {
		var ret bool
		return ret
	}
	return *o.IsBlockPrivateKey
}

// GetIsBlockPrivateKeyOk returns a tuple with the IsBlockPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetIsBlockPrivateKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBlockPrivateKey) {
		return nil, false
	}
	return o.IsBlockPrivateKey, true
}

// HasIsBlockPrivateKey returns a boolean if a field has been set.
func (o *CertificatesPost) HasIsBlockPrivateKey() bool {
	if o != nil && !IsNil(o.IsBlockPrivateKey) {
		return true
	}

	return false
}

// SetIsBlockPrivateKey gets a reference to the given bool and assigns it to the IsBlockPrivateKey field.
func (o *CertificatesPost) SetIsBlockPrivateKey(v bool) {
	o.IsBlockPrivateKey = &v
}

// GetIsCertificateAuthority returns the IsCertificateAuthority field value if set, zero value otherwise.
func (o *CertificatesPost) GetIsCertificateAuthority() bool {
	if o == nil || IsNil(o.IsCertificateAuthority) {
		var ret bool
		return ret
	}
	return *o.IsCertificateAuthority
}

// GetIsCertificateAuthorityOk returns a tuple with the IsCertificateAuthority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetIsCertificateAuthorityOk() (*bool, bool) {
	if o == nil || IsNil(o.IsCertificateAuthority) {
		return nil, false
	}
	return o.IsCertificateAuthority, true
}

// HasIsCertificateAuthority returns a boolean if a field has been set.
func (o *CertificatesPost) HasIsCertificateAuthority() bool {
	if o != nil && !IsNil(o.IsCertificateAuthority) {
		return true
	}

	return false
}

// SetIsCertificateAuthority gets a reference to the given bool and assigns it to the IsCertificateAuthority field.
func (o *CertificatesPost) SetIsCertificateAuthority(v bool) {
	o.IsCertificateAuthority = &v
}

// GetLocality returns the Locality field value if set, zero value otherwise.
func (o *CertificatesPost) GetLocality() string {
	if o == nil || IsNil(o.Locality) {
		var ret string
		return ret
	}
	return *o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetLocalityOk() (*string, bool) {
	if o == nil || IsNil(o.Locality) {
		return nil, false
	}
	return o.Locality, true
}

// HasLocality returns a boolean if a field has been set.
func (o *CertificatesPost) HasLocality() bool {
	if o != nil && !IsNil(o.Locality) {
		return true
	}

	return false
}

// SetLocality gets a reference to the given string and assigns it to the Locality field.
func (o *CertificatesPost) SetLocality(v string) {
	o.Locality = &v
}

// GetOcspResponderUrl returns the OcspResponderUrl field value if set, zero value otherwise.
func (o *CertificatesPost) GetOcspResponderUrl() string {
	if o == nil || IsNil(o.OcspResponderUrl) {
		var ret string
		return ret
	}
	return *o.OcspResponderUrl
}

// GetOcspResponderUrlOk returns a tuple with the OcspResponderUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetOcspResponderUrlOk() (*string, bool) {
	if o == nil || IsNil(o.OcspResponderUrl) {
		return nil, false
	}
	return o.OcspResponderUrl, true
}

// HasOcspResponderUrl returns a boolean if a field has been set.
func (o *CertificatesPost) HasOcspResponderUrl() bool {
	if o != nil && !IsNil(o.OcspResponderUrl) {
		return true
	}

	return false
}

// SetOcspResponderUrl gets a reference to the given string and assigns it to the OcspResponderUrl field.
func (o *CertificatesPost) SetOcspResponderUrl(v string) {
	o.OcspResponderUrl = &v
}

// GetSignedBy returns the SignedBy field value
func (o *CertificatesPost) GetSignedBy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SignedBy
}

// GetSignedByOk returns a tuple with the SignedBy field value
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetSignedByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SignedBy, true
}

// SetSignedBy sets field value
func (o *CertificatesPost) SetSignedBy(v string) {
	o.SignedBy = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *CertificatesPost) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *CertificatesPost) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *CertificatesPost) SetSnippet(v string) {
	o.Snippet = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *CertificatesPost) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificatesPost) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *CertificatesPost) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *CertificatesPost) SetState(v string) {
	o.State = &v
}

func (o CertificatesPost) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificatesPost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["algorithm"] = o.Algorithm
	if !IsNil(o.AlternateEmail) {
		toSerialize["alternate_email"] = o.AlternateEmail
	}
	toSerialize["certificate_name"] = o.CertificateName
	toSerialize["common_name"] = o.CommonName
	if !IsNil(o.CountryCode) {
		toSerialize["country_code"] = o.CountryCode
	}
	if !IsNil(o.DayTillExpiration) {
		toSerialize["day_till_expiration"] = o.DayTillExpiration
	}
	if !IsNil(o.Department) {
		toSerialize["department"] = o.Department
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	toSerialize["digest"] = o.Digest
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.IsBlockPrivateKey) {
		toSerialize["is_block_privateKey"] = o.IsBlockPrivateKey
	}
	if !IsNil(o.IsCertificateAuthority) {
		toSerialize["is_certificate_authority"] = o.IsCertificateAuthority
	}
	if !IsNil(o.Locality) {
		toSerialize["locality"] = o.Locality
	}
	if !IsNil(o.OcspResponderUrl) {
		toSerialize["ocsp_responder_url"] = o.OcspResponderUrl
	}
	toSerialize["signed_by"] = o.SignedBy
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificatesPost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"algorithm",
		"certificate_name",
		"common_name",
		"digest",
		"signed_by",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificatesPost := _CertificatesPost{}

	err = json.Unmarshal(data, &varCertificatesPost)

	if err != nil {
		return err
	}

	*o = CertificatesPost(varCertificatesPost)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "algorithm")
		delete(additionalProperties, "alternate_email")
		delete(additionalProperties, "certificate_name")
		delete(additionalProperties, "common_name")
		delete(additionalProperties, "country_code")
		delete(additionalProperties, "day_till_expiration")
		delete(additionalProperties, "department")
		delete(additionalProperties, "device")
		delete(additionalProperties, "digest")
		delete(additionalProperties, "email")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "hostname")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "is_block_privateKey")
		delete(additionalProperties, "is_certificate_authority")
		delete(additionalProperties, "locality")
		delete(additionalProperties, "ocsp_responder_url")
		delete(additionalProperties, "signed_by")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "state")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificatesPost struct {
	value *CertificatesPost
	isSet bool
}

func (v NullableCertificatesPost) Get() *CertificatesPost {
	return v.value
}

func (v *NullableCertificatesPost) Set(val *CertificatesPost) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificatesPost) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificatesPost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificatesPost(val *CertificatesPost) *NullableCertificatesPost {
	return &NullableCertificatesPost{value: val, isSet: true}
}

func (v NullableCertificatesPost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificatesPost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
