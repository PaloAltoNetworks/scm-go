/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the AuthenticationRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationRules{}

// AuthenticationRules struct for AuthenticationRules
type AuthenticationRules struct {
	// The authentication profile name
	AuthenticationEnforcement *string `json:"authentication_enforcement,omitempty"`
	// The destination URL categories
	Category []string `json:"category,omitempty"`
	// The description of the authentication rule
	Description *string `json:"description,omitempty"`
	// The destination addresses
	Destination []string `json:"destination"`
	// The destination Host Integrity Profile (HIP)
	DestinationHip []string `json:"destination_hip,omitempty"`
	Device         *string  `json:"device,omitempty"`
	// Is the authentication rule disabled?
	Disabled *bool   `json:"disabled,omitempty"`
	Folder   *string `json:"folder,omitempty"`
	// The source security zones
	From     []string `json:"from"`
	GroupTag *string  `json:"group_tag,omitempty"`
	// The source Host Integrity Profile (HIP)
	HipProfiles []string `json:"hip_profiles,omitempty"`
	// The UUID of the authentication rule
	Id *string `json:"id,omitempty"`
	// Log authentication timeouts?
	LogAuthenticationTimeout *bool `json:"log_authentication_timeout,omitempty"`
	// The log forwarding profile name
	LogSetting *string `json:"log_setting,omitempty"`
	// The name of the authentication rule
	Name string `json:"name"`
	// Are the destination addresses negated?
	NegateDestination *bool `json:"negate_destination,omitempty"`
	// Are the source addresses negated?
	NegateSource *bool `json:"negate_source,omitempty"`
	// The destination ports
	Service []string `json:"service"`
	Snippet *string  `json:"snippet,omitempty"`
	// The source addresses
	Source []string `json:"source"`
	// The source Host Integrity Profile (HIP)
	SourceHip []string `json:"source_hip,omitempty"`
	// The source users
	SourceUser []string `json:"source_user,omitempty"`
	// The authentication rule tags
	Tag []string `json:"tag,omitempty"`
	// The authentication session timeout (seconds)
	Timeout *int32 `json:"timeout,omitempty"`
	// The destination security zones
	To                   []string `json:"to"`
	AdditionalProperties map[string]interface{}
}

type _AuthenticationRules AuthenticationRules

// NewAuthenticationRules instantiates a new AuthenticationRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationRules(destination []string, from []string, name string, service []string, source []string, to []string) *AuthenticationRules {
	this := AuthenticationRules{}
	this.Destination = destination
	var disabled bool = false
	this.Disabled = &disabled
	this.From = from
	var logAuthenticationTimeout bool = false
	this.LogAuthenticationTimeout = &logAuthenticationTimeout
	this.Name = name
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	this.Service = service
	this.Source = source
	this.To = to
	return &this
}

// NewAuthenticationRulesWithDefaults instantiates a new AuthenticationRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationRulesWithDefaults() *AuthenticationRules {
	this := AuthenticationRules{}
	var disabled bool = false
	this.Disabled = &disabled
	var logAuthenticationTimeout bool = false
	this.LogAuthenticationTimeout = &logAuthenticationTimeout
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	return &this
}

// GetAuthenticationEnforcement returns the AuthenticationEnforcement field value if set, zero value otherwise.
func (o *AuthenticationRules) GetAuthenticationEnforcement() string {
	if o == nil || IsNil(o.AuthenticationEnforcement) {
		var ret string
		return ret
	}
	return *o.AuthenticationEnforcement
}

// GetAuthenticationEnforcementOk returns a tuple with the AuthenticationEnforcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetAuthenticationEnforcementOk() (*string, bool) {
	if o == nil || IsNil(o.AuthenticationEnforcement) {
		return nil, false
	}
	return o.AuthenticationEnforcement, true
}

// HasAuthenticationEnforcement returns a boolean if a field has been set.
func (o *AuthenticationRules) HasAuthenticationEnforcement() bool {
	if o != nil && !IsNil(o.AuthenticationEnforcement) {
		return true
	}

	return false
}

// SetAuthenticationEnforcement gets a reference to the given string and assigns it to the AuthenticationEnforcement field.
func (o *AuthenticationRules) SetAuthenticationEnforcement(v string) {
	o.AuthenticationEnforcement = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *AuthenticationRules) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *AuthenticationRules) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *AuthenticationRules) SetCategory(v []string) {
	o.Category = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *AuthenticationRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *AuthenticationRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *AuthenticationRules) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value
func (o *AuthenticationRules) GetDestination() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetDestinationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destination, true
}

// SetDestination sets field value
func (o *AuthenticationRules) SetDestination(v []string) {
	o.Destination = v
}

// GetDestinationHip returns the DestinationHip field value if set, zero value otherwise.
func (o *AuthenticationRules) GetDestinationHip() []string {
	if o == nil || IsNil(o.DestinationHip) {
		var ret []string
		return ret
	}
	return o.DestinationHip
}

// GetDestinationHipOk returns a tuple with the DestinationHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetDestinationHipOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationHip) {
		return nil, false
	}
	return o.DestinationHip, true
}

// HasDestinationHip returns a boolean if a field has been set.
func (o *AuthenticationRules) HasDestinationHip() bool {
	if o != nil && !IsNil(o.DestinationHip) {
		return true
	}

	return false
}

// SetDestinationHip gets a reference to the given []string and assigns it to the DestinationHip field.
func (o *AuthenticationRules) SetDestinationHip(v []string) {
	o.DestinationHip = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *AuthenticationRules) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *AuthenticationRules) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *AuthenticationRules) SetDevice(v string) {
	o.Device = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *AuthenticationRules) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *AuthenticationRules) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *AuthenticationRules) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *AuthenticationRules) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *AuthenticationRules) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *AuthenticationRules) SetFolder(v string) {
	o.Folder = &v
}

// GetFrom returns the From field value
func (o *AuthenticationRules) GetFrom() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetFromOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.From, true
}

// SetFrom sets field value
func (o *AuthenticationRules) SetFrom(v []string) {
	o.From = v
}

// GetGroupTag returns the GroupTag field value if set, zero value otherwise.
func (o *AuthenticationRules) GetGroupTag() string {
	if o == nil || IsNil(o.GroupTag) {
		var ret string
		return ret
	}
	return *o.GroupTag
}

// GetGroupTagOk returns a tuple with the GroupTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetGroupTagOk() (*string, bool) {
	if o == nil || IsNil(o.GroupTag) {
		return nil, false
	}
	return o.GroupTag, true
}

// HasGroupTag returns a boolean if a field has been set.
func (o *AuthenticationRules) HasGroupTag() bool {
	if o != nil && !IsNil(o.GroupTag) {
		return true
	}

	return false
}

// SetGroupTag gets a reference to the given string and assigns it to the GroupTag field.
func (o *AuthenticationRules) SetGroupTag(v string) {
	o.GroupTag = &v
}

// GetHipProfiles returns the HipProfiles field value if set, zero value otherwise.
func (o *AuthenticationRules) GetHipProfiles() []string {
	if o == nil || IsNil(o.HipProfiles) {
		var ret []string
		return ret
	}
	return o.HipProfiles
}

// GetHipProfilesOk returns a tuple with the HipProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetHipProfilesOk() ([]string, bool) {
	if o == nil || IsNil(o.HipProfiles) {
		return nil, false
	}
	return o.HipProfiles, true
}

// HasHipProfiles returns a boolean if a field has been set.
func (o *AuthenticationRules) HasHipProfiles() bool {
	if o != nil && !IsNil(o.HipProfiles) {
		return true
	}

	return false
}

// SetHipProfiles gets a reference to the given []string and assigns it to the HipProfiles field.
func (o *AuthenticationRules) SetHipProfiles(v []string) {
	o.HipProfiles = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *AuthenticationRules) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *AuthenticationRules) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *AuthenticationRules) SetId(v string) {
	o.Id = &v
}

// GetLogAuthenticationTimeout returns the LogAuthenticationTimeout field value if set, zero value otherwise.
func (o *AuthenticationRules) GetLogAuthenticationTimeout() bool {
	if o == nil || IsNil(o.LogAuthenticationTimeout) {
		var ret bool
		return ret
	}
	return *o.LogAuthenticationTimeout
}

// GetLogAuthenticationTimeoutOk returns a tuple with the LogAuthenticationTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetLogAuthenticationTimeoutOk() (*bool, bool) {
	if o == nil || IsNil(o.LogAuthenticationTimeout) {
		return nil, false
	}
	return o.LogAuthenticationTimeout, true
}

// HasLogAuthenticationTimeout returns a boolean if a field has been set.
func (o *AuthenticationRules) HasLogAuthenticationTimeout() bool {
	if o != nil && !IsNil(o.LogAuthenticationTimeout) {
		return true
	}

	return false
}

// SetLogAuthenticationTimeout gets a reference to the given bool and assigns it to the LogAuthenticationTimeout field.
func (o *AuthenticationRules) SetLogAuthenticationTimeout(v bool) {
	o.LogAuthenticationTimeout = &v
}

// GetLogSetting returns the LogSetting field value if set, zero value otherwise.
func (o *AuthenticationRules) GetLogSetting() string {
	if o == nil || IsNil(o.LogSetting) {
		var ret string
		return ret
	}
	return *o.LogSetting
}

// GetLogSettingOk returns a tuple with the LogSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetLogSettingOk() (*string, bool) {
	if o == nil || IsNil(o.LogSetting) {
		return nil, false
	}
	return o.LogSetting, true
}

// HasLogSetting returns a boolean if a field has been set.
func (o *AuthenticationRules) HasLogSetting() bool {
	if o != nil && !IsNil(o.LogSetting) {
		return true
	}

	return false
}

// SetLogSetting gets a reference to the given string and assigns it to the LogSetting field.
func (o *AuthenticationRules) SetLogSetting(v string) {
	o.LogSetting = &v
}

// GetName returns the Name field value
func (o *AuthenticationRules) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *AuthenticationRules) SetName(v string) {
	o.Name = v
}

// GetNegateDestination returns the NegateDestination field value if set, zero value otherwise.
func (o *AuthenticationRules) GetNegateDestination() bool {
	if o == nil || IsNil(o.NegateDestination) {
		var ret bool
		return ret
	}
	return *o.NegateDestination
}

// GetNegateDestinationOk returns a tuple with the NegateDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetNegateDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateDestination) {
		return nil, false
	}
	return o.NegateDestination, true
}

// HasNegateDestination returns a boolean if a field has been set.
func (o *AuthenticationRules) HasNegateDestination() bool {
	if o != nil && !IsNil(o.NegateDestination) {
		return true
	}

	return false
}

// SetNegateDestination gets a reference to the given bool and assigns it to the NegateDestination field.
func (o *AuthenticationRules) SetNegateDestination(v bool) {
	o.NegateDestination = &v
}

// GetNegateSource returns the NegateSource field value if set, zero value otherwise.
func (o *AuthenticationRules) GetNegateSource() bool {
	if o == nil || IsNil(o.NegateSource) {
		var ret bool
		return ret
	}
	return *o.NegateSource
}

// GetNegateSourceOk returns a tuple with the NegateSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetNegateSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateSource) {
		return nil, false
	}
	return o.NegateSource, true
}

// HasNegateSource returns a boolean if a field has been set.
func (o *AuthenticationRules) HasNegateSource() bool {
	if o != nil && !IsNil(o.NegateSource) {
		return true
	}

	return false
}

// SetNegateSource gets a reference to the given bool and assigns it to the NegateSource field.
func (o *AuthenticationRules) SetNegateSource(v bool) {
	o.NegateSource = &v
}

// GetService returns the Service field value
func (o *AuthenticationRules) GetService() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetServiceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service, true
}

// SetService sets field value
func (o *AuthenticationRules) SetService(v []string) {
	o.Service = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *AuthenticationRules) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *AuthenticationRules) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *AuthenticationRules) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSource returns the Source field value
func (o *AuthenticationRules) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetSourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *AuthenticationRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceHip returns the SourceHip field value if set, zero value otherwise.
func (o *AuthenticationRules) GetSourceHip() []string {
	if o == nil || IsNil(o.SourceHip) {
		var ret []string
		return ret
	}
	return o.SourceHip
}

// GetSourceHipOk returns a tuple with the SourceHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetSourceHipOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceHip) {
		return nil, false
	}
	return o.SourceHip, true
}

// HasSourceHip returns a boolean if a field has been set.
func (o *AuthenticationRules) HasSourceHip() bool {
	if o != nil && !IsNil(o.SourceHip) {
		return true
	}

	return false
}

// SetSourceHip gets a reference to the given []string and assigns it to the SourceHip field.
func (o *AuthenticationRules) SetSourceHip(v []string) {
	o.SourceHip = v
}

// GetSourceUser returns the SourceUser field value if set, zero value otherwise.
func (o *AuthenticationRules) GetSourceUser() []string {
	if o == nil || IsNil(o.SourceUser) {
		var ret []string
		return ret
	}
	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetSourceUserOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceUser) {
		return nil, false
	}
	return o.SourceUser, true
}

// HasSourceUser returns a boolean if a field has been set.
func (o *AuthenticationRules) HasSourceUser() bool {
	if o != nil && !IsNil(o.SourceUser) {
		return true
	}

	return false
}

// SetSourceUser gets a reference to the given []string and assigns it to the SourceUser field.
func (o *AuthenticationRules) SetSourceUser(v []string) {
	o.SourceUser = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *AuthenticationRules) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *AuthenticationRules) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *AuthenticationRules) SetTag(v []string) {
	o.Tag = v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *AuthenticationRules) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *AuthenticationRules) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *AuthenticationRules) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetTo returns the To field value
func (o *AuthenticationRules) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *AuthenticationRules) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *AuthenticationRules) SetTo(v []string) {
	o.To = v
}

func (o AuthenticationRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationEnforcement) {
		toSerialize["authentication_enforcement"] = o.AuthenticationEnforcement
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.DestinationHip) {
		toSerialize["destination_hip"] = o.DestinationHip
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["from"] = o.From
	if !IsNil(o.GroupTag) {
		toSerialize["group_tag"] = o.GroupTag
	}
	if !IsNil(o.HipProfiles) {
		toSerialize["hip_profiles"] = o.HipProfiles
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LogAuthenticationTimeout) {
		toSerialize["log_authentication_timeout"] = o.LogAuthenticationTimeout
	}
	if !IsNil(o.LogSetting) {
		toSerialize["log_setting"] = o.LogSetting
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NegateDestination) {
		toSerialize["negate_destination"] = o.NegateDestination
	}
	if !IsNil(o.NegateSource) {
		toSerialize["negate_source"] = o.NegateSource
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.SourceHip) {
		toSerialize["source_hip"] = o.SourceHip
	}
	if !IsNil(o.SourceUser) {
		toSerialize["source_user"] = o.SourceUser
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	toSerialize["to"] = o.To

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AuthenticationRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination",
		"from",
		"name",
		"service",
		"source",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuthenticationRules := _AuthenticationRules{}

	err = json.Unmarshal(data, &varAuthenticationRules)

	if err != nil {
		return err
	}

	*o = AuthenticationRules(varAuthenticationRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authentication_enforcement")
		delete(additionalProperties, "category")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "destination_hip")
		delete(additionalProperties, "device")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "from")
		delete(additionalProperties, "group_tag")
		delete(additionalProperties, "hip_profiles")
		delete(additionalProperties, "id")
		delete(additionalProperties, "log_authentication_timeout")
		delete(additionalProperties, "log_setting")
		delete(additionalProperties, "name")
		delete(additionalProperties, "negate_destination")
		delete(additionalProperties, "negate_source")
		delete(additionalProperties, "service")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_hip")
		delete(additionalProperties, "source_user")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAuthenticationRules struct {
	value *AuthenticationRules
	isSet bool
}

func (v NullableAuthenticationRules) Get() *AuthenticationRules {
	return v.value
}

func (v *NullableAuthenticationRules) Set(val *AuthenticationRules) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationRules) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationRules(val *AuthenticationRules) *NullableAuthenticationRules {
	return &NullableAuthenticationRules{value: val, isSet: true}
}

func (v NullableAuthenticationRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
