/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the CertificateProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateProfiles{}

// CertificateProfiles struct for CertificateProfiles
type CertificateProfiles struct {
	// Block sessions with expired certificates?
	BlockExpiredCert *bool `json:"block_expired_cert,omitempty"`
	// Block session if certificate status cannot be retrieved within timeout?
	BlockTimeoutCert *bool `json:"block_timeout_cert,omitempty"`
	// Block session if the certificate was not issued to the authenticating device?
	BlockUnauthenticatedCert *bool `json:"block_unauthenticated_cert,omitempty"`
	// Block session if certificate status is unknown?
	BlockUnknownCert *bool `json:"block_unknown_cert,omitempty"`
	// An ordered list of CA certificates
	CaCertificates []CertificateProfilesCaCertificatesInner `json:"ca_certificates"`
	// Certificate status timeout
	CertStatusTimeout *string `json:"cert_status_timeout,omitempty"`
	// CRL receive timeout (seconds)
	CrlReceiveTimeout *string `json:"crl_receive_timeout,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// User domain
	Domain *string `json:"domain,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the certificate profile
	Id *string `json:"id,omitempty"`
	// The name of the certificate profile
	Name string `json:"name"`
	// OCSP receive timeout (seconds)
	OcspReceiveTimeout *string `json:"ocsp_receive_timeout,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Use CRL?
	UseCrl *bool `json:"use_crl,omitempty"`
	// Use OCSP?
	UseOcsp              *bool                             `json:"use_ocsp,omitempty"`
	UsernameField        *CertificateProfilesUsernameField `json:"username_field,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _CertificateProfiles CertificateProfiles

// NewCertificateProfiles instantiates a new CertificateProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateProfiles(caCertificates []CertificateProfilesCaCertificatesInner, name string) *CertificateProfiles {
	this := CertificateProfiles{}
	this.CaCertificates = caCertificates
	this.Name = name
	return &this
}

// NewCertificateProfilesWithDefaults instantiates a new CertificateProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateProfilesWithDefaults() *CertificateProfiles {
	this := CertificateProfiles{}
	return &this
}

// GetBlockExpiredCert returns the BlockExpiredCert field value if set, zero value otherwise.
func (o *CertificateProfiles) GetBlockExpiredCert() bool {
	if o == nil || IsNil(o.BlockExpiredCert) {
		var ret bool
		return ret
	}
	return *o.BlockExpiredCert
}

// GetBlockExpiredCertOk returns a tuple with the BlockExpiredCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetBlockExpiredCertOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockExpiredCert) {
		return nil, false
	}
	return o.BlockExpiredCert, true
}

// HasBlockExpiredCert returns a boolean if a field has been set.
func (o *CertificateProfiles) HasBlockExpiredCert() bool {
	if o != nil && !IsNil(o.BlockExpiredCert) {
		return true
	}

	return false
}

// SetBlockExpiredCert gets a reference to the given bool and assigns it to the BlockExpiredCert field.
func (o *CertificateProfiles) SetBlockExpiredCert(v bool) {
	o.BlockExpiredCert = &v
}

// GetBlockTimeoutCert returns the BlockTimeoutCert field value if set, zero value otherwise.
func (o *CertificateProfiles) GetBlockTimeoutCert() bool {
	if o == nil || IsNil(o.BlockTimeoutCert) {
		var ret bool
		return ret
	}
	return *o.BlockTimeoutCert
}

// GetBlockTimeoutCertOk returns a tuple with the BlockTimeoutCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetBlockTimeoutCertOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockTimeoutCert) {
		return nil, false
	}
	return o.BlockTimeoutCert, true
}

// HasBlockTimeoutCert returns a boolean if a field has been set.
func (o *CertificateProfiles) HasBlockTimeoutCert() bool {
	if o != nil && !IsNil(o.BlockTimeoutCert) {
		return true
	}

	return false
}

// SetBlockTimeoutCert gets a reference to the given bool and assigns it to the BlockTimeoutCert field.
func (o *CertificateProfiles) SetBlockTimeoutCert(v bool) {
	o.BlockTimeoutCert = &v
}

// GetBlockUnauthenticatedCert returns the BlockUnauthenticatedCert field value if set, zero value otherwise.
func (o *CertificateProfiles) GetBlockUnauthenticatedCert() bool {
	if o == nil || IsNil(o.BlockUnauthenticatedCert) {
		var ret bool
		return ret
	}
	return *o.BlockUnauthenticatedCert
}

// GetBlockUnauthenticatedCertOk returns a tuple with the BlockUnauthenticatedCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetBlockUnauthenticatedCertOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockUnauthenticatedCert) {
		return nil, false
	}
	return o.BlockUnauthenticatedCert, true
}

// HasBlockUnauthenticatedCert returns a boolean if a field has been set.
func (o *CertificateProfiles) HasBlockUnauthenticatedCert() bool {
	if o != nil && !IsNil(o.BlockUnauthenticatedCert) {
		return true
	}

	return false
}

// SetBlockUnauthenticatedCert gets a reference to the given bool and assigns it to the BlockUnauthenticatedCert field.
func (o *CertificateProfiles) SetBlockUnauthenticatedCert(v bool) {
	o.BlockUnauthenticatedCert = &v
}

// GetBlockUnknownCert returns the BlockUnknownCert field value if set, zero value otherwise.
func (o *CertificateProfiles) GetBlockUnknownCert() bool {
	if o == nil || IsNil(o.BlockUnknownCert) {
		var ret bool
		return ret
	}
	return *o.BlockUnknownCert
}

// GetBlockUnknownCertOk returns a tuple with the BlockUnknownCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetBlockUnknownCertOk() (*bool, bool) {
	if o == nil || IsNil(o.BlockUnknownCert) {
		return nil, false
	}
	return o.BlockUnknownCert, true
}

// HasBlockUnknownCert returns a boolean if a field has been set.
func (o *CertificateProfiles) HasBlockUnknownCert() bool {
	if o != nil && !IsNil(o.BlockUnknownCert) {
		return true
	}

	return false
}

// SetBlockUnknownCert gets a reference to the given bool and assigns it to the BlockUnknownCert field.
func (o *CertificateProfiles) SetBlockUnknownCert(v bool) {
	o.BlockUnknownCert = &v
}

// GetCaCertificates returns the CaCertificates field value
func (o *CertificateProfiles) GetCaCertificates() []CertificateProfilesCaCertificatesInner {
	if o == nil {
		var ret []CertificateProfilesCaCertificatesInner
		return ret
	}

	return o.CaCertificates
}

// GetCaCertificatesOk returns a tuple with the CaCertificates field value
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetCaCertificatesOk() ([]CertificateProfilesCaCertificatesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaCertificates, true
}

// SetCaCertificates sets field value
func (o *CertificateProfiles) SetCaCertificates(v []CertificateProfilesCaCertificatesInner) {
	o.CaCertificates = v
}

// GetCertStatusTimeout returns the CertStatusTimeout field value if set, zero value otherwise.
func (o *CertificateProfiles) GetCertStatusTimeout() string {
	if o == nil || IsNil(o.CertStatusTimeout) {
		var ret string
		return ret
	}
	return *o.CertStatusTimeout
}

// GetCertStatusTimeoutOk returns a tuple with the CertStatusTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetCertStatusTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.CertStatusTimeout) {
		return nil, false
	}
	return o.CertStatusTimeout, true
}

// HasCertStatusTimeout returns a boolean if a field has been set.
func (o *CertificateProfiles) HasCertStatusTimeout() bool {
	if o != nil && !IsNil(o.CertStatusTimeout) {
		return true
	}

	return false
}

// SetCertStatusTimeout gets a reference to the given string and assigns it to the CertStatusTimeout field.
func (o *CertificateProfiles) SetCertStatusTimeout(v string) {
	o.CertStatusTimeout = &v
}

// GetCrlReceiveTimeout returns the CrlReceiveTimeout field value if set, zero value otherwise.
func (o *CertificateProfiles) GetCrlReceiveTimeout() string {
	if o == nil || IsNil(o.CrlReceiveTimeout) {
		var ret string
		return ret
	}
	return *o.CrlReceiveTimeout
}

// GetCrlReceiveTimeoutOk returns a tuple with the CrlReceiveTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetCrlReceiveTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.CrlReceiveTimeout) {
		return nil, false
	}
	return o.CrlReceiveTimeout, true
}

// HasCrlReceiveTimeout returns a boolean if a field has been set.
func (o *CertificateProfiles) HasCrlReceiveTimeout() bool {
	if o != nil && !IsNil(o.CrlReceiveTimeout) {
		return true
	}

	return false
}

// SetCrlReceiveTimeout gets a reference to the given string and assigns it to the CrlReceiveTimeout field.
func (o *CertificateProfiles) SetCrlReceiveTimeout(v string) {
	o.CrlReceiveTimeout = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *CertificateProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *CertificateProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *CertificateProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *CertificateProfiles) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *CertificateProfiles) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *CertificateProfiles) SetDomain(v string) {
	o.Domain = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *CertificateProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *CertificateProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *CertificateProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *CertificateProfiles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *CertificateProfiles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *CertificateProfiles) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *CertificateProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CertificateProfiles) SetName(v string) {
	o.Name = v
}

// GetOcspReceiveTimeout returns the OcspReceiveTimeout field value if set, zero value otherwise.
func (o *CertificateProfiles) GetOcspReceiveTimeout() string {
	if o == nil || IsNil(o.OcspReceiveTimeout) {
		var ret string
		return ret
	}
	return *o.OcspReceiveTimeout
}

// GetOcspReceiveTimeoutOk returns a tuple with the OcspReceiveTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetOcspReceiveTimeoutOk() (*string, bool) {
	if o == nil || IsNil(o.OcspReceiveTimeout) {
		return nil, false
	}
	return o.OcspReceiveTimeout, true
}

// HasOcspReceiveTimeout returns a boolean if a field has been set.
func (o *CertificateProfiles) HasOcspReceiveTimeout() bool {
	if o != nil && !IsNil(o.OcspReceiveTimeout) {
		return true
	}

	return false
}

// SetOcspReceiveTimeout gets a reference to the given string and assigns it to the OcspReceiveTimeout field.
func (o *CertificateProfiles) SetOcspReceiveTimeout(v string) {
	o.OcspReceiveTimeout = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *CertificateProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *CertificateProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *CertificateProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetUseCrl returns the UseCrl field value if set, zero value otherwise.
func (o *CertificateProfiles) GetUseCrl() bool {
	if o == nil || IsNil(o.UseCrl) {
		var ret bool
		return ret
	}
	return *o.UseCrl
}

// GetUseCrlOk returns a tuple with the UseCrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetUseCrlOk() (*bool, bool) {
	if o == nil || IsNil(o.UseCrl) {
		return nil, false
	}
	return o.UseCrl, true
}

// HasUseCrl returns a boolean if a field has been set.
func (o *CertificateProfiles) HasUseCrl() bool {
	if o != nil && !IsNil(o.UseCrl) {
		return true
	}

	return false
}

// SetUseCrl gets a reference to the given bool and assigns it to the UseCrl field.
func (o *CertificateProfiles) SetUseCrl(v bool) {
	o.UseCrl = &v
}

// GetUseOcsp returns the UseOcsp field value if set, zero value otherwise.
func (o *CertificateProfiles) GetUseOcsp() bool {
	if o == nil || IsNil(o.UseOcsp) {
		var ret bool
		return ret
	}
	return *o.UseOcsp
}

// GetUseOcspOk returns a tuple with the UseOcsp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetUseOcspOk() (*bool, bool) {
	if o == nil || IsNil(o.UseOcsp) {
		return nil, false
	}
	return o.UseOcsp, true
}

// HasUseOcsp returns a boolean if a field has been set.
func (o *CertificateProfiles) HasUseOcsp() bool {
	if o != nil && !IsNil(o.UseOcsp) {
		return true
	}

	return false
}

// SetUseOcsp gets a reference to the given bool and assigns it to the UseOcsp field.
func (o *CertificateProfiles) SetUseOcsp(v bool) {
	o.UseOcsp = &v
}

// GetUsernameField returns the UsernameField field value if set, zero value otherwise.
func (o *CertificateProfiles) GetUsernameField() CertificateProfilesUsernameField {
	if o == nil || IsNil(o.UsernameField) {
		var ret CertificateProfilesUsernameField
		return ret
	}
	return *o.UsernameField
}

// GetUsernameFieldOk returns a tuple with the UsernameField field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateProfiles) GetUsernameFieldOk() (*CertificateProfilesUsernameField, bool) {
	if o == nil || IsNil(o.UsernameField) {
		return nil, false
	}
	return o.UsernameField, true
}

// HasUsernameField returns a boolean if a field has been set.
func (o *CertificateProfiles) HasUsernameField() bool {
	if o != nil && !IsNil(o.UsernameField) {
		return true
	}

	return false
}

// SetUsernameField gets a reference to the given CertificateProfilesUsernameField and assigns it to the UsernameField field.
func (o *CertificateProfiles) SetUsernameField(v CertificateProfilesUsernameField) {
	o.UsernameField = &v
}

func (o CertificateProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BlockExpiredCert) {
		toSerialize["block_expired_cert"] = o.BlockExpiredCert
	}
	if !IsNil(o.BlockTimeoutCert) {
		toSerialize["block_timeout_cert"] = o.BlockTimeoutCert
	}
	if !IsNil(o.BlockUnauthenticatedCert) {
		toSerialize["block_unauthenticated_cert"] = o.BlockUnauthenticatedCert
	}
	if !IsNil(o.BlockUnknownCert) {
		toSerialize["block_unknown_cert"] = o.BlockUnknownCert
	}
	toSerialize["ca_certificates"] = o.CaCertificates
	if !IsNil(o.CertStatusTimeout) {
		toSerialize["cert_status_timeout"] = o.CertStatusTimeout
	}
	if !IsNil(o.CrlReceiveTimeout) {
		toSerialize["crl_receive_timeout"] = o.CrlReceiveTimeout
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.OcspReceiveTimeout) {
		toSerialize["ocsp_receive_timeout"] = o.OcspReceiveTimeout
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.UseCrl) {
		toSerialize["use_crl"] = o.UseCrl
	}
	if !IsNil(o.UseOcsp) {
		toSerialize["use_ocsp"] = o.UseOcsp
	}
	if !IsNil(o.UsernameField) {
		toSerialize["username_field"] = o.UsernameField
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CertificateProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ca_certificates",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateProfiles := _CertificateProfiles{}

	err = json.Unmarshal(data, &varCertificateProfiles)

	if err != nil {
		return err
	}

	*o = CertificateProfiles(varCertificateProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "block_expired_cert")
		delete(additionalProperties, "block_timeout_cert")
		delete(additionalProperties, "block_unauthenticated_cert")
		delete(additionalProperties, "block_unknown_cert")
		delete(additionalProperties, "ca_certificates")
		delete(additionalProperties, "cert_status_timeout")
		delete(additionalProperties, "crl_receive_timeout")
		delete(additionalProperties, "device")
		delete(additionalProperties, "domain")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ocsp_receive_timeout")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "use_crl")
		delete(additionalProperties, "use_ocsp")
		delete(additionalProperties, "username_field")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCertificateProfiles struct {
	value *CertificateProfiles
	isSet bool
}

func (v NullableCertificateProfiles) Get() *CertificateProfiles {
	return v.value
}

func (v *NullableCertificateProfiles) Set(val *CertificateProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateProfiles(val *CertificateProfiles) *NullableCertificateProfiles {
	return &NullableCertificateProfiles{value: val, isSet: true}
}

func (v NullableCertificateProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
