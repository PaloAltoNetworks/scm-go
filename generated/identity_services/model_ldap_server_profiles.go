/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
	"fmt"
)

// checks if the LdapServerProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LdapServerProfiles{}

// LdapServerProfiles struct for LdapServerProfiles
type LdapServerProfiles struct {
	// The base DN
	Base *string `json:"base,omitempty"`
	// The bind DN
	BindDn *string `json:"bind_dn,omitempty"`
	// The bind password
	BindPassword *string `json:"bind_password,omitempty"`
	// The bind timeout (seconds)
	BindTimelimit *string `json:"bind_timelimit,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the LDAP server profile
	Id string `json:"id"`
	// The LDAP server time
	LdapType *string `json:"ldap_type,omitempty"`
	// The name of the LDAP server profile
	Name string `json:"name"`
	// The search retry interval (seconds)
	RetryInterval *int32 `json:"retry_interval,omitempty"`
	// The LDAP server configuration
	Server []LdapServerProfilesServerInner `json:"server"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Require SSL/TLS secured connection?
	Ssl *bool `json:"ssl,omitempty"`
	// The search timeout (seconds)
	Timelimit *int32 `json:"timelimit,omitempty"`
	// Verify server certificate for SSL sessions?
	VerifyServerCertificate *bool `json:"verify_server_certificate,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _LdapServerProfiles LdapServerProfiles

// NewLdapServerProfiles instantiates a new LdapServerProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapServerProfiles(id string, name string, server []LdapServerProfilesServerInner) *LdapServerProfiles {
	this := LdapServerProfiles{}
	this.Id = id
	this.Name = name
	this.Server = server
	return &this
}

// NewLdapServerProfilesWithDefaults instantiates a new LdapServerProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapServerProfilesWithDefaults() *LdapServerProfiles {
	this := LdapServerProfiles{}
	return &this
}

// GetBase returns the Base field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetBase() string {
	if o == nil || IsNil(o.Base) {
		var ret string
		return ret
	}
	return *o.Base
}

// GetBaseOk returns a tuple with the Base field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetBaseOk() (*string, bool) {
	if o == nil || IsNil(o.Base) {
		return nil, false
	}
	return o.Base, true
}

// HasBase returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasBase() bool {
	if o != nil && !IsNil(o.Base) {
		return true
	}

	return false
}

// SetBase gets a reference to the given string and assigns it to the Base field.
func (o *LdapServerProfiles) SetBase(v string) {
	o.Base = &v
}

// GetBindDn returns the BindDn field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetBindDn() string {
	if o == nil || IsNil(o.BindDn) {
		var ret string
		return ret
	}
	return *o.BindDn
}

// GetBindDnOk returns a tuple with the BindDn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetBindDnOk() (*string, bool) {
	if o == nil || IsNil(o.BindDn) {
		return nil, false
	}
	return o.BindDn, true
}

// HasBindDn returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasBindDn() bool {
	if o != nil && !IsNil(o.BindDn) {
		return true
	}

	return false
}

// SetBindDn gets a reference to the given string and assigns it to the BindDn field.
func (o *LdapServerProfiles) SetBindDn(v string) {
	o.BindDn = &v
}

// GetBindPassword returns the BindPassword field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetBindPassword() string {
	if o == nil || IsNil(o.BindPassword) {
		var ret string
		return ret
	}
	return *o.BindPassword
}

// GetBindPasswordOk returns a tuple with the BindPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetBindPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.BindPassword) {
		return nil, false
	}
	return o.BindPassword, true
}

// HasBindPassword returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasBindPassword() bool {
	if o != nil && !IsNil(o.BindPassword) {
		return true
	}

	return false
}

// SetBindPassword gets a reference to the given string and assigns it to the BindPassword field.
func (o *LdapServerProfiles) SetBindPassword(v string) {
	o.BindPassword = &v
}

// GetBindTimelimit returns the BindTimelimit field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetBindTimelimit() string {
	if o == nil || IsNil(o.BindTimelimit) {
		var ret string
		return ret
	}
	return *o.BindTimelimit
}

// GetBindTimelimitOk returns a tuple with the BindTimelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetBindTimelimitOk() (*string, bool) {
	if o == nil || IsNil(o.BindTimelimit) {
		return nil, false
	}
	return o.BindTimelimit, true
}

// HasBindTimelimit returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasBindTimelimit() bool {
	if o != nil && !IsNil(o.BindTimelimit) {
		return true
	}

	return false
}

// SetBindTimelimit gets a reference to the given string and assigns it to the BindTimelimit field.
func (o *LdapServerProfiles) SetBindTimelimit(v string) {
	o.BindTimelimit = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *LdapServerProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *LdapServerProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *LdapServerProfiles) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *LdapServerProfiles) SetId(v string) {
	o.Id = v
}

// GetLdapType returns the LdapType field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetLdapType() string {
	if o == nil || IsNil(o.LdapType) {
		var ret string
		return ret
	}
	return *o.LdapType
}

// GetLdapTypeOk returns a tuple with the LdapType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetLdapTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LdapType) {
		return nil, false
	}
	return o.LdapType, true
}

// HasLdapType returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasLdapType() bool {
	if o != nil && !IsNil(o.LdapType) {
		return true
	}

	return false
}

// SetLdapType gets a reference to the given string and assigns it to the LdapType field.
func (o *LdapServerProfiles) SetLdapType(v string) {
	o.LdapType = &v
}

// GetName returns the Name field value
func (o *LdapServerProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LdapServerProfiles) SetName(v string) {
	o.Name = v
}

// GetRetryInterval returns the RetryInterval field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetRetryInterval() int32 {
	if o == nil || IsNil(o.RetryInterval) {
		var ret int32
		return ret
	}
	return *o.RetryInterval
}

// GetRetryIntervalOk returns a tuple with the RetryInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetRetryIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.RetryInterval) {
		return nil, false
	}
	return o.RetryInterval, true
}

// HasRetryInterval returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasRetryInterval() bool {
	if o != nil && !IsNil(o.RetryInterval) {
		return true
	}

	return false
}

// SetRetryInterval gets a reference to the given int32 and assigns it to the RetryInterval field.
func (o *LdapServerProfiles) SetRetryInterval(v int32) {
	o.RetryInterval = &v
}

// GetServer returns the Server field value
func (o *LdapServerProfiles) GetServer() []LdapServerProfilesServerInner {
	if o == nil {
		var ret []LdapServerProfilesServerInner
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetServerOk() ([]LdapServerProfilesServerInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server, true
}

// SetServer sets field value
func (o *LdapServerProfiles) SetServer(v []LdapServerProfilesServerInner) {
	o.Server = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *LdapServerProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSsl returns the Ssl field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetSsl() bool {
	if o == nil || IsNil(o.Ssl) {
		var ret bool
		return ret
	}
	return *o.Ssl
}

// GetSslOk returns a tuple with the Ssl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetSslOk() (*bool, bool) {
	if o == nil || IsNil(o.Ssl) {
		return nil, false
	}
	return o.Ssl, true
}

// HasSsl returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasSsl() bool {
	if o != nil && !IsNil(o.Ssl) {
		return true
	}

	return false
}

// SetSsl gets a reference to the given bool and assigns it to the Ssl field.
func (o *LdapServerProfiles) SetSsl(v bool) {
	o.Ssl = &v
}

// GetTimelimit returns the Timelimit field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetTimelimit() int32 {
	if o == nil || IsNil(o.Timelimit) {
		var ret int32
		return ret
	}
	return *o.Timelimit
}

// GetTimelimitOk returns a tuple with the Timelimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetTimelimitOk() (*int32, bool) {
	if o == nil || IsNil(o.Timelimit) {
		return nil, false
	}
	return o.Timelimit, true
}

// HasTimelimit returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasTimelimit() bool {
	if o != nil && !IsNil(o.Timelimit) {
		return true
	}

	return false
}

// SetTimelimit gets a reference to the given int32 and assigns it to the Timelimit field.
func (o *LdapServerProfiles) SetTimelimit(v int32) {
	o.Timelimit = &v
}

// GetVerifyServerCertificate returns the VerifyServerCertificate field value if set, zero value otherwise.
func (o *LdapServerProfiles) GetVerifyServerCertificate() bool {
	if o == nil || IsNil(o.VerifyServerCertificate) {
		var ret bool
		return ret
	}
	return *o.VerifyServerCertificate
}

// GetVerifyServerCertificateOk returns a tuple with the VerifyServerCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LdapServerProfiles) GetVerifyServerCertificateOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifyServerCertificate) {
		return nil, false
	}
	return o.VerifyServerCertificate, true
}

// HasVerifyServerCertificate returns a boolean if a field has been set.
func (o *LdapServerProfiles) HasVerifyServerCertificate() bool {
	if o != nil && !IsNil(o.VerifyServerCertificate) {
		return true
	}

	return false
}

// SetVerifyServerCertificate gets a reference to the given bool and assigns it to the VerifyServerCertificate field.
func (o *LdapServerProfiles) SetVerifyServerCertificate(v bool) {
	o.VerifyServerCertificate = &v
}

func (o LdapServerProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LdapServerProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Base) {
		toSerialize["base"] = o.Base
	}
	if !IsNil(o.BindDn) {
		toSerialize["bind_dn"] = o.BindDn
	}
	if !IsNil(o.BindPassword) {
		toSerialize["bind_password"] = o.BindPassword
	}
	if !IsNil(o.BindTimelimit) {
		toSerialize["bind_timelimit"] = o.BindTimelimit
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.LdapType) {
		toSerialize["ldap_type"] = o.LdapType
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.RetryInterval) {
		toSerialize["retry_interval"] = o.RetryInterval
	}
	toSerialize["server"] = o.Server
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Ssl) {
		toSerialize["ssl"] = o.Ssl
	}
	if !IsNil(o.Timelimit) {
		toSerialize["timelimit"] = o.Timelimit
	}
	if !IsNil(o.VerifyServerCertificate) {
		toSerialize["verify_server_certificate"] = o.VerifyServerCertificate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LdapServerProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLdapServerProfiles := _LdapServerProfiles{}

	err = json.Unmarshal(data, &varLdapServerProfiles)

	if err != nil {
		return err
	}

	*o = LdapServerProfiles(varLdapServerProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "base")
		delete(additionalProperties, "bind_dn")
		delete(additionalProperties, "bind_password")
		delete(additionalProperties, "bind_timelimit")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ldap_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "retry_interval")
		delete(additionalProperties, "server")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "ssl")
		delete(additionalProperties, "timelimit")
		delete(additionalProperties, "verify_server_certificate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLdapServerProfiles struct {
	value *LdapServerProfiles
	isSet bool
}

func (v NullableLdapServerProfiles) Get() *LdapServerProfiles {
	return v.value
}

func (v *NullableLdapServerProfiles) Set(val *LdapServerProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapServerProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapServerProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapServerProfiles(val *LdapServerProfiles) *NullableLdapServerProfiles {
	return &NullableLdapServerProfiles{value: val, isSet: true}
}

func (v NullableLdapServerProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapServerProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
