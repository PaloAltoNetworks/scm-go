/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the MfaServersMfaVendorType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaServersMfaVendorType{}

// MfaServersMfaVendorType The MFA vendor type
type MfaServersMfaVendorType struct {
	DuoSecurityV2        *MfaServersMfaVendorTypeDuoSecurityV2      `json:"duo_security_v2,omitempty"`
	OktaAdaptiveV1       *MfaServersMfaVendorTypeOktaAdaptiveV1     `json:"okta_adaptive_v1,omitempty"`
	PingIdentityV1       *MfaServersMfaVendorTypePingIdentityV1     `json:"ping_identity_v1,omitempty"`
	RsaSecuridAccessV1   *MfaServersMfaVendorTypeRsaSecuridAccessV1 `json:"rsa_securid_access_v1,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _MfaServersMfaVendorType MfaServersMfaVendorType

// NewMfaServersMfaVendorType instantiates a new MfaServersMfaVendorType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaServersMfaVendorType() *MfaServersMfaVendorType {
	this := MfaServersMfaVendorType{}
	return &this
}

// NewMfaServersMfaVendorTypeWithDefaults instantiates a new MfaServersMfaVendorType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaServersMfaVendorTypeWithDefaults() *MfaServersMfaVendorType {
	this := MfaServersMfaVendorType{}
	return &this
}

// GetDuoSecurityV2 returns the DuoSecurityV2 field value if set, zero value otherwise.
func (o *MfaServersMfaVendorType) GetDuoSecurityV2() MfaServersMfaVendorTypeDuoSecurityV2 {
	if o == nil || IsNil(o.DuoSecurityV2) {
		var ret MfaServersMfaVendorTypeDuoSecurityV2
		return ret
	}
	return *o.DuoSecurityV2
}

// GetDuoSecurityV2Ok returns a tuple with the DuoSecurityV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorType) GetDuoSecurityV2Ok() (*MfaServersMfaVendorTypeDuoSecurityV2, bool) {
	if o == nil || IsNil(o.DuoSecurityV2) {
		return nil, false
	}
	return o.DuoSecurityV2, true
}

// HasDuoSecurityV2 returns a boolean if a field has been set.
func (o *MfaServersMfaVendorType) HasDuoSecurityV2() bool {
	if o != nil && !IsNil(o.DuoSecurityV2) {
		return true
	}

	return false
}

// SetDuoSecurityV2 gets a reference to the given MfaServersMfaVendorTypeDuoSecurityV2 and assigns it to the DuoSecurityV2 field.
func (o *MfaServersMfaVendorType) SetDuoSecurityV2(v MfaServersMfaVendorTypeDuoSecurityV2) {
	o.DuoSecurityV2 = &v
}

// GetOktaAdaptiveV1 returns the OktaAdaptiveV1 field value if set, zero value otherwise.
func (o *MfaServersMfaVendorType) GetOktaAdaptiveV1() MfaServersMfaVendorTypeOktaAdaptiveV1 {
	if o == nil || IsNil(o.OktaAdaptiveV1) {
		var ret MfaServersMfaVendorTypeOktaAdaptiveV1
		return ret
	}
	return *o.OktaAdaptiveV1
}

// GetOktaAdaptiveV1Ok returns a tuple with the OktaAdaptiveV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorType) GetOktaAdaptiveV1Ok() (*MfaServersMfaVendorTypeOktaAdaptiveV1, bool) {
	if o == nil || IsNil(o.OktaAdaptiveV1) {
		return nil, false
	}
	return o.OktaAdaptiveV1, true
}

// HasOktaAdaptiveV1 returns a boolean if a field has been set.
func (o *MfaServersMfaVendorType) HasOktaAdaptiveV1() bool {
	if o != nil && !IsNil(o.OktaAdaptiveV1) {
		return true
	}

	return false
}

// SetOktaAdaptiveV1 gets a reference to the given MfaServersMfaVendorTypeOktaAdaptiveV1 and assigns it to the OktaAdaptiveV1 field.
func (o *MfaServersMfaVendorType) SetOktaAdaptiveV1(v MfaServersMfaVendorTypeOktaAdaptiveV1) {
	o.OktaAdaptiveV1 = &v
}

// GetPingIdentityV1 returns the PingIdentityV1 field value if set, zero value otherwise.
func (o *MfaServersMfaVendorType) GetPingIdentityV1() MfaServersMfaVendorTypePingIdentityV1 {
	if o == nil || IsNil(o.PingIdentityV1) {
		var ret MfaServersMfaVendorTypePingIdentityV1
		return ret
	}
	return *o.PingIdentityV1
}

// GetPingIdentityV1Ok returns a tuple with the PingIdentityV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorType) GetPingIdentityV1Ok() (*MfaServersMfaVendorTypePingIdentityV1, bool) {
	if o == nil || IsNil(o.PingIdentityV1) {
		return nil, false
	}
	return o.PingIdentityV1, true
}

// HasPingIdentityV1 returns a boolean if a field has been set.
func (o *MfaServersMfaVendorType) HasPingIdentityV1() bool {
	if o != nil && !IsNil(o.PingIdentityV1) {
		return true
	}

	return false
}

// SetPingIdentityV1 gets a reference to the given MfaServersMfaVendorTypePingIdentityV1 and assigns it to the PingIdentityV1 field.
func (o *MfaServersMfaVendorType) SetPingIdentityV1(v MfaServersMfaVendorTypePingIdentityV1) {
	o.PingIdentityV1 = &v
}

// GetRsaSecuridAccessV1 returns the RsaSecuridAccessV1 field value if set, zero value otherwise.
func (o *MfaServersMfaVendorType) GetRsaSecuridAccessV1() MfaServersMfaVendorTypeRsaSecuridAccessV1 {
	if o == nil || IsNil(o.RsaSecuridAccessV1) {
		var ret MfaServersMfaVendorTypeRsaSecuridAccessV1
		return ret
	}
	return *o.RsaSecuridAccessV1
}

// GetRsaSecuridAccessV1Ok returns a tuple with the RsaSecuridAccessV1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MfaServersMfaVendorType) GetRsaSecuridAccessV1Ok() (*MfaServersMfaVendorTypeRsaSecuridAccessV1, bool) {
	if o == nil || IsNil(o.RsaSecuridAccessV1) {
		return nil, false
	}
	return o.RsaSecuridAccessV1, true
}

// HasRsaSecuridAccessV1 returns a boolean if a field has been set.
func (o *MfaServersMfaVendorType) HasRsaSecuridAccessV1() bool {
	if o != nil && !IsNil(o.RsaSecuridAccessV1) {
		return true
	}

	return false
}

// SetRsaSecuridAccessV1 gets a reference to the given MfaServersMfaVendorTypeRsaSecuridAccessV1 and assigns it to the RsaSecuridAccessV1 field.
func (o *MfaServersMfaVendorType) SetRsaSecuridAccessV1(v MfaServersMfaVendorTypeRsaSecuridAccessV1) {
	o.RsaSecuridAccessV1 = &v
}

func (o MfaServersMfaVendorType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaServersMfaVendorType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DuoSecurityV2) {
		toSerialize["duo_security_v2"] = o.DuoSecurityV2
	}
	if !IsNil(o.OktaAdaptiveV1) {
		toSerialize["okta_adaptive_v1"] = o.OktaAdaptiveV1
	}
	if !IsNil(o.PingIdentityV1) {
		toSerialize["ping_identity_v1"] = o.PingIdentityV1
	}
	if !IsNil(o.RsaSecuridAccessV1) {
		toSerialize["rsa_securid_access_v1"] = o.RsaSecuridAccessV1
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *MfaServersMfaVendorType) UnmarshalJSON(data []byte) (err error) {
	varMfaServersMfaVendorType := _MfaServersMfaVendorType{}

	err = json.Unmarshal(data, &varMfaServersMfaVendorType)

	if err != nil {
		return err
	}

	*o = MfaServersMfaVendorType(varMfaServersMfaVendorType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "duo_security_v2")
		delete(additionalProperties, "okta_adaptive_v1")
		delete(additionalProperties, "ping_identity_v1")
		delete(additionalProperties, "rsa_securid_access_v1")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableMfaServersMfaVendorType struct {
	value *MfaServersMfaVendorType
	isSet bool
}

func (v NullableMfaServersMfaVendorType) Get() *MfaServersMfaVendorType {
	return v.value
}

func (v *NullableMfaServersMfaVendorType) Set(val *MfaServersMfaVendorType) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaServersMfaVendorType) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaServersMfaVendorType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaServersMfaVendorType(val *MfaServersMfaVendorType) *NullableMfaServersMfaVendorType {
	return &NullableMfaServersMfaVendorType{value: val, isSet: true}
}

func (v NullableMfaServersMfaVendorType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaServersMfaVendorType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
