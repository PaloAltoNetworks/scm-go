/*
Identity Services

These APIs are used for defining and managing identity services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package identity_services

import (
	"encoding/json"
)

// checks if the RadiusServerProfilesProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadiusServerProfilesProtocol{}

// RadiusServerProfilesProtocol The RADIUS authentication protocol
type RadiusServerProfilesProtocol struct {
	CHAP                 map[string]interface{}                      `json:"CHAP,omitempty"`
	EAPTTLSWithPAP       *RadiusServerProfilesProtocolEAPTTLSWithPAP `json:"EAP_TTLS_with_PAP,omitempty"`
	PAP                  map[string]interface{}                      `json:"PAP,omitempty"`
	PEAPMSCHAPv2         *RadiusServerProfilesProtocolPEAPMSCHAPv2   `json:"PEAP_MSCHAPv2,omitempty"`
	PEAPWithGTC          *RadiusServerProfilesProtocolEAPTTLSWithPAP `json:"PEAP_with_GTC,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RadiusServerProfilesProtocol RadiusServerProfilesProtocol

// NewRadiusServerProfilesProtocol instantiates a new RadiusServerProfilesProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadiusServerProfilesProtocol() *RadiusServerProfilesProtocol {
	this := RadiusServerProfilesProtocol{}
	return &this
}

// NewRadiusServerProfilesProtocolWithDefaults instantiates a new RadiusServerProfilesProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadiusServerProfilesProtocolWithDefaults() *RadiusServerProfilesProtocol {
	this := RadiusServerProfilesProtocol{}
	return &this
}

// GetCHAP returns the CHAP field value if set, zero value otherwise.
func (o *RadiusServerProfilesProtocol) GetCHAP() map[string]interface{} {
	if o == nil || IsNil(o.CHAP) {
		var ret map[string]interface{}
		return ret
	}
	return o.CHAP
}

// GetCHAPOk returns a tuple with the CHAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfilesProtocol) GetCHAPOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CHAP) {
		return map[string]interface{}{}, false
	}
	return o.CHAP, true
}

// HasCHAP returns a boolean if a field has been set.
func (o *RadiusServerProfilesProtocol) HasCHAP() bool {
	if o != nil && !IsNil(o.CHAP) {
		return true
	}

	return false
}

// SetCHAP gets a reference to the given map[string]interface{} and assigns it to the CHAP field.
func (o *RadiusServerProfilesProtocol) SetCHAP(v map[string]interface{}) {
	o.CHAP = v
}

// GetEAPTTLSWithPAP returns the EAPTTLSWithPAP field value if set, zero value otherwise.
func (o *RadiusServerProfilesProtocol) GetEAPTTLSWithPAP() RadiusServerProfilesProtocolEAPTTLSWithPAP {
	if o == nil || IsNil(o.EAPTTLSWithPAP) {
		var ret RadiusServerProfilesProtocolEAPTTLSWithPAP
		return ret
	}
	return *o.EAPTTLSWithPAP
}

// GetEAPTTLSWithPAPOk returns a tuple with the EAPTTLSWithPAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfilesProtocol) GetEAPTTLSWithPAPOk() (*RadiusServerProfilesProtocolEAPTTLSWithPAP, bool) {
	if o == nil || IsNil(o.EAPTTLSWithPAP) {
		return nil, false
	}
	return o.EAPTTLSWithPAP, true
}

// HasEAPTTLSWithPAP returns a boolean if a field has been set.
func (o *RadiusServerProfilesProtocol) HasEAPTTLSWithPAP() bool {
	if o != nil && !IsNil(o.EAPTTLSWithPAP) {
		return true
	}

	return false
}

// SetEAPTTLSWithPAP gets a reference to the given RadiusServerProfilesProtocolEAPTTLSWithPAP and assigns it to the EAPTTLSWithPAP field.
func (o *RadiusServerProfilesProtocol) SetEAPTTLSWithPAP(v RadiusServerProfilesProtocolEAPTTLSWithPAP) {
	o.EAPTTLSWithPAP = &v
}

// GetPAP returns the PAP field value if set, zero value otherwise.
func (o *RadiusServerProfilesProtocol) GetPAP() map[string]interface{} {
	if o == nil || IsNil(o.PAP) {
		var ret map[string]interface{}
		return ret
	}
	return o.PAP
}

// GetPAPOk returns a tuple with the PAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfilesProtocol) GetPAPOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PAP) {
		return map[string]interface{}{}, false
	}
	return o.PAP, true
}

// HasPAP returns a boolean if a field has been set.
func (o *RadiusServerProfilesProtocol) HasPAP() bool {
	if o != nil && !IsNil(o.PAP) {
		return true
	}

	return false
}

// SetPAP gets a reference to the given map[string]interface{} and assigns it to the PAP field.
func (o *RadiusServerProfilesProtocol) SetPAP(v map[string]interface{}) {
	o.PAP = v
}

// GetPEAPMSCHAPv2 returns the PEAPMSCHAPv2 field value if set, zero value otherwise.
func (o *RadiusServerProfilesProtocol) GetPEAPMSCHAPv2() RadiusServerProfilesProtocolPEAPMSCHAPv2 {
	if o == nil || IsNil(o.PEAPMSCHAPv2) {
		var ret RadiusServerProfilesProtocolPEAPMSCHAPv2
		return ret
	}
	return *o.PEAPMSCHAPv2
}

// GetPEAPMSCHAPv2Ok returns a tuple with the PEAPMSCHAPv2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfilesProtocol) GetPEAPMSCHAPv2Ok() (*RadiusServerProfilesProtocolPEAPMSCHAPv2, bool) {
	if o == nil || IsNil(o.PEAPMSCHAPv2) {
		return nil, false
	}
	return o.PEAPMSCHAPv2, true
}

// HasPEAPMSCHAPv2 returns a boolean if a field has been set.
func (o *RadiusServerProfilesProtocol) HasPEAPMSCHAPv2() bool {
	if o != nil && !IsNil(o.PEAPMSCHAPv2) {
		return true
	}

	return false
}

// SetPEAPMSCHAPv2 gets a reference to the given RadiusServerProfilesProtocolPEAPMSCHAPv2 and assigns it to the PEAPMSCHAPv2 field.
func (o *RadiusServerProfilesProtocol) SetPEAPMSCHAPv2(v RadiusServerProfilesProtocolPEAPMSCHAPv2) {
	o.PEAPMSCHAPv2 = &v
}

// GetPEAPWithGTC returns the PEAPWithGTC field value if set, zero value otherwise.
func (o *RadiusServerProfilesProtocol) GetPEAPWithGTC() RadiusServerProfilesProtocolEAPTTLSWithPAP {
	if o == nil || IsNil(o.PEAPWithGTC) {
		var ret RadiusServerProfilesProtocolEAPTTLSWithPAP
		return ret
	}
	return *o.PEAPWithGTC
}

// GetPEAPWithGTCOk returns a tuple with the PEAPWithGTC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RadiusServerProfilesProtocol) GetPEAPWithGTCOk() (*RadiusServerProfilesProtocolEAPTTLSWithPAP, bool) {
	if o == nil || IsNil(o.PEAPWithGTC) {
		return nil, false
	}
	return o.PEAPWithGTC, true
}

// HasPEAPWithGTC returns a boolean if a field has been set.
func (o *RadiusServerProfilesProtocol) HasPEAPWithGTC() bool {
	if o != nil && !IsNil(o.PEAPWithGTC) {
		return true
	}

	return false
}

// SetPEAPWithGTC gets a reference to the given RadiusServerProfilesProtocolEAPTTLSWithPAP and assigns it to the PEAPWithGTC field.
func (o *RadiusServerProfilesProtocol) SetPEAPWithGTC(v RadiusServerProfilesProtocolEAPTTLSWithPAP) {
	o.PEAPWithGTC = &v
}

func (o RadiusServerProfilesProtocol) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadiusServerProfilesProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CHAP) {
		toSerialize["CHAP"] = o.CHAP
	}
	if !IsNil(o.EAPTTLSWithPAP) {
		toSerialize["EAP_TTLS_with_PAP"] = o.EAPTTLSWithPAP
	}
	if !IsNil(o.PAP) {
		toSerialize["PAP"] = o.PAP
	}
	if !IsNil(o.PEAPMSCHAPv2) {
		toSerialize["PEAP_MSCHAPv2"] = o.PEAPMSCHAPv2
	}
	if !IsNil(o.PEAPWithGTC) {
		toSerialize["PEAP_with_GTC"] = o.PEAPWithGTC
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RadiusServerProfilesProtocol) UnmarshalJSON(data []byte) (err error) {
	varRadiusServerProfilesProtocol := _RadiusServerProfilesProtocol{}

	err = json.Unmarshal(data, &varRadiusServerProfilesProtocol)

	if err != nil {
		return err
	}

	*o = RadiusServerProfilesProtocol(varRadiusServerProfilesProtocol)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "CHAP")
		delete(additionalProperties, "EAP_TTLS_with_PAP")
		delete(additionalProperties, "PAP")
		delete(additionalProperties, "PEAP_MSCHAPv2")
		delete(additionalProperties, "PEAP_with_GTC")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRadiusServerProfilesProtocol struct {
	value *RadiusServerProfilesProtocol
	isSet bool
}

func (v NullableRadiusServerProfilesProtocol) Get() *RadiusServerProfilesProtocol {
	return v.value
}

func (v *NullableRadiusServerProfilesProtocol) Set(val *RadiusServerProfilesProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableRadiusServerProfilesProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableRadiusServerProfilesProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadiusServerProfilesProtocol(val *RadiusServerProfilesProtocol) *NullableRadiusServerProfilesProtocol {
	return &NullableRadiusServerProfilesProtocol{value: val, isSet: true}
}

func (v NullableRadiusServerProfilesProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadiusServerProfilesProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
