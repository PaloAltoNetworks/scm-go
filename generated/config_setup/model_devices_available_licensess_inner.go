/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
)

// checks if the DevicesAvailableLicensessInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesAvailableLicensessInner{}

// DevicesAvailableLicensessInner struct for DevicesAvailableLicensessInner
type DevicesAvailableLicensessInner struct {
	Authcode             *string `json:"authcode,omitempty"`
	Expires              *string `json:"expires,omitempty"`
	Feature              *string `json:"feature,omitempty"`
	Issued               *string `json:"issued,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevicesAvailableLicensessInner DevicesAvailableLicensessInner

// NewDevicesAvailableLicensessInner instantiates a new DevicesAvailableLicensessInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesAvailableLicensessInner() *DevicesAvailableLicensessInner {
	this := DevicesAvailableLicensessInner{}
	return &this
}

// NewDevicesAvailableLicensessInnerWithDefaults instantiates a new DevicesAvailableLicensessInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesAvailableLicensessInnerWithDefaults() *DevicesAvailableLicensessInner {
	this := DevicesAvailableLicensessInner{}
	return &this
}

// GetAuthcode returns the Authcode field value if set, zero value otherwise.
func (o *DevicesAvailableLicensessInner) GetAuthcode() string {
	if o == nil || IsNil(o.Authcode) {
		var ret string
		return ret
	}
	return *o.Authcode
}

// GetAuthcodeOk returns a tuple with the Authcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesAvailableLicensessInner) GetAuthcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Authcode) {
		return nil, false
	}
	return o.Authcode, true
}

// HasAuthcode returns a boolean if a field has been set.
func (o *DevicesAvailableLicensessInner) HasAuthcode() bool {
	if o != nil && !IsNil(o.Authcode) {
		return true
	}

	return false
}

// SetAuthcode gets a reference to the given string and assigns it to the Authcode field.
func (o *DevicesAvailableLicensessInner) SetAuthcode(v string) {
	o.Authcode = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *DevicesAvailableLicensessInner) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesAvailableLicensessInner) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *DevicesAvailableLicensessInner) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *DevicesAvailableLicensessInner) SetExpires(v string) {
	o.Expires = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *DevicesAvailableLicensessInner) GetFeature() string {
	if o == nil || IsNil(o.Feature) {
		var ret string
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesAvailableLicensessInner) GetFeatureOk() (*string, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *DevicesAvailableLicensessInner) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given string and assigns it to the Feature field.
func (o *DevicesAvailableLicensessInner) SetFeature(v string) {
	o.Feature = &v
}

// GetIssued returns the Issued field value if set, zero value otherwise.
func (o *DevicesAvailableLicensessInner) GetIssued() string {
	if o == nil || IsNil(o.Issued) {
		var ret string
		return ret
	}
	return *o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesAvailableLicensessInner) GetIssuedOk() (*string, bool) {
	if o == nil || IsNil(o.Issued) {
		return nil, false
	}
	return o.Issued, true
}

// HasIssued returns a boolean if a field has been set.
func (o *DevicesAvailableLicensessInner) HasIssued() bool {
	if o != nil && !IsNil(o.Issued) {
		return true
	}

	return false
}

// SetIssued gets a reference to the given string and assigns it to the Issued field.
func (o *DevicesAvailableLicensessInner) SetIssued(v string) {
	o.Issued = &v
}

func (o DevicesAvailableLicensessInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesAvailableLicensessInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authcode) {
		toSerialize["authcode"] = o.Authcode
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !IsNil(o.Issued) {
		toSerialize["issued"] = o.Issued
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevicesAvailableLicensessInner) UnmarshalJSON(data []byte) (err error) {
	varDevicesAvailableLicensessInner := _DevicesAvailableLicensessInner{}

	err = json.Unmarshal(data, &varDevicesAvailableLicensessInner)

	if err != nil {
		return err
	}

	*o = DevicesAvailableLicensessInner(varDevicesAvailableLicensessInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authcode")
		delete(additionalProperties, "expires")
		delete(additionalProperties, "feature")
		delete(additionalProperties, "issued")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevicesAvailableLicensessInner struct {
	value *DevicesAvailableLicensessInner
	isSet bool
}

func (v NullableDevicesAvailableLicensessInner) Get() *DevicesAvailableLicensessInner {
	return v.value
}

func (v *NullableDevicesAvailableLicensessInner) Set(val *DevicesAvailableLicensessInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesAvailableLicensessInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesAvailableLicensessInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesAvailableLicensessInner(val *DevicesAvailableLicensessInner) *NullableDevicesAvailableLicensessInner {
	return &NullableDevicesAvailableLicensessInner{value: val, isSet: true}
}

func (v NullableDevicesAvailableLicensessInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesAvailableLicensessInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
