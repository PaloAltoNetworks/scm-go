/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
)

// checks if the DevicesInstalledLicensesInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesInstalledLicensesInner{}

// DevicesInstalledLicensesInner struct for DevicesInstalledLicensesInner
type DevicesInstalledLicensesInner struct {
	Authcode             *string `json:"authcode,omitempty"`
	Expired              *string `json:"expired,omitempty"`
	Expires              *string `json:"expires,omitempty"`
	Feature              *string `json:"feature,omitempty"`
	Issued               *string `json:"issued,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevicesInstalledLicensesInner DevicesInstalledLicensesInner

// NewDevicesInstalledLicensesInner instantiates a new DevicesInstalledLicensesInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesInstalledLicensesInner() *DevicesInstalledLicensesInner {
	this := DevicesInstalledLicensesInner{}
	return &this
}

// NewDevicesInstalledLicensesInnerWithDefaults instantiates a new DevicesInstalledLicensesInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesInstalledLicensesInnerWithDefaults() *DevicesInstalledLicensesInner {
	this := DevicesInstalledLicensesInner{}
	return &this
}

// GetAuthcode returns the Authcode field value if set, zero value otherwise.
func (o *DevicesInstalledLicensesInner) GetAuthcode() string {
	if o == nil || IsNil(o.Authcode) {
		var ret string
		return ret
	}
	return *o.Authcode
}

// GetAuthcodeOk returns a tuple with the Authcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesInstalledLicensesInner) GetAuthcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Authcode) {
		return nil, false
	}
	return o.Authcode, true
}

// HasAuthcode returns a boolean if a field has been set.
func (o *DevicesInstalledLicensesInner) HasAuthcode() bool {
	if o != nil && !IsNil(o.Authcode) {
		return true
	}

	return false
}

// SetAuthcode gets a reference to the given string and assigns it to the Authcode field.
func (o *DevicesInstalledLicensesInner) SetAuthcode(v string) {
	o.Authcode = &v
}

// GetExpired returns the Expired field value if set, zero value otherwise.
func (o *DevicesInstalledLicensesInner) GetExpired() string {
	if o == nil || IsNil(o.Expired) {
		var ret string
		return ret
	}
	return *o.Expired
}

// GetExpiredOk returns a tuple with the Expired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesInstalledLicensesInner) GetExpiredOk() (*string, bool) {
	if o == nil || IsNil(o.Expired) {
		return nil, false
	}
	return o.Expired, true
}

// HasExpired returns a boolean if a field has been set.
func (o *DevicesInstalledLicensesInner) HasExpired() bool {
	if o != nil && !IsNil(o.Expired) {
		return true
	}

	return false
}

// SetExpired gets a reference to the given string and assigns it to the Expired field.
func (o *DevicesInstalledLicensesInner) SetExpired(v string) {
	o.Expired = &v
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *DevicesInstalledLicensesInner) GetExpires() string {
	if o == nil || IsNil(o.Expires) {
		var ret string
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesInstalledLicensesInner) GetExpiresOk() (*string, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *DevicesInstalledLicensesInner) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given string and assigns it to the Expires field.
func (o *DevicesInstalledLicensesInner) SetExpires(v string) {
	o.Expires = &v
}

// GetFeature returns the Feature field value if set, zero value otherwise.
func (o *DevicesInstalledLicensesInner) GetFeature() string {
	if o == nil || IsNil(o.Feature) {
		var ret string
		return ret
	}
	return *o.Feature
}

// GetFeatureOk returns a tuple with the Feature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesInstalledLicensesInner) GetFeatureOk() (*string, bool) {
	if o == nil || IsNil(o.Feature) {
		return nil, false
	}
	return o.Feature, true
}

// HasFeature returns a boolean if a field has been set.
func (o *DevicesInstalledLicensesInner) HasFeature() bool {
	if o != nil && !IsNil(o.Feature) {
		return true
	}

	return false
}

// SetFeature gets a reference to the given string and assigns it to the Feature field.
func (o *DevicesInstalledLicensesInner) SetFeature(v string) {
	o.Feature = &v
}

// GetIssued returns the Issued field value if set, zero value otherwise.
func (o *DevicesInstalledLicensesInner) GetIssued() string {
	if o == nil || IsNil(o.Issued) {
		var ret string
		return ret
	}
	return *o.Issued
}

// GetIssuedOk returns a tuple with the Issued field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesInstalledLicensesInner) GetIssuedOk() (*string, bool) {
	if o == nil || IsNil(o.Issued) {
		return nil, false
	}
	return o.Issued, true
}

// HasIssued returns a boolean if a field has been set.
func (o *DevicesInstalledLicensesInner) HasIssued() bool {
	if o != nil && !IsNil(o.Issued) {
		return true
	}

	return false
}

// SetIssued gets a reference to the given string and assigns it to the Issued field.
func (o *DevicesInstalledLicensesInner) SetIssued(v string) {
	o.Issued = &v
}

func (o DevicesInstalledLicensesInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesInstalledLicensesInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Authcode) {
		toSerialize["authcode"] = o.Authcode
	}
	if !IsNil(o.Expired) {
		toSerialize["expired"] = o.Expired
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if !IsNil(o.Feature) {
		toSerialize["feature"] = o.Feature
	}
	if !IsNil(o.Issued) {
		toSerialize["issued"] = o.Issued
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevicesInstalledLicensesInner) UnmarshalJSON(data []byte) (err error) {
	varDevicesInstalledLicensesInner := _DevicesInstalledLicensesInner{}

	err = json.Unmarshal(data, &varDevicesInstalledLicensesInner)

	if err != nil {
		return err
	}

	*o = DevicesInstalledLicensesInner(varDevicesInstalledLicensesInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authcode")
		delete(additionalProperties, "expired")
		delete(additionalProperties, "expires")
		delete(additionalProperties, "feature")
		delete(additionalProperties, "issued")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevicesInstalledLicensesInner struct {
	value *DevicesInstalledLicensesInner
	isSet bool
}

func (v NullableDevicesInstalledLicensesInner) Get() *DevicesInstalledLicensesInner {
	return v.value
}

func (v *NullableDevicesInstalledLicensesInner) Set(val *DevicesInstalledLicensesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesInstalledLicensesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesInstalledLicensesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesInstalledLicensesInner(val *DevicesInstalledLicensesInner) *NullableDevicesInstalledLicensesInner {
	return &NullableDevicesInstalledLicensesInner{value: val, isSet: true}
}

func (v NullableDevicesInstalledLicensesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesInstalledLicensesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
