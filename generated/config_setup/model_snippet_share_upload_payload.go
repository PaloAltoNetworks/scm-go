/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"fmt"
)

// checks if the SnippetShareUploadPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnippetShareUploadPayload{}

// SnippetShareUploadPayload struct for SnippetShareUploadPayload
type SnippetShareUploadPayload struct {
	Id                   string `json:"id"`
	PauseUpdate          *bool  `json:"pause_update,omitempty"`
	ValidateBeforeUpdate *bool  `json:"validate_before_update,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnippetShareUploadPayload SnippetShareUploadPayload

// NewSnippetShareUploadPayload instantiates a new SnippetShareUploadPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnippetShareUploadPayload(id string) *SnippetShareUploadPayload {
	this := SnippetShareUploadPayload{}
	this.Id = id
	return &this
}

// NewSnippetShareUploadPayloadWithDefaults instantiates a new SnippetShareUploadPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnippetShareUploadPayloadWithDefaults() *SnippetShareUploadPayload {
	this := SnippetShareUploadPayload{}
	return &this
}

// GetId returns the Id field value
func (o *SnippetShareUploadPayload) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SnippetShareUploadPayload) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SnippetShareUploadPayload) SetId(v string) {
	o.Id = v
}

// GetPauseUpdate returns the PauseUpdate field value if set, zero value otherwise.
func (o *SnippetShareUploadPayload) GetPauseUpdate() bool {
	if o == nil || IsNil(o.PauseUpdate) {
		var ret bool
		return ret
	}
	return *o.PauseUpdate
}

// GetPauseUpdateOk returns a tuple with the PauseUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetShareUploadPayload) GetPauseUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.PauseUpdate) {
		return nil, false
	}
	return o.PauseUpdate, true
}

// HasPauseUpdate returns a boolean if a field has been set.
func (o *SnippetShareUploadPayload) HasPauseUpdate() bool {
	if o != nil && !IsNil(o.PauseUpdate) {
		return true
	}

	return false
}

// SetPauseUpdate gets a reference to the given bool and assigns it to the PauseUpdate field.
func (o *SnippetShareUploadPayload) SetPauseUpdate(v bool) {
	o.PauseUpdate = &v
}

// GetValidateBeforeUpdate returns the ValidateBeforeUpdate field value if set, zero value otherwise.
func (o *SnippetShareUploadPayload) GetValidateBeforeUpdate() bool {
	if o == nil || IsNil(o.ValidateBeforeUpdate) {
		var ret bool
		return ret
	}
	return *o.ValidateBeforeUpdate
}

// GetValidateBeforeUpdateOk returns a tuple with the ValidateBeforeUpdate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetShareUploadPayload) GetValidateBeforeUpdateOk() (*bool, bool) {
	if o == nil || IsNil(o.ValidateBeforeUpdate) {
		return nil, false
	}
	return o.ValidateBeforeUpdate, true
}

// HasValidateBeforeUpdate returns a boolean if a field has been set.
func (o *SnippetShareUploadPayload) HasValidateBeforeUpdate() bool {
	if o != nil && !IsNil(o.ValidateBeforeUpdate) {
		return true
	}

	return false
}

// SetValidateBeforeUpdate gets a reference to the given bool and assigns it to the ValidateBeforeUpdate field.
func (o *SnippetShareUploadPayload) SetValidateBeforeUpdate(v bool) {
	o.ValidateBeforeUpdate = &v
}

func (o SnippetShareUploadPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnippetShareUploadPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.PauseUpdate) {
		toSerialize["pause_update"] = o.PauseUpdate
	}
	if !IsNil(o.ValidateBeforeUpdate) {
		toSerialize["validate_before_update"] = o.ValidateBeforeUpdate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnippetShareUploadPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnippetShareUploadPayload := _SnippetShareUploadPayload{}

	err = json.Unmarshal(data, &varSnippetShareUploadPayload)

	if err != nil {
		return err
	}

	*o = SnippetShareUploadPayload(varSnippetShareUploadPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "pause_update")
		delete(additionalProperties, "validate_before_update")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnippetShareUploadPayload struct {
	value *SnippetShareUploadPayload
	isSet bool
}

func (v NullableSnippetShareUploadPayload) Get() *SnippetShareUploadPayload {
	return v.value
}

func (v *NullableSnippetShareUploadPayload) Set(val *SnippetShareUploadPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableSnippetShareUploadPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableSnippetShareUploadPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnippetShareUploadPayload(val *SnippetShareUploadPayload) *NullableSnippetShareUploadPayload {
	return &NullableSnippetShareUploadPayload{value: val, isSet: true}
}

func (v NullableSnippetShareUploadPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnippetShareUploadPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
