/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"fmt"
)

// checks if the CompareTloPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompareTloPayload{}

// CompareTloPayload struct for CompareTloPayload
type CompareTloPayload struct {
	ComparingVersion     *int32 `json:"comparing_version,omitempty"`
	ObjectId             string `json:"object_id"`
	SnippetId            string `json:"snippet_id"`
	Version              int32  `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _CompareTloPayload CompareTloPayload

// NewCompareTloPayload instantiates a new CompareTloPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareTloPayload(objectId string, snippetId string, version int32) *CompareTloPayload {
	this := CompareTloPayload{}
	this.ObjectId = objectId
	this.SnippetId = snippetId
	this.Version = version
	return &this
}

// NewCompareTloPayloadWithDefaults instantiates a new CompareTloPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareTloPayloadWithDefaults() *CompareTloPayload {
	this := CompareTloPayload{}
	return &this
}

// GetComparingVersion returns the ComparingVersion field value if set, zero value otherwise.
func (o *CompareTloPayload) GetComparingVersion() int32 {
	if o == nil || IsNil(o.ComparingVersion) {
		var ret int32
		return ret
	}
	return *o.ComparingVersion
}

// GetComparingVersionOk returns a tuple with the ComparingVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CompareTloPayload) GetComparingVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.ComparingVersion) {
		return nil, false
	}
	return o.ComparingVersion, true
}

// HasComparingVersion returns a boolean if a field has been set.
func (o *CompareTloPayload) HasComparingVersion() bool {
	if o != nil && !IsNil(o.ComparingVersion) {
		return true
	}

	return false
}

// SetComparingVersion gets a reference to the given int32 and assigns it to the ComparingVersion field.
func (o *CompareTloPayload) SetComparingVersion(v int32) {
	o.ComparingVersion = &v
}

// GetObjectId returns the ObjectId field value
func (o *CompareTloPayload) GetObjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *CompareTloPayload) GetObjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *CompareTloPayload) SetObjectId(v string) {
	o.ObjectId = v
}

// GetSnippetId returns the SnippetId field value
func (o *CompareTloPayload) GetSnippetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnippetId
}

// GetSnippetIdOk returns a tuple with the SnippetId field value
// and a boolean to check if the value has been set.
func (o *CompareTloPayload) GetSnippetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnippetId, true
}

// SetSnippetId sets field value
func (o *CompareTloPayload) SetSnippetId(v string) {
	o.SnippetId = v
}

// GetVersion returns the Version field value
func (o *CompareTloPayload) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CompareTloPayload) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CompareTloPayload) SetVersion(v int32) {
	o.Version = v
}

func (o CompareTloPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompareTloPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ComparingVersion) {
		toSerialize["comparing_version"] = o.ComparingVersion
	}
	toSerialize["object_id"] = o.ObjectId
	toSerialize["snippet_id"] = o.SnippetId
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompareTloPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"object_id",
		"snippet_id",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompareTloPayload := _CompareTloPayload{}

	err = json.Unmarshal(data, &varCompareTloPayload)

	if err != nil {
		return err
	}

	*o = CompareTloPayload(varCompareTloPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comparing_version")
		delete(additionalProperties, "object_id")
		delete(additionalProperties, "snippet_id")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompareTloPayload struct {
	value *CompareTloPayload
	isSet bool
}

func (v NullableCompareTloPayload) Get() *CompareTloPayload {
	return v.value
}

func (v *NullableCompareTloPayload) Set(val *CompareTloPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareTloPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareTloPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareTloPayload(val *CompareTloPayload) *NullableCompareTloPayload {
	return &NullableCompareTloPayload{value: val, isSet: true}
}

func (v NullableCompareTloPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareTloPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
