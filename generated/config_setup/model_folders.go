/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"fmt"
)

// checks if the Folders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Folders{}

// Folders struct for Folders
type Folders struct {
	// The description of the folder
	Description *string `json:"description,omitempty"`
	// The UUID of the folder
	Id string `json:"id"`
	// Labels assigned to the folder
	Labels []string `json:"labels,omitempty"`
	// The name of the folder
	Name string `json:"name"`
	// The parent folder
	Parent string `json:"parent"`
	// Snippets associated with the folder
	Snippets             []string `json:"snippets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Folders Folders

// NewFolders instantiates a new Folders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolders(id string, name string, parent string) *Folders {
	this := Folders{}
	this.Id = id
	this.Name = name
	this.Parent = parent
	return &this
}

// NewFoldersWithDefaults instantiates a new Folders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFoldersWithDefaults() *Folders {
	this := Folders{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Folders) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folders) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Folders) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Folders) SetDescription(v string) {
	o.Description = &v
}

// GetId returns the Id field value
func (o *Folders) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Folders) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Folders) SetId(v string) {
	o.Id = v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *Folders) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folders) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *Folders) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *Folders) SetLabels(v []string) {
	o.Labels = v
}

// GetName returns the Name field value
func (o *Folders) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Folders) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Folders) SetName(v string) {
	o.Name = v
}

// GetParent returns the Parent field value
func (o *Folders) GetParent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Parent
}

// GetParentOk returns a tuple with the Parent field value
// and a boolean to check if the value has been set.
func (o *Folders) GetParentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Parent, true
}

// SetParent sets field value
func (o *Folders) SetParent(v string) {
	o.Parent = v
}

// GetSnippets returns the Snippets field value if set, zero value otherwise.
func (o *Folders) GetSnippets() []string {
	if o == nil || IsNil(o.Snippets) {
		var ret []string
		return ret
	}
	return o.Snippets
}

// GetSnippetsOk returns a tuple with the Snippets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Folders) GetSnippetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Snippets) {
		return nil, false
	}
	return o.Snippets, true
}

// HasSnippets returns a boolean if a field has been set.
func (o *Folders) HasSnippets() bool {
	if o != nil && !IsNil(o.Snippets) {
		return true
	}

	return false
}

// SetSnippets gets a reference to the given []string and assigns it to the Snippets field.
func (o *Folders) SetSnippets(v []string) {
	o.Snippets = v
}

func (o Folders) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Folders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	toSerialize["name"] = o.Name
	toSerialize["parent"] = o.Parent
	if !IsNil(o.Snippets) {
		toSerialize["snippets"] = o.Snippets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Folders) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"parent",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolders := _Folders{}

	err = json.Unmarshal(data, &varFolders)

	if err != nil {
		return err
	}

	*o = Folders(varFolders)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "id")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parent")
		delete(additionalProperties, "snippets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFolders struct {
	value *Folders
	isSet bool
}

func (v NullableFolders) Get() *Folders {
	return v.value
}

func (v *NullableFolders) Set(val *Folders) {
	v.value = val
	v.isSet = true
}

func (v NullableFolders) IsSet() bool {
	return v.isSet
}

func (v *NullableFolders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolders(val *Folders) *NullableFolders {
	return &NullableFolders{value: val, isSet: true}
}

func (v NullableFolders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
