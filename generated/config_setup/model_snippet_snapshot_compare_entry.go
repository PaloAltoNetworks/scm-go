/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"time"
)

// checks if the SnippetSnapshotCompareEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnippetSnapshotCompareEntry{}

// SnippetSnapshotCompareEntry struct for SnippetSnapshotCompareEntry
type SnippetSnapshotCompareEntry struct {
	Admin                *string    `json:"admin,omitempty"`
	Id                   *string    `json:"id,omitempty"`
	Loc                  *string    `json:"loc,omitempty"`
	Loctype              *string    `json:"loctype,omitempty"`
	Objectname           *string    `json:"objectname,omitempty"`
	Objecttype           *string    `json:"objecttype,omitempty"`
	Operations           *string    `json:"operations,omitempty"`
	Timestamp            *time.Time `json:"timestamp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnippetSnapshotCompareEntry SnippetSnapshotCompareEntry

// NewSnippetSnapshotCompareEntry instantiates a new SnippetSnapshotCompareEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnippetSnapshotCompareEntry() *SnippetSnapshotCompareEntry {
	this := SnippetSnapshotCompareEntry{}
	return &this
}

// NewSnippetSnapshotCompareEntryWithDefaults instantiates a new SnippetSnapshotCompareEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnippetSnapshotCompareEntryWithDefaults() *SnippetSnapshotCompareEntry {
	this := SnippetSnapshotCompareEntry{}
	return &this
}

// GetAdmin returns the Admin field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetAdmin() string {
	if o == nil || IsNil(o.Admin) {
		var ret string
		return ret
	}
	return *o.Admin
}

// GetAdminOk returns a tuple with the Admin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetAdminOk() (*string, bool) {
	if o == nil || IsNil(o.Admin) {
		return nil, false
	}
	return o.Admin, true
}

// HasAdmin returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasAdmin() bool {
	if o != nil && !IsNil(o.Admin) {
		return true
	}

	return false
}

// SetAdmin gets a reference to the given string and assigns it to the Admin field.
func (o *SnippetSnapshotCompareEntry) SetAdmin(v string) {
	o.Admin = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SnippetSnapshotCompareEntry) SetId(v string) {
	o.Id = &v
}

// GetLoc returns the Loc field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetLoc() string {
	if o == nil || IsNil(o.Loc) {
		var ret string
		return ret
	}
	return *o.Loc
}

// GetLocOk returns a tuple with the Loc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetLocOk() (*string, bool) {
	if o == nil || IsNil(o.Loc) {
		return nil, false
	}
	return o.Loc, true
}

// HasLoc returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasLoc() bool {
	if o != nil && !IsNil(o.Loc) {
		return true
	}

	return false
}

// SetLoc gets a reference to the given string and assigns it to the Loc field.
func (o *SnippetSnapshotCompareEntry) SetLoc(v string) {
	o.Loc = &v
}

// GetLoctype returns the Loctype field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetLoctype() string {
	if o == nil || IsNil(o.Loctype) {
		var ret string
		return ret
	}
	return *o.Loctype
}

// GetLoctypeOk returns a tuple with the Loctype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetLoctypeOk() (*string, bool) {
	if o == nil || IsNil(o.Loctype) {
		return nil, false
	}
	return o.Loctype, true
}

// HasLoctype returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasLoctype() bool {
	if o != nil && !IsNil(o.Loctype) {
		return true
	}

	return false
}

// SetLoctype gets a reference to the given string and assigns it to the Loctype field.
func (o *SnippetSnapshotCompareEntry) SetLoctype(v string) {
	o.Loctype = &v
}

// GetObjectname returns the Objectname field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetObjectname() string {
	if o == nil || IsNil(o.Objectname) {
		var ret string
		return ret
	}
	return *o.Objectname
}

// GetObjectnameOk returns a tuple with the Objectname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetObjectnameOk() (*string, bool) {
	if o == nil || IsNil(o.Objectname) {
		return nil, false
	}
	return o.Objectname, true
}

// HasObjectname returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasObjectname() bool {
	if o != nil && !IsNil(o.Objectname) {
		return true
	}

	return false
}

// SetObjectname gets a reference to the given string and assigns it to the Objectname field.
func (o *SnippetSnapshotCompareEntry) SetObjectname(v string) {
	o.Objectname = &v
}

// GetObjecttype returns the Objecttype field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetObjecttype() string {
	if o == nil || IsNil(o.Objecttype) {
		var ret string
		return ret
	}
	return *o.Objecttype
}

// GetObjecttypeOk returns a tuple with the Objecttype field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetObjecttypeOk() (*string, bool) {
	if o == nil || IsNil(o.Objecttype) {
		return nil, false
	}
	return o.Objecttype, true
}

// HasObjecttype returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasObjecttype() bool {
	if o != nil && !IsNil(o.Objecttype) {
		return true
	}

	return false
}

// SetObjecttype gets a reference to the given string and assigns it to the Objecttype field.
func (o *SnippetSnapshotCompareEntry) SetObjecttype(v string) {
	o.Objecttype = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetOperations() string {
	if o == nil || IsNil(o.Operations) {
		var ret string
		return ret
	}
	return *o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetOperationsOk() (*string, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given string and assigns it to the Operations field.
func (o *SnippetSnapshotCompareEntry) SetOperations(v string) {
	o.Operations = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *SnippetSnapshotCompareEntry) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotCompareEntry) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *SnippetSnapshotCompareEntry) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *SnippetSnapshotCompareEntry) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o SnippetSnapshotCompareEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnippetSnapshotCompareEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Admin) {
		toSerialize["admin"] = o.Admin
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Loc) {
		toSerialize["loc"] = o.Loc
	}
	if !IsNil(o.Loctype) {
		toSerialize["loctype"] = o.Loctype
	}
	if !IsNil(o.Objectname) {
		toSerialize["objectname"] = o.Objectname
	}
	if !IsNil(o.Objecttype) {
		toSerialize["objecttype"] = o.Objecttype
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnippetSnapshotCompareEntry) UnmarshalJSON(data []byte) (err error) {
	varSnippetSnapshotCompareEntry := _SnippetSnapshotCompareEntry{}

	err = json.Unmarshal(data, &varSnippetSnapshotCompareEntry)

	if err != nil {
		return err
	}

	*o = SnippetSnapshotCompareEntry(varSnippetSnapshotCompareEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin")
		delete(additionalProperties, "id")
		delete(additionalProperties, "loc")
		delete(additionalProperties, "loctype")
		delete(additionalProperties, "objectname")
		delete(additionalProperties, "objecttype")
		delete(additionalProperties, "operations")
		delete(additionalProperties, "timestamp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnippetSnapshotCompareEntry struct {
	value *SnippetSnapshotCompareEntry
	isSet bool
}

func (v NullableSnippetSnapshotCompareEntry) Get() *SnippetSnapshotCompareEntry {
	return v.value
}

func (v *NullableSnippetSnapshotCompareEntry) Set(val *SnippetSnapshotCompareEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableSnippetSnapshotCompareEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableSnippetSnapshotCompareEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnippetSnapshotCompareEntry(val *SnippetSnapshotCompareEntry) *NullableSnippetSnapshotCompareEntry {
	return &NullableSnippetSnapshotCompareEntry{value: val, isSet: true}
}

func (v NullableSnippetSnapshotCompareEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnippetSnapshotCompareEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
