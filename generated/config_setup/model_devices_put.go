/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
)

// checks if the DevicesPut type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DevicesPut{}

// DevicesPut struct for DevicesPut
type DevicesPut struct {
	// The description of the device
	Description *string `json:"description,omitempty"`
	// The display name of the device
	DisplayName *string `json:"display_name,omitempty"`
	// The folder containing the device
	Folder *string `json:"folder,omitempty"`
	// Labels assigned to the device
	Labels []string `json:"labels,omitempty"`
	// Snippets associated with the device
	Snippets             []string `json:"snippets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DevicesPut DevicesPut

// NewDevicesPut instantiates a new DevicesPut object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDevicesPut() *DevicesPut {
	this := DevicesPut{}
	return &this
}

// NewDevicesPutWithDefaults instantiates a new DevicesPut object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDevicesPutWithDefaults() *DevicesPut {
	this := DevicesPut{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DevicesPut) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesPut) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DevicesPut) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DevicesPut) SetDescription(v string) {
	o.Description = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *DevicesPut) GetDisplayName() string {
	if o == nil || IsNil(o.DisplayName) {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesPut) GetDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.DisplayName) {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *DevicesPut) HasDisplayName() bool {
	if o != nil && !IsNil(o.DisplayName) {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *DevicesPut) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DevicesPut) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesPut) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DevicesPut) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DevicesPut) SetFolder(v string) {
	o.Folder = &v
}

// GetLabels returns the Labels field value if set, zero value otherwise.
func (o *DevicesPut) GetLabels() []string {
	if o == nil || IsNil(o.Labels) {
		var ret []string
		return ret
	}
	return o.Labels
}

// GetLabelsOk returns a tuple with the Labels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesPut) GetLabelsOk() ([]string, bool) {
	if o == nil || IsNil(o.Labels) {
		return nil, false
	}
	return o.Labels, true
}

// HasLabels returns a boolean if a field has been set.
func (o *DevicesPut) HasLabels() bool {
	if o != nil && !IsNil(o.Labels) {
		return true
	}

	return false
}

// SetLabels gets a reference to the given []string and assigns it to the Labels field.
func (o *DevicesPut) SetLabels(v []string) {
	o.Labels = v
}

// GetSnippets returns the Snippets field value if set, zero value otherwise.
func (o *DevicesPut) GetSnippets() []string {
	if o == nil || IsNil(o.Snippets) {
		var ret []string
		return ret
	}
	return o.Snippets
}

// GetSnippetsOk returns a tuple with the Snippets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DevicesPut) GetSnippetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Snippets) {
		return nil, false
	}
	return o.Snippets, true
}

// HasSnippets returns a boolean if a field has been set.
func (o *DevicesPut) HasSnippets() bool {
	if o != nil && !IsNil(o.Snippets) {
		return true
	}

	return false
}

// SetSnippets gets a reference to the given []string and assigns it to the Snippets field.
func (o *DevicesPut) SetSnippets(v []string) {
	o.Snippets = v
}

func (o DevicesPut) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DevicesPut) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.DisplayName) {
		toSerialize["display_name"] = o.DisplayName
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Labels) {
		toSerialize["labels"] = o.Labels
	}
	if !IsNil(o.Snippets) {
		toSerialize["snippets"] = o.Snippets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DevicesPut) UnmarshalJSON(data []byte) (err error) {
	varDevicesPut := _DevicesPut{}

	err = json.Unmarshal(data, &varDevicesPut)

	if err != nil {
		return err
	}

	*o = DevicesPut(varDevicesPut)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "display_name")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "labels")
		delete(additionalProperties, "snippets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDevicesPut struct {
	value *DevicesPut
	isSet bool
}

func (v NullableDevicesPut) Get() *DevicesPut {
	return v.value
}

func (v *NullableDevicesPut) Set(val *DevicesPut) {
	v.value = val
	v.isSet = true
}

func (v NullableDevicesPut) IsSet() bool {
	return v.isSet
}

func (v *NullableDevicesPut) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDevicesPut(val *DevicesPut) *NullableDevicesPut {
	return &NullableDevicesPut{value: val, isSet: true}
}

func (v NullableDevicesPut) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDevicesPut) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
