/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"fmt"
)

// checks if the CompareSnippetSnapshotConfigPayload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CompareSnippetSnapshotConfigPayload{}

// CompareSnippetSnapshotConfigPayload struct for CompareSnippetSnapshotConfigPayload
type CompareSnippetSnapshotConfigPayload struct {
	ComparingVersion     int32  `json:"comparing_version"`
	Id                   string `json:"id"`
	Version              int32  `json:"version"`
	AdditionalProperties map[string]interface{}
}

type _CompareSnippetSnapshotConfigPayload CompareSnippetSnapshotConfigPayload

// NewCompareSnippetSnapshotConfigPayload instantiates a new CompareSnippetSnapshotConfigPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompareSnippetSnapshotConfigPayload(comparingVersion int32, id string, version int32) *CompareSnippetSnapshotConfigPayload {
	this := CompareSnippetSnapshotConfigPayload{}
	this.ComparingVersion = comparingVersion
	this.Id = id
	this.Version = version
	return &this
}

// NewCompareSnippetSnapshotConfigPayloadWithDefaults instantiates a new CompareSnippetSnapshotConfigPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompareSnippetSnapshotConfigPayloadWithDefaults() *CompareSnippetSnapshotConfigPayload {
	this := CompareSnippetSnapshotConfigPayload{}
	return &this
}

// GetComparingVersion returns the ComparingVersion field value
func (o *CompareSnippetSnapshotConfigPayload) GetComparingVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ComparingVersion
}

// GetComparingVersionOk returns a tuple with the ComparingVersion field value
// and a boolean to check if the value has been set.
func (o *CompareSnippetSnapshotConfigPayload) GetComparingVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComparingVersion, true
}

// SetComparingVersion sets field value
func (o *CompareSnippetSnapshotConfigPayload) SetComparingVersion(v int32) {
	o.ComparingVersion = v
}

// GetId returns the Id field value
func (o *CompareSnippetSnapshotConfigPayload) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CompareSnippetSnapshotConfigPayload) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CompareSnippetSnapshotConfigPayload) SetId(v string) {
	o.Id = v
}

// GetVersion returns the Version field value
func (o *CompareSnippetSnapshotConfigPayload) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *CompareSnippetSnapshotConfigPayload) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *CompareSnippetSnapshotConfigPayload) SetVersion(v int32) {
	o.Version = v
}

func (o CompareSnippetSnapshotConfigPayload) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CompareSnippetSnapshotConfigPayload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["comparing_version"] = o.ComparingVersion
	toSerialize["id"] = o.Id
	toSerialize["version"] = o.Version

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *CompareSnippetSnapshotConfigPayload) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"comparing_version",
		"id",
		"version",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompareSnippetSnapshotConfigPayload := _CompareSnippetSnapshotConfigPayload{}

	err = json.Unmarshal(data, &varCompareSnippetSnapshotConfigPayload)

	if err != nil {
		return err
	}

	*o = CompareSnippetSnapshotConfigPayload(varCompareSnippetSnapshotConfigPayload)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comparing_version")
		delete(additionalProperties, "id")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableCompareSnippetSnapshotConfigPayload struct {
	value *CompareSnippetSnapshotConfigPayload
	isSet bool
}

func (v NullableCompareSnippetSnapshotConfigPayload) Get() *CompareSnippetSnapshotConfigPayload {
	return v.value
}

func (v *NullableCompareSnippetSnapshotConfigPayload) Set(val *CompareSnippetSnapshotConfigPayload) {
	v.value = val
	v.isSet = true
}

func (v NullableCompareSnippetSnapshotConfigPayload) IsSet() bool {
	return v.isSet
}

func (v *NullableCompareSnippetSnapshotConfigPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompareSnippetSnapshotConfigPayload(val *CompareSnippetSnapshotConfigPayload) *NullableCompareSnippetSnapshotConfigPayload {
	return &NullableCompareSnippetSnapshotConfigPayload{value: val, isSet: true}
}

func (v NullableCompareSnippetSnapshotConfigPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompareSnippetSnapshotConfigPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
