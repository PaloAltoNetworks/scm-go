/*
Configuration Setup

These APIs are used to define how Strata Cloud Manager configurations are implemented.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package config_setup

import (
	"encoding/json"
	"time"
)

// checks if the SnippetSnapshotDiffResponseAfter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnippetSnapshotDiffResponseAfter{}

// SnippetSnapshotDiffResponseAfter struct for SnippetSnapshotDiffResponseAfter
type SnippetSnapshotDiffResponseAfter struct {
	Ts                   *time.Time               `json:"@ts,omitempty"`
	Entry                []map[string]interface{} `json:"entry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnippetSnapshotDiffResponseAfter SnippetSnapshotDiffResponseAfter

// NewSnippetSnapshotDiffResponseAfter instantiates a new SnippetSnapshotDiffResponseAfter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnippetSnapshotDiffResponseAfter() *SnippetSnapshotDiffResponseAfter {
	this := SnippetSnapshotDiffResponseAfter{}
	return &this
}

// NewSnippetSnapshotDiffResponseAfterWithDefaults instantiates a new SnippetSnapshotDiffResponseAfter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnippetSnapshotDiffResponseAfterWithDefaults() *SnippetSnapshotDiffResponseAfter {
	this := SnippetSnapshotDiffResponseAfter{}
	return &this
}

// GetTs returns the Ts field value if set, zero value otherwise.
func (o *SnippetSnapshotDiffResponseAfter) GetTs() time.Time {
	if o == nil || IsNil(o.Ts) {
		var ret time.Time
		return ret
	}
	return *o.Ts
}

// GetTsOk returns a tuple with the Ts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotDiffResponseAfter) GetTsOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Ts) {
		return nil, false
	}
	return o.Ts, true
}

// HasTs returns a boolean if a field has been set.
func (o *SnippetSnapshotDiffResponseAfter) HasTs() bool {
	if o != nil && !IsNil(o.Ts) {
		return true
	}

	return false
}

// SetTs gets a reference to the given time.Time and assigns it to the Ts field.
func (o *SnippetSnapshotDiffResponseAfter) SetTs(v time.Time) {
	o.Ts = &v
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *SnippetSnapshotDiffResponseAfter) GetEntry() []map[string]interface{} {
	if o == nil || IsNil(o.Entry) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnippetSnapshotDiffResponseAfter) GetEntryOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *SnippetSnapshotDiffResponseAfter) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given []map[string]interface{} and assigns it to the Entry field.
func (o *SnippetSnapshotDiffResponseAfter) SetEntry(v []map[string]interface{}) {
	o.Entry = v
}

func (o SnippetSnapshotDiffResponseAfter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnippetSnapshotDiffResponseAfter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ts) {
		toSerialize["@ts"] = o.Ts
	}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnippetSnapshotDiffResponseAfter) UnmarshalJSON(data []byte) (err error) {
	varSnippetSnapshotDiffResponseAfter := _SnippetSnapshotDiffResponseAfter{}

	err = json.Unmarshal(data, &varSnippetSnapshotDiffResponseAfter)

	if err != nil {
		return err
	}

	*o = SnippetSnapshotDiffResponseAfter(varSnippetSnapshotDiffResponseAfter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "@ts")
		delete(additionalProperties, "entry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnippetSnapshotDiffResponseAfter struct {
	value *SnippetSnapshotDiffResponseAfter
	isSet bool
}

func (v NullableSnippetSnapshotDiffResponseAfter) Get() *SnippetSnapshotDiffResponseAfter {
	return v.value
}

func (v *NullableSnippetSnapshotDiffResponseAfter) Set(val *SnippetSnapshotDiffResponseAfter) {
	v.value = val
	v.isSet = true
}

func (v NullableSnippetSnapshotDiffResponseAfter) IsSet() bool {
	return v.isSet
}

func (v *NullableSnippetSnapshotDiffResponseAfter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnippetSnapshotDiffResponseAfter(val *SnippetSnapshotDiffResponseAfter) *NullableSnippetSnapshotDiffResponseAfter {
	return &NullableSnippetSnapshotDiffResponseAfter{value: val, isSet: true}
}

func (v NullableSnippetSnapshotDiffResponseAfter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnippetSnapshotDiffResponseAfter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
