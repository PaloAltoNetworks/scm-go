/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the SecurityRuleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityRuleType{}

// SecurityRuleType A standard security rule for controlling traffic between zones.
type SecurityRuleType struct {
	// The action to be taken when the rule is matched
	Action string `json:"action"`
	// The application(s) being accessed
	Application []string `json:"application"`
	// The URL categories being accessed
	Category []string `json:"category"`
	// The description of the security rule
	Description *string `json:"description,omitempty"`
	// The destination address(es)
	Destination []string `json:"destination"`
	// The destination Host Integrity Profile(s)
	DestinationHip []string `json:"destination_hip,omitempty"`
	// Is the security rule disabled?
	Disabled *bool `json:"disabled,omitempty"`
	// The source security zone(s)
	From []string `json:"from"`
	// The UUID of the security rule
	Id *string `json:"id,omitempty"`
	// Log at session end?
	LogEnd *bool `json:"log_end,omitempty"`
	// The external log forwarding profile
	LogSetting *string `json:"log_setting,omitempty"`
	// Log at session start?
	LogStart *bool `json:"log_start,omitempty"`
	// The name of the security rule
	Name string `json:"name"`
	// Negate the destination addresses(es)?
	NegateDestination *bool `json:"negate_destination,omitempty"`
	// Negate the source address(es)?
	NegateSource   *bool                           `json:"negate_source,omitempty"`
	PolicyType     *string                         `json:"policy_type,omitempty"`
	ProfileSetting *SecurityRuleTypeProfileSetting `json:"profile_setting,omitempty"`
	// Schedule in which this rule will be applied
	Schedule *string `json:"schedule,omitempty"`
	// The service(s) being accessed
	Service []string `json:"service"`
	// The source addresses(es)
	Source []string `json:"source"`
	// The source Host Integrity Profile(s)
	SourceHip []string `json:"source_hip,omitempty"`
	// List of source users and/or groups.  Reserved words include `any`, `pre-login`, `known-user`, and `unknown`.
	SourceUser []string `json:"source_user"`
	// The tags associated with the security rule
	Tag                []string `json:"tag,omitempty"`
	TenantRestrictions []string `json:"tenant_restrictions,omitempty"`
	// The destination security zone(s)
	To                   []string `json:"to"`
	AdditionalProperties map[string]interface{}
}

type _SecurityRuleType SecurityRuleType

// NewSecurityRuleType instantiates a new SecurityRuleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityRuleType(action string, application []string, category []string, destination []string, from []string, name string, service []string, source []string, sourceUser []string, to []string) *SecurityRuleType {
	this := SecurityRuleType{}
	this.Action = action
	this.Application = application
	this.Category = category
	this.Destination = destination
	var disabled bool = false
	this.Disabled = &disabled
	this.From = from
	this.Name = name
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	var policyType string = "Security"
	this.PolicyType = &policyType
	this.Service = service
	this.Source = source
	this.SourceUser = sourceUser
	this.To = to
	return &this
}

// NewSecurityRuleTypeWithDefaults instantiates a new SecurityRuleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityRuleTypeWithDefaults() *SecurityRuleType {
	this := SecurityRuleType{}
	var disabled bool = false
	this.Disabled = &disabled
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	var policyType string = "Security"
	this.PolicyType = &policyType
	return &this
}

// GetAction returns the Action field value
func (o *SecurityRuleType) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *SecurityRuleType) SetAction(v string) {
	o.Action = v
}

// GetApplication returns the Application field value
func (o *SecurityRuleType) GetApplication() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetApplicationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Application, true
}

// SetApplication sets field value
func (o *SecurityRuleType) SetApplication(v []string) {
	o.Application = v
}

// GetCategory returns the Category field value
func (o *SecurityRuleType) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetCategoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *SecurityRuleType) SetCategory(v []string) {
	o.Category = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecurityRuleType) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecurityRuleType) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecurityRuleType) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value
func (o *SecurityRuleType) GetDestination() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetDestinationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destination, true
}

// SetDestination sets field value
func (o *SecurityRuleType) SetDestination(v []string) {
	o.Destination = v
}

// GetDestinationHip returns the DestinationHip field value if set, zero value otherwise.
func (o *SecurityRuleType) GetDestinationHip() []string {
	if o == nil || IsNil(o.DestinationHip) {
		var ret []string
		return ret
	}
	return o.DestinationHip
}

// GetDestinationHipOk returns a tuple with the DestinationHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetDestinationHipOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationHip) {
		return nil, false
	}
	return o.DestinationHip, true
}

// HasDestinationHip returns a boolean if a field has been set.
func (o *SecurityRuleType) HasDestinationHip() bool {
	if o != nil && !IsNil(o.DestinationHip) {
		return true
	}

	return false
}

// SetDestinationHip gets a reference to the given []string and assigns it to the DestinationHip field.
func (o *SecurityRuleType) SetDestinationHip(v []string) {
	o.DestinationHip = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SecurityRuleType) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SecurityRuleType) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SecurityRuleType) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFrom returns the From field value
func (o *SecurityRuleType) GetFrom() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetFromOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.From, true
}

// SetFrom sets field value
func (o *SecurityRuleType) SetFrom(v []string) {
	o.From = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityRuleType) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityRuleType) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SecurityRuleType) SetId(v string) {
	o.Id = &v
}

// GetLogEnd returns the LogEnd field value if set, zero value otherwise.
func (o *SecurityRuleType) GetLogEnd() bool {
	if o == nil || IsNil(o.LogEnd) {
		var ret bool
		return ret
	}
	return *o.LogEnd
}

// GetLogEndOk returns a tuple with the LogEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetLogEndOk() (*bool, bool) {
	if o == nil || IsNil(o.LogEnd) {
		return nil, false
	}
	return o.LogEnd, true
}

// HasLogEnd returns a boolean if a field has been set.
func (o *SecurityRuleType) HasLogEnd() bool {
	if o != nil && !IsNil(o.LogEnd) {
		return true
	}

	return false
}

// SetLogEnd gets a reference to the given bool and assigns it to the LogEnd field.
func (o *SecurityRuleType) SetLogEnd(v bool) {
	o.LogEnd = &v
}

// GetLogSetting returns the LogSetting field value if set, zero value otherwise.
func (o *SecurityRuleType) GetLogSetting() string {
	if o == nil || IsNil(o.LogSetting) {
		var ret string
		return ret
	}
	return *o.LogSetting
}

// GetLogSettingOk returns a tuple with the LogSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetLogSettingOk() (*string, bool) {
	if o == nil || IsNil(o.LogSetting) {
		return nil, false
	}
	return o.LogSetting, true
}

// HasLogSetting returns a boolean if a field has been set.
func (o *SecurityRuleType) HasLogSetting() bool {
	if o != nil && !IsNil(o.LogSetting) {
		return true
	}

	return false
}

// SetLogSetting gets a reference to the given string and assigns it to the LogSetting field.
func (o *SecurityRuleType) SetLogSetting(v string) {
	o.LogSetting = &v
}

// GetLogStart returns the LogStart field value if set, zero value otherwise.
func (o *SecurityRuleType) GetLogStart() bool {
	if o == nil || IsNil(o.LogStart) {
		var ret bool
		return ret
	}
	return *o.LogStart
}

// GetLogStartOk returns a tuple with the LogStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetLogStartOk() (*bool, bool) {
	if o == nil || IsNil(o.LogStart) {
		return nil, false
	}
	return o.LogStart, true
}

// HasLogStart returns a boolean if a field has been set.
func (o *SecurityRuleType) HasLogStart() bool {
	if o != nil && !IsNil(o.LogStart) {
		return true
	}

	return false
}

// SetLogStart gets a reference to the given bool and assigns it to the LogStart field.
func (o *SecurityRuleType) SetLogStart(v bool) {
	o.LogStart = &v
}

// GetName returns the Name field value
func (o *SecurityRuleType) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SecurityRuleType) SetName(v string) {
	o.Name = v
}

// GetNegateDestination returns the NegateDestination field value if set, zero value otherwise.
func (o *SecurityRuleType) GetNegateDestination() bool {
	if o == nil || IsNil(o.NegateDestination) {
		var ret bool
		return ret
	}
	return *o.NegateDestination
}

// GetNegateDestinationOk returns a tuple with the NegateDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetNegateDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateDestination) {
		return nil, false
	}
	return o.NegateDestination, true
}

// HasNegateDestination returns a boolean if a field has been set.
func (o *SecurityRuleType) HasNegateDestination() bool {
	if o != nil && !IsNil(o.NegateDestination) {
		return true
	}

	return false
}

// SetNegateDestination gets a reference to the given bool and assigns it to the NegateDestination field.
func (o *SecurityRuleType) SetNegateDestination(v bool) {
	o.NegateDestination = &v
}

// GetNegateSource returns the NegateSource field value if set, zero value otherwise.
func (o *SecurityRuleType) GetNegateSource() bool {
	if o == nil || IsNil(o.NegateSource) {
		var ret bool
		return ret
	}
	return *o.NegateSource
}

// GetNegateSourceOk returns a tuple with the NegateSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetNegateSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateSource) {
		return nil, false
	}
	return o.NegateSource, true
}

// HasNegateSource returns a boolean if a field has been set.
func (o *SecurityRuleType) HasNegateSource() bool {
	if o != nil && !IsNil(o.NegateSource) {
		return true
	}

	return false
}

// SetNegateSource gets a reference to the given bool and assigns it to the NegateSource field.
func (o *SecurityRuleType) SetNegateSource(v bool) {
	o.NegateSource = &v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *SecurityRuleType) GetPolicyType() string {
	if o == nil || IsNil(o.PolicyType) {
		var ret string
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetPolicyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyType) {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *SecurityRuleType) HasPolicyType() bool {
	if o != nil && !IsNil(o.PolicyType) {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given string and assigns it to the PolicyType field.
func (o *SecurityRuleType) SetPolicyType(v string) {
	o.PolicyType = &v
}

// GetProfileSetting returns the ProfileSetting field value if set, zero value otherwise.
func (o *SecurityRuleType) GetProfileSetting() SecurityRuleTypeProfileSetting {
	if o == nil || IsNil(o.ProfileSetting) {
		var ret SecurityRuleTypeProfileSetting
		return ret
	}
	return *o.ProfileSetting
}

// GetProfileSettingOk returns a tuple with the ProfileSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetProfileSettingOk() (*SecurityRuleTypeProfileSetting, bool) {
	if o == nil || IsNil(o.ProfileSetting) {
		return nil, false
	}
	return o.ProfileSetting, true
}

// HasProfileSetting returns a boolean if a field has been set.
func (o *SecurityRuleType) HasProfileSetting() bool {
	if o != nil && !IsNil(o.ProfileSetting) {
		return true
	}

	return false
}

// SetProfileSetting gets a reference to the given SecurityRuleTypeProfileSetting and assigns it to the ProfileSetting field.
func (o *SecurityRuleType) SetProfileSetting(v SecurityRuleTypeProfileSetting) {
	o.ProfileSetting = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *SecurityRuleType) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *SecurityRuleType) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *SecurityRuleType) SetSchedule(v string) {
	o.Schedule = &v
}

// GetService returns the Service field value
func (o *SecurityRuleType) GetService() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetServiceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service, true
}

// SetService sets field value
func (o *SecurityRuleType) SetService(v []string) {
	o.Service = v
}

// GetSource returns the Source field value
func (o *SecurityRuleType) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetSourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *SecurityRuleType) SetSource(v []string) {
	o.Source = v
}

// GetSourceHip returns the SourceHip field value if set, zero value otherwise.
func (o *SecurityRuleType) GetSourceHip() []string {
	if o == nil || IsNil(o.SourceHip) {
		var ret []string
		return ret
	}
	return o.SourceHip
}

// GetSourceHipOk returns a tuple with the SourceHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetSourceHipOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceHip) {
		return nil, false
	}
	return o.SourceHip, true
}

// HasSourceHip returns a boolean if a field has been set.
func (o *SecurityRuleType) HasSourceHip() bool {
	if o != nil && !IsNil(o.SourceHip) {
		return true
	}

	return false
}

// SetSourceHip gets a reference to the given []string and assigns it to the SourceHip field.
func (o *SecurityRuleType) SetSourceHip(v []string) {
	o.SourceHip = v
}

// GetSourceUser returns the SourceUser field value
func (o *SecurityRuleType) GetSourceUser() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetSourceUserOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceUser, true
}

// SetSourceUser sets field value
func (o *SecurityRuleType) SetSourceUser(v []string) {
	o.SourceUser = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SecurityRuleType) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SecurityRuleType) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *SecurityRuleType) SetTag(v []string) {
	o.Tag = v
}

// GetTenantRestrictions returns the TenantRestrictions field value if set, zero value otherwise.
func (o *SecurityRuleType) GetTenantRestrictions() []string {
	if o == nil || IsNil(o.TenantRestrictions) {
		var ret []string
		return ret
	}
	return o.TenantRestrictions
}

// GetTenantRestrictionsOk returns a tuple with the TenantRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetTenantRestrictionsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantRestrictions) {
		return nil, false
	}
	return o.TenantRestrictions, true
}

// HasTenantRestrictions returns a boolean if a field has been set.
func (o *SecurityRuleType) HasTenantRestrictions() bool {
	if o != nil && !IsNil(o.TenantRestrictions) {
		return true
	}

	return false
}

// SetTenantRestrictions gets a reference to the given []string and assigns it to the TenantRestrictions field.
func (o *SecurityRuleType) SetTenantRestrictions(v []string) {
	o.TenantRestrictions = v
}

// GetTo returns the To field value
func (o *SecurityRuleType) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *SecurityRuleType) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *SecurityRuleType) SetTo(v []string) {
	o.To = v
}

func (o SecurityRuleType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityRuleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["application"] = o.Application
	toSerialize["category"] = o.Category
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.DestinationHip) {
		toSerialize["destination_hip"] = o.DestinationHip
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	toSerialize["from"] = o.From
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LogEnd) {
		toSerialize["log_end"] = o.LogEnd
	}
	if !IsNil(o.LogSetting) {
		toSerialize["log_setting"] = o.LogSetting
	}
	if !IsNil(o.LogStart) {
		toSerialize["log_start"] = o.LogStart
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NegateDestination) {
		toSerialize["negate_destination"] = o.NegateDestination
	}
	if !IsNil(o.NegateSource) {
		toSerialize["negate_source"] = o.NegateSource
	}
	if !IsNil(o.PolicyType) {
		toSerialize["policy_type"] = o.PolicyType
	}
	if !IsNil(o.ProfileSetting) {
		toSerialize["profile_setting"] = o.ProfileSetting
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	toSerialize["service"] = o.Service
	toSerialize["source"] = o.Source
	if !IsNil(o.SourceHip) {
		toSerialize["source_hip"] = o.SourceHip
	}
	toSerialize["source_user"] = o.SourceUser
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.TenantRestrictions) {
		toSerialize["tenant_restrictions"] = o.TenantRestrictions
	}
	toSerialize["to"] = o.To

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityRuleType) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"application",
		"category",
		"destination",
		"from",
		"name",
		"service",
		"source",
		"source_user",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecurityRuleType := _SecurityRuleType{}

	err = json.Unmarshal(data, &varSecurityRuleType)

	if err != nil {
		return err
	}

	*o = SecurityRuleType(varSecurityRuleType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "application")
		delete(additionalProperties, "category")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "destination_hip")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "from")
		delete(additionalProperties, "id")
		delete(additionalProperties, "log_end")
		delete(additionalProperties, "log_setting")
		delete(additionalProperties, "log_start")
		delete(additionalProperties, "name")
		delete(additionalProperties, "negate_destination")
		delete(additionalProperties, "negate_source")
		delete(additionalProperties, "policy_type")
		delete(additionalProperties, "profile_setting")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "service")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_hip")
		delete(additionalProperties, "source_user")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "tenant_restrictions")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityRuleType struct {
	value *SecurityRuleType
	isSet bool
}

func (v NullableSecurityRuleType) Get() *SecurityRuleType {
	return v.value
}

func (v *NullableSecurityRuleType) Set(val *SecurityRuleType) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityRuleType) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityRuleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityRuleType(val *SecurityRuleType) *NullableSecurityRuleType {
	return &NullableSecurityRuleType{value: val, isSet: true}
}

func (v NullableSecurityRuleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityRuleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
