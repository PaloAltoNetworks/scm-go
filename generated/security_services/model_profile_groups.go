/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ProfileGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProfileGroups{}

// ProfileGroups struct for ProfileGroups
type ProfileGroups struct {
	AiSecurity    []string `json:"ai_security,omitempty"`
	DataFiltering []string `json:"data_filtering,omitempty"`
	// The device in which the resource is defined
	Device       *string  `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	DnsSecurity  []string `json:"dns_security,omitempty"`
	FileBlocking []string `json:"file_blocking,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The UUID of the profile group
	Id *string `json:"id,omitempty"`
	// The name of the profile group
	Name         string   `json:"name"`
	SaasSecurity []string `json:"saas_security,omitempty"`
	// The snippet in which the resource is defined
	Snippet                  *string  `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	Spyware                  []string `json:"spyware,omitempty"`
	UrlFiltering             []string `json:"url_filtering,omitempty"`
	VirusAndWildfireAnalysis []string `json:"virus_and_wildfire_analysis,omitempty"`
	Vulnerability            []string `json:"vulnerability,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _ProfileGroups ProfileGroups

// NewProfileGroups instantiates a new ProfileGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProfileGroups(name string) *ProfileGroups {
	this := ProfileGroups{}
	this.Name = name
	return &this
}

// NewProfileGroupsWithDefaults instantiates a new ProfileGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProfileGroupsWithDefaults() *ProfileGroups {
	this := ProfileGroups{}
	return &this
}

// GetAiSecurity returns the AiSecurity field value if set, zero value otherwise.
func (o *ProfileGroups) GetAiSecurity() []string {
	if o == nil || IsNil(o.AiSecurity) {
		var ret []string
		return ret
	}
	return o.AiSecurity
}

// GetAiSecurityOk returns a tuple with the AiSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetAiSecurityOk() ([]string, bool) {
	if o == nil || IsNil(o.AiSecurity) {
		return nil, false
	}
	return o.AiSecurity, true
}

// HasAiSecurity returns a boolean if a field has been set.
func (o *ProfileGroups) HasAiSecurity() bool {
	if o != nil && !IsNil(o.AiSecurity) {
		return true
	}

	return false
}

// SetAiSecurity gets a reference to the given []string and assigns it to the AiSecurity field.
func (o *ProfileGroups) SetAiSecurity(v []string) {
	o.AiSecurity = v
}

// GetDataFiltering returns the DataFiltering field value if set, zero value otherwise.
func (o *ProfileGroups) GetDataFiltering() []string {
	if o == nil || IsNil(o.DataFiltering) {
		var ret []string
		return ret
	}
	return o.DataFiltering
}

// GetDataFilteringOk returns a tuple with the DataFiltering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetDataFilteringOk() ([]string, bool) {
	if o == nil || IsNil(o.DataFiltering) {
		return nil, false
	}
	return o.DataFiltering, true
}

// HasDataFiltering returns a boolean if a field has been set.
func (o *ProfileGroups) HasDataFiltering() bool {
	if o != nil && !IsNil(o.DataFiltering) {
		return true
	}

	return false
}

// SetDataFiltering gets a reference to the given []string and assigns it to the DataFiltering field.
func (o *ProfileGroups) SetDataFiltering(v []string) {
	o.DataFiltering = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ProfileGroups) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ProfileGroups) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *ProfileGroups) SetDevice(v string) {
	o.Device = &v
}

// GetDnsSecurity returns the DnsSecurity field value if set, zero value otherwise.
func (o *ProfileGroups) GetDnsSecurity() []string {
	if o == nil || IsNil(o.DnsSecurity) {
		var ret []string
		return ret
	}
	return o.DnsSecurity
}

// GetDnsSecurityOk returns a tuple with the DnsSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetDnsSecurityOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsSecurity) {
		return nil, false
	}
	return o.DnsSecurity, true
}

// HasDnsSecurity returns a boolean if a field has been set.
func (o *ProfileGroups) HasDnsSecurity() bool {
	if o != nil && !IsNil(o.DnsSecurity) {
		return true
	}

	return false
}

// SetDnsSecurity gets a reference to the given []string and assigns it to the DnsSecurity field.
func (o *ProfileGroups) SetDnsSecurity(v []string) {
	o.DnsSecurity = v
}

// GetFileBlocking returns the FileBlocking field value if set, zero value otherwise.
func (o *ProfileGroups) GetFileBlocking() []string {
	if o == nil || IsNil(o.FileBlocking) {
		var ret []string
		return ret
	}
	return o.FileBlocking
}

// GetFileBlockingOk returns a tuple with the FileBlocking field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetFileBlockingOk() ([]string, bool) {
	if o == nil || IsNil(o.FileBlocking) {
		return nil, false
	}
	return o.FileBlocking, true
}

// HasFileBlocking returns a boolean if a field has been set.
func (o *ProfileGroups) HasFileBlocking() bool {
	if o != nil && !IsNil(o.FileBlocking) {
		return true
	}

	return false
}

// SetFileBlocking gets a reference to the given []string and assigns it to the FileBlocking field.
func (o *ProfileGroups) SetFileBlocking(v []string) {
	o.FileBlocking = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ProfileGroups) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ProfileGroups) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *ProfileGroups) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ProfileGroups) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ProfileGroups) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ProfileGroups) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *ProfileGroups) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProfileGroups) SetName(v string) {
	o.Name = v
}

// GetSaasSecurity returns the SaasSecurity field value if set, zero value otherwise.
func (o *ProfileGroups) GetSaasSecurity() []string {
	if o == nil || IsNil(o.SaasSecurity) {
		var ret []string
		return ret
	}
	return o.SaasSecurity
}

// GetSaasSecurityOk returns a tuple with the SaasSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetSaasSecurityOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasSecurity) {
		return nil, false
	}
	return o.SaasSecurity, true
}

// HasSaasSecurity returns a boolean if a field has been set.
func (o *ProfileGroups) HasSaasSecurity() bool {
	if o != nil && !IsNil(o.SaasSecurity) {
		return true
	}

	return false
}

// SetSaasSecurity gets a reference to the given []string and assigns it to the SaasSecurity field.
func (o *ProfileGroups) SetSaasSecurity(v []string) {
	o.SaasSecurity = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *ProfileGroups) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *ProfileGroups) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *ProfileGroups) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSpyware returns the Spyware field value if set, zero value otherwise.
func (o *ProfileGroups) GetSpyware() []string {
	if o == nil || IsNil(o.Spyware) {
		var ret []string
		return ret
	}
	return o.Spyware
}

// GetSpywareOk returns a tuple with the Spyware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetSpywareOk() ([]string, bool) {
	if o == nil || IsNil(o.Spyware) {
		return nil, false
	}
	return o.Spyware, true
}

// HasSpyware returns a boolean if a field has been set.
func (o *ProfileGroups) HasSpyware() bool {
	if o != nil && !IsNil(o.Spyware) {
		return true
	}

	return false
}

// SetSpyware gets a reference to the given []string and assigns it to the Spyware field.
func (o *ProfileGroups) SetSpyware(v []string) {
	o.Spyware = v
}

// GetUrlFiltering returns the UrlFiltering field value if set, zero value otherwise.
func (o *ProfileGroups) GetUrlFiltering() []string {
	if o == nil || IsNil(o.UrlFiltering) {
		var ret []string
		return ret
	}
	return o.UrlFiltering
}

// GetUrlFilteringOk returns a tuple with the UrlFiltering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetUrlFilteringOk() ([]string, bool) {
	if o == nil || IsNil(o.UrlFiltering) {
		return nil, false
	}
	return o.UrlFiltering, true
}

// HasUrlFiltering returns a boolean if a field has been set.
func (o *ProfileGroups) HasUrlFiltering() bool {
	if o != nil && !IsNil(o.UrlFiltering) {
		return true
	}

	return false
}

// SetUrlFiltering gets a reference to the given []string and assigns it to the UrlFiltering field.
func (o *ProfileGroups) SetUrlFiltering(v []string) {
	o.UrlFiltering = v
}

// GetVirusAndWildfireAnalysis returns the VirusAndWildfireAnalysis field value if set, zero value otherwise.
func (o *ProfileGroups) GetVirusAndWildfireAnalysis() []string {
	if o == nil || IsNil(o.VirusAndWildfireAnalysis) {
		var ret []string
		return ret
	}
	return o.VirusAndWildfireAnalysis
}

// GetVirusAndWildfireAnalysisOk returns a tuple with the VirusAndWildfireAnalysis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetVirusAndWildfireAnalysisOk() ([]string, bool) {
	if o == nil || IsNil(o.VirusAndWildfireAnalysis) {
		return nil, false
	}
	return o.VirusAndWildfireAnalysis, true
}

// HasVirusAndWildfireAnalysis returns a boolean if a field has been set.
func (o *ProfileGroups) HasVirusAndWildfireAnalysis() bool {
	if o != nil && !IsNil(o.VirusAndWildfireAnalysis) {
		return true
	}

	return false
}

// SetVirusAndWildfireAnalysis gets a reference to the given []string and assigns it to the VirusAndWildfireAnalysis field.
func (o *ProfileGroups) SetVirusAndWildfireAnalysis(v []string) {
	o.VirusAndWildfireAnalysis = v
}

// GetVulnerability returns the Vulnerability field value if set, zero value otherwise.
func (o *ProfileGroups) GetVulnerability() []string {
	if o == nil || IsNil(o.Vulnerability) {
		var ret []string
		return ret
	}
	return o.Vulnerability
}

// GetVulnerabilityOk returns a tuple with the Vulnerability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProfileGroups) GetVulnerabilityOk() ([]string, bool) {
	if o == nil || IsNil(o.Vulnerability) {
		return nil, false
	}
	return o.Vulnerability, true
}

// HasVulnerability returns a boolean if a field has been set.
func (o *ProfileGroups) HasVulnerability() bool {
	if o != nil && !IsNil(o.Vulnerability) {
		return true
	}

	return false
}

// SetVulnerability gets a reference to the given []string and assigns it to the Vulnerability field.
func (o *ProfileGroups) SetVulnerability(v []string) {
	o.Vulnerability = v
}

func (o ProfileGroups) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProfileGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AiSecurity) {
		toSerialize["ai_security"] = o.AiSecurity
	}
	if !IsNil(o.DataFiltering) {
		toSerialize["data_filtering"] = o.DataFiltering
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DnsSecurity) {
		toSerialize["dns_security"] = o.DnsSecurity
	}
	if !IsNil(o.FileBlocking) {
		toSerialize["file_blocking"] = o.FileBlocking
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.SaasSecurity) {
		toSerialize["saas_security"] = o.SaasSecurity
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Spyware) {
		toSerialize["spyware"] = o.Spyware
	}
	if !IsNil(o.UrlFiltering) {
		toSerialize["url_filtering"] = o.UrlFiltering
	}
	if !IsNil(o.VirusAndWildfireAnalysis) {
		toSerialize["virus_and_wildfire_analysis"] = o.VirusAndWildfireAnalysis
	}
	if !IsNil(o.Vulnerability) {
		toSerialize["vulnerability"] = o.Vulnerability
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProfileGroups) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProfileGroups := _ProfileGroups{}

	err = json.Unmarshal(data, &varProfileGroups)

	if err != nil {
		return err
	}

	*o = ProfileGroups(varProfileGroups)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ai_security")
		delete(additionalProperties, "data_filtering")
		delete(additionalProperties, "device")
		delete(additionalProperties, "dns_security")
		delete(additionalProperties, "file_blocking")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "saas_security")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "spyware")
		delete(additionalProperties, "url_filtering")
		delete(additionalProperties, "virus_and_wildfire_analysis")
		delete(additionalProperties, "vulnerability")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProfileGroups struct {
	value *ProfileGroups
	isSet bool
}

func (v NullableProfileGroups) Get() *ProfileGroups {
	return v.value
}

func (v *NullableProfileGroups) Set(val *ProfileGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableProfileGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableProfileGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProfileGroups(val *ProfileGroups) *NullableProfileGroups {
	return &NullableProfileGroups{value: val, isSet: true}
}

func (v NullableProfileGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProfileGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
