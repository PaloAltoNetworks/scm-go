/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl{}

// InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl struct for InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl
type InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl struct {
	ConsumerAccess       *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess   `json:"consumer_access,omitempty"`
	EnterpriseAccess     *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess `json:"enterprise_access,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl

// NewInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl instantiates a new InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl() *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl {
	this := InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl{}
	return &this
}

// NewInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlWithDefaults instantiates a new InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlWithDefaults() *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl {
	this := InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl{}
	return &this
}

// GetConsumerAccess returns the ConsumerAccess field value if set, zero value otherwise.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) GetConsumerAccess() InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess {
	if o == nil || IsNil(o.ConsumerAccess) {
		var ret InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess
		return ret
	}
	return *o.ConsumerAccess
}

// GetConsumerAccessOk returns a tuple with the ConsumerAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) GetConsumerAccessOk() (*InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess, bool) {
	if o == nil || IsNil(o.ConsumerAccess) {
		return nil, false
	}
	return o.ConsumerAccess, true
}

// HasConsumerAccess returns a boolean if a field has been set.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) HasConsumerAccess() bool {
	if o != nil && !IsNil(o.ConsumerAccess) {
		return true
	}

	return false
}

// SetConsumerAccess gets a reference to the given InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess and assigns it to the ConsumerAccess field.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) SetConsumerAccess(v InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess) {
	o.ConsumerAccess = &v
}

// GetEnterpriseAccess returns the EnterpriseAccess field value if set, zero value otherwise.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) GetEnterpriseAccess() InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess {
	if o == nil || IsNil(o.EnterpriseAccess) {
		var ret InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess
		return ret
	}
	return *o.EnterpriseAccess
}

// GetEnterpriseAccessOk returns a tuple with the EnterpriseAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) GetEnterpriseAccessOk() (*InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess, bool) {
	if o == nil || IsNil(o.EnterpriseAccess) {
		return nil, false
	}
	return o.EnterpriseAccess, true
}

// HasEnterpriseAccess returns a boolean if a field has been set.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) HasEnterpriseAccess() bool {
	if o != nil && !IsNil(o.EnterpriseAccess) {
		return true
	}

	return false
}

// SetEnterpriseAccess gets a reference to the given InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess and assigns it to the EnterpriseAccess field.
func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) SetEnterpriseAccess(v InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess) {
	o.EnterpriseAccess = &v
}

func (o InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerAccess) {
		toSerialize["consumer_access"] = o.ConsumerAccess
	}
	if !IsNil(o.EnterpriseAccess) {
		toSerialize["enterprise_access"] = o.EnterpriseAccess
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) UnmarshalJSON(data []byte) (err error) {
	varInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl := _InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl{}

	err = json.Unmarshal(data, &varInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl)

	if err != nil {
		return err
	}

	*o = InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl(varInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "consumer_access")
		delete(additionalProperties, "enterprise_access")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl struct {
	value *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl
	isSet bool
}

func (v NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) Get() *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl {
	return v.value
}

func (v *NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) Set(val *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl(val *InternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) *NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl {
	return &NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl{value: val, isSet: true}
}

func (v NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetRuleTypeAllowWebApplicationInnerSaasEnterpriseControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
