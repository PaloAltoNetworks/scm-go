/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DecryptionProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptionProfiles{}

// DecryptionProfiles struct for DecryptionProfiles
type DecryptionProfiles struct {
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id string `json:"id"`
	// Must start with alphanumeric char and should contain only alphanemeric, underscore, hyphen, dot or space
	Name string `json:"name" validate:"regexp=^[A-Za-z0-9]{1}[A-Za-z0-9_\\\\-\\\\.\\\\s]{0,}$"`
	// The snippet in which the resource is defined
	Snippet              *string                                `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	SslForwardProxy      *DecryptionProfilesSslForwardProxy     `json:"ssl_forward_proxy,omitempty"`
	SslInboundProxy      *DecryptionProfilesSslInboundProxy     `json:"ssl_inbound_proxy,omitempty"`
	SslNoProxy           *DecryptionProfilesSslNoProxy          `json:"ssl_no_proxy,omitempty"`
	SslProtocolSettings  *DecryptionProfilesSslProtocolSettings `json:"ssl_protocol_settings,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DecryptionProfiles DecryptionProfiles

// NewDecryptionProfiles instantiates a new DecryptionProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptionProfiles(id string, name string) *DecryptionProfiles {
	this := DecryptionProfiles{}
	this.Id = id
	this.Name = name
	return &this
}

// NewDecryptionProfilesWithDefaults instantiates a new DecryptionProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptionProfilesWithDefaults() *DecryptionProfiles {
	this := DecryptionProfiles{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DecryptionProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DecryptionProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *DecryptionProfiles) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *DecryptionProfiles) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *DecryptionProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DecryptionProfiles) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *DecryptionProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSslForwardProxy returns the SslForwardProxy field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetSslForwardProxy() DecryptionProfilesSslForwardProxy {
	if o == nil || IsNil(o.SslForwardProxy) {
		var ret DecryptionProfilesSslForwardProxy
		return ret
	}
	return *o.SslForwardProxy
}

// GetSslForwardProxyOk returns a tuple with the SslForwardProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetSslForwardProxyOk() (*DecryptionProfilesSslForwardProxy, bool) {
	if o == nil || IsNil(o.SslForwardProxy) {
		return nil, false
	}
	return o.SslForwardProxy, true
}

// HasSslForwardProxy returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasSslForwardProxy() bool {
	if o != nil && !IsNil(o.SslForwardProxy) {
		return true
	}

	return false
}

// SetSslForwardProxy gets a reference to the given DecryptionProfilesSslForwardProxy and assigns it to the SslForwardProxy field.
func (o *DecryptionProfiles) SetSslForwardProxy(v DecryptionProfilesSslForwardProxy) {
	o.SslForwardProxy = &v
}

// GetSslInboundProxy returns the SslInboundProxy field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetSslInboundProxy() DecryptionProfilesSslInboundProxy {
	if o == nil || IsNil(o.SslInboundProxy) {
		var ret DecryptionProfilesSslInboundProxy
		return ret
	}
	return *o.SslInboundProxy
}

// GetSslInboundProxyOk returns a tuple with the SslInboundProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetSslInboundProxyOk() (*DecryptionProfilesSslInboundProxy, bool) {
	if o == nil || IsNil(o.SslInboundProxy) {
		return nil, false
	}
	return o.SslInboundProxy, true
}

// HasSslInboundProxy returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasSslInboundProxy() bool {
	if o != nil && !IsNil(o.SslInboundProxy) {
		return true
	}

	return false
}

// SetSslInboundProxy gets a reference to the given DecryptionProfilesSslInboundProxy and assigns it to the SslInboundProxy field.
func (o *DecryptionProfiles) SetSslInboundProxy(v DecryptionProfilesSslInboundProxy) {
	o.SslInboundProxy = &v
}

// GetSslNoProxy returns the SslNoProxy field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetSslNoProxy() DecryptionProfilesSslNoProxy {
	if o == nil || IsNil(o.SslNoProxy) {
		var ret DecryptionProfilesSslNoProxy
		return ret
	}
	return *o.SslNoProxy
}

// GetSslNoProxyOk returns a tuple with the SslNoProxy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetSslNoProxyOk() (*DecryptionProfilesSslNoProxy, bool) {
	if o == nil || IsNil(o.SslNoProxy) {
		return nil, false
	}
	return o.SslNoProxy, true
}

// HasSslNoProxy returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasSslNoProxy() bool {
	if o != nil && !IsNil(o.SslNoProxy) {
		return true
	}

	return false
}

// SetSslNoProxy gets a reference to the given DecryptionProfilesSslNoProxy and assigns it to the SslNoProxy field.
func (o *DecryptionProfiles) SetSslNoProxy(v DecryptionProfilesSslNoProxy) {
	o.SslNoProxy = &v
}

// GetSslProtocolSettings returns the SslProtocolSettings field value if set, zero value otherwise.
func (o *DecryptionProfiles) GetSslProtocolSettings() DecryptionProfilesSslProtocolSettings {
	if o == nil || IsNil(o.SslProtocolSettings) {
		var ret DecryptionProfilesSslProtocolSettings
		return ret
	}
	return *o.SslProtocolSettings
}

// GetSslProtocolSettingsOk returns a tuple with the SslProtocolSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionProfiles) GetSslProtocolSettingsOk() (*DecryptionProfilesSslProtocolSettings, bool) {
	if o == nil || IsNil(o.SslProtocolSettings) {
		return nil, false
	}
	return o.SslProtocolSettings, true
}

// HasSslProtocolSettings returns a boolean if a field has been set.
func (o *DecryptionProfiles) HasSslProtocolSettings() bool {
	if o != nil && !IsNil(o.SslProtocolSettings) {
		return true
	}

	return false
}

// SetSslProtocolSettings gets a reference to the given DecryptionProfilesSslProtocolSettings and assigns it to the SslProtocolSettings field.
func (o *DecryptionProfiles) SetSslProtocolSettings(v DecryptionProfilesSslProtocolSettings) {
	o.SslProtocolSettings = &v
}

func (o DecryptionProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptionProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.SslForwardProxy) {
		toSerialize["ssl_forward_proxy"] = o.SslForwardProxy
	}
	if !IsNil(o.SslInboundProxy) {
		toSerialize["ssl_inbound_proxy"] = o.SslInboundProxy
	}
	if !IsNil(o.SslNoProxy) {
		toSerialize["ssl_no_proxy"] = o.SslNoProxy
	}
	if !IsNil(o.SslProtocolSettings) {
		toSerialize["ssl_protocol_settings"] = o.SslProtocolSettings
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DecryptionProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecryptionProfiles := _DecryptionProfiles{}

	err = json.Unmarshal(data, &varDecryptionProfiles)

	if err != nil {
		return err
	}

	*o = DecryptionProfiles(varDecryptionProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "ssl_forward_proxy")
		delete(additionalProperties, "ssl_inbound_proxy")
		delete(additionalProperties, "ssl_no_proxy")
		delete(additionalProperties, "ssl_protocol_settings")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDecryptionProfiles struct {
	value *DecryptionProfiles
	isSet bool
}

func (v NullableDecryptionProfiles) Get() *DecryptionProfiles {
	return v.value
}

func (v *NullableDecryptionProfiles) Set(val *DecryptionProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptionProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptionProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptionProfiles(val *DecryptionProfiles) *NullableDecryptionProfiles {
	return &NullableDecryptionProfiles{value: val, isSet: true}
}

func (v NullableDecryptionProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptionProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
