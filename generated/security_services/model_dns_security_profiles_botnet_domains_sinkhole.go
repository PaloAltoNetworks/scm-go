/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the DnsSecurityProfilesBotnetDomainsSinkhole type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsSecurityProfilesBotnetDomainsSinkhole{}

// DnsSecurityProfilesBotnetDomainsSinkhole DNS sinkhole settings
type DnsSecurityProfilesBotnetDomainsSinkhole struct {
	Ipv4Address          *string `json:"ipv4_address,omitempty"`
	Ipv6Address          *string `json:"ipv6_address,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsSecurityProfilesBotnetDomainsSinkhole DnsSecurityProfilesBotnetDomainsSinkhole

// NewDnsSecurityProfilesBotnetDomainsSinkhole instantiates a new DnsSecurityProfilesBotnetDomainsSinkhole object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsSecurityProfilesBotnetDomainsSinkhole() *DnsSecurityProfilesBotnetDomainsSinkhole {
	this := DnsSecurityProfilesBotnetDomainsSinkhole{}
	return &this
}

// NewDnsSecurityProfilesBotnetDomainsSinkholeWithDefaults instantiates a new DnsSecurityProfilesBotnetDomainsSinkhole object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsSecurityProfilesBotnetDomainsSinkholeWithDefaults() *DnsSecurityProfilesBotnetDomainsSinkhole {
	this := DnsSecurityProfilesBotnetDomainsSinkhole{}
	return &this
}

// GetIpv4Address returns the Ipv4Address field value if set, zero value otherwise.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) GetIpv4Address() string {
	if o == nil || IsNil(o.Ipv4Address) {
		var ret string
		return ret
	}
	return *o.Ipv4Address
}

// GetIpv4AddressOk returns a tuple with the Ipv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) GetIpv4AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv4Address) {
		return nil, false
	}
	return o.Ipv4Address, true
}

// HasIpv4Address returns a boolean if a field has been set.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) HasIpv4Address() bool {
	if o != nil && !IsNil(o.Ipv4Address) {
		return true
	}

	return false
}

// SetIpv4Address gets a reference to the given string and assigns it to the Ipv4Address field.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) SetIpv4Address(v string) {
	o.Ipv4Address = &v
}

// GetIpv6Address returns the Ipv6Address field value if set, zero value otherwise.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) GetIpv6Address() string {
	if o == nil || IsNil(o.Ipv6Address) {
		var ret string
		return ret
	}
	return *o.Ipv6Address
}

// GetIpv6AddressOk returns a tuple with the Ipv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) GetIpv6AddressOk() (*string, bool) {
	if o == nil || IsNil(o.Ipv6Address) {
		return nil, false
	}
	return o.Ipv6Address, true
}

// HasIpv6Address returns a boolean if a field has been set.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) HasIpv6Address() bool {
	if o != nil && !IsNil(o.Ipv6Address) {
		return true
	}

	return false
}

// SetIpv6Address gets a reference to the given string and assigns it to the Ipv6Address field.
func (o *DnsSecurityProfilesBotnetDomainsSinkhole) SetIpv6Address(v string) {
	o.Ipv6Address = &v
}

func (o DnsSecurityProfilesBotnetDomainsSinkhole) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsSecurityProfilesBotnetDomainsSinkhole) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4Address) {
		toSerialize["ipv4_address"] = o.Ipv4Address
	}
	if !IsNil(o.Ipv6Address) {
		toSerialize["ipv6_address"] = o.Ipv6Address
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsSecurityProfilesBotnetDomainsSinkhole) UnmarshalJSON(data []byte) (err error) {
	varDnsSecurityProfilesBotnetDomainsSinkhole := _DnsSecurityProfilesBotnetDomainsSinkhole{}

	err = json.Unmarshal(data, &varDnsSecurityProfilesBotnetDomainsSinkhole)

	if err != nil {
		return err
	}

	*o = DnsSecurityProfilesBotnetDomainsSinkhole(varDnsSecurityProfilesBotnetDomainsSinkhole)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4_address")
		delete(additionalProperties, "ipv6_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsSecurityProfilesBotnetDomainsSinkhole struct {
	value *DnsSecurityProfilesBotnetDomainsSinkhole
	isSet bool
}

func (v NullableDnsSecurityProfilesBotnetDomainsSinkhole) Get() *DnsSecurityProfilesBotnetDomainsSinkhole {
	return v.value
}

func (v *NullableDnsSecurityProfilesBotnetDomainsSinkhole) Set(val *DnsSecurityProfilesBotnetDomainsSinkhole) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsSecurityProfilesBotnetDomainsSinkhole) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsSecurityProfilesBotnetDomainsSinkhole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsSecurityProfilesBotnetDomainsSinkhole(val *DnsSecurityProfilesBotnetDomainsSinkhole) *NullableDnsSecurityProfilesBotnetDomainsSinkhole {
	return &NullableDnsSecurityProfilesBotnetDomainsSinkhole{value: val, isSet: true}
}

func (v NullableDnsSecurityProfilesBotnetDomainsSinkhole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsSecurityProfilesBotnetDomainsSinkhole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
