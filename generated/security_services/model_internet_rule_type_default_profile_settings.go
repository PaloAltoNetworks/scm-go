/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the InternetRuleTypeDefaultProfileSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternetRuleTypeDefaultProfileSettings{}

// InternetRuleTypeDefaultProfileSettings struct for InternetRuleTypeDefaultProfileSettings
type InternetRuleTypeDefaultProfileSettings struct {
	Dlp                  *string                                           `json:"dlp,omitempty"`
	FileControl          *InternetRuleTypeAllowUrlCategoryInnerFileControl `json:"file_control,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InternetRuleTypeDefaultProfileSettings InternetRuleTypeDefaultProfileSettings

// NewInternetRuleTypeDefaultProfileSettings instantiates a new InternetRuleTypeDefaultProfileSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternetRuleTypeDefaultProfileSettings() *InternetRuleTypeDefaultProfileSettings {
	this := InternetRuleTypeDefaultProfileSettings{}
	return &this
}

// NewInternetRuleTypeDefaultProfileSettingsWithDefaults instantiates a new InternetRuleTypeDefaultProfileSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternetRuleTypeDefaultProfileSettingsWithDefaults() *InternetRuleTypeDefaultProfileSettings {
	this := InternetRuleTypeDefaultProfileSettings{}
	return &this
}

// GetDlp returns the Dlp field value if set, zero value otherwise.
func (o *InternetRuleTypeDefaultProfileSettings) GetDlp() string {
	if o == nil || IsNil(o.Dlp) {
		var ret string
		return ret
	}
	return *o.Dlp
}

// GetDlpOk returns a tuple with the Dlp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetRuleTypeDefaultProfileSettings) GetDlpOk() (*string, bool) {
	if o == nil || IsNil(o.Dlp) {
		return nil, false
	}
	return o.Dlp, true
}

// HasDlp returns a boolean if a field has been set.
func (o *InternetRuleTypeDefaultProfileSettings) HasDlp() bool {
	if o != nil && !IsNil(o.Dlp) {
		return true
	}

	return false
}

// SetDlp gets a reference to the given string and assigns it to the Dlp field.
func (o *InternetRuleTypeDefaultProfileSettings) SetDlp(v string) {
	o.Dlp = &v
}

// GetFileControl returns the FileControl field value if set, zero value otherwise.
func (o *InternetRuleTypeDefaultProfileSettings) GetFileControl() InternetRuleTypeAllowUrlCategoryInnerFileControl {
	if o == nil || IsNil(o.FileControl) {
		var ret InternetRuleTypeAllowUrlCategoryInnerFileControl
		return ret
	}
	return *o.FileControl
}

// GetFileControlOk returns a tuple with the FileControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternetRuleTypeDefaultProfileSettings) GetFileControlOk() (*InternetRuleTypeAllowUrlCategoryInnerFileControl, bool) {
	if o == nil || IsNil(o.FileControl) {
		return nil, false
	}
	return o.FileControl, true
}

// HasFileControl returns a boolean if a field has been set.
func (o *InternetRuleTypeDefaultProfileSettings) HasFileControl() bool {
	if o != nil && !IsNil(o.FileControl) {
		return true
	}

	return false
}

// SetFileControl gets a reference to the given InternetRuleTypeAllowUrlCategoryInnerFileControl and assigns it to the FileControl field.
func (o *InternetRuleTypeDefaultProfileSettings) SetFileControl(v InternetRuleTypeAllowUrlCategoryInnerFileControl) {
	o.FileControl = &v
}

func (o InternetRuleTypeDefaultProfileSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternetRuleTypeDefaultProfileSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dlp) {
		toSerialize["dlp"] = o.Dlp
	}
	if !IsNil(o.FileControl) {
		toSerialize["file_control"] = o.FileControl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InternetRuleTypeDefaultProfileSettings) UnmarshalJSON(data []byte) (err error) {
	varInternetRuleTypeDefaultProfileSettings := _InternetRuleTypeDefaultProfileSettings{}

	err = json.Unmarshal(data, &varInternetRuleTypeDefaultProfileSettings)

	if err != nil {
		return err
	}

	*o = InternetRuleTypeDefaultProfileSettings(varInternetRuleTypeDefaultProfileSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dlp")
		delete(additionalProperties, "file_control")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInternetRuleTypeDefaultProfileSettings struct {
	value *InternetRuleTypeDefaultProfileSettings
	isSet bool
}

func (v NullableInternetRuleTypeDefaultProfileSettings) Get() *InternetRuleTypeDefaultProfileSettings {
	return v.value
}

func (v *NullableInternetRuleTypeDefaultProfileSettings) Set(val *InternetRuleTypeDefaultProfileSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableInternetRuleTypeDefaultProfileSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableInternetRuleTypeDefaultProfileSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternetRuleTypeDefaultProfileSettings(val *InternetRuleTypeDefaultProfileSettings) *NullableInternetRuleTypeDefaultProfileSettings {
	return &NullableInternetRuleTypeDefaultProfileSettings{value: val, isSet: true}
}

func (v NullableInternetRuleTypeDefaultProfileSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternetRuleTypeDefaultProfileSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
