/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl{}

// SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl struct for SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl
type SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl struct {
	ConsumerAccess       *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess   `json:"consumer_access,omitempty"`
	EnterpriseAccess     *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess `json:"enterprise_access,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl

// NewSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl instantiates a new SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl() *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl {
	this := SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl{}
	return &this
}

// NewSecurityRulesAllowWebApplicationInnerSaasEnterpriseControlWithDefaults instantiates a new SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityRulesAllowWebApplicationInnerSaasEnterpriseControlWithDefaults() *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl {
	this := SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl{}
	return &this
}

// GetConsumerAccess returns the ConsumerAccess field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) GetConsumerAccess() SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess {
	if o == nil || IsNil(o.ConsumerAccess) {
		var ret SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess
		return ret
	}
	return *o.ConsumerAccess
}

// GetConsumerAccessOk returns a tuple with the ConsumerAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) GetConsumerAccessOk() (*SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess, bool) {
	if o == nil || IsNil(o.ConsumerAccess) {
		return nil, false
	}
	return o.ConsumerAccess, true
}

// HasConsumerAccess returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) HasConsumerAccess() bool {
	if o != nil && !IsNil(o.ConsumerAccess) {
		return true
	}

	return false
}

// SetConsumerAccess gets a reference to the given SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess and assigns it to the ConsumerAccess field.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) SetConsumerAccess(v SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlConsumerAccess) {
	o.ConsumerAccess = &v
}

// GetEnterpriseAccess returns the EnterpriseAccess field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) GetEnterpriseAccess() SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess {
	if o == nil || IsNil(o.EnterpriseAccess) {
		var ret SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess
		return ret
	}
	return *o.EnterpriseAccess
}

// GetEnterpriseAccessOk returns a tuple with the EnterpriseAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) GetEnterpriseAccessOk() (*SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess, bool) {
	if o == nil || IsNil(o.EnterpriseAccess) {
		return nil, false
	}
	return o.EnterpriseAccess, true
}

// HasEnterpriseAccess returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) HasEnterpriseAccess() bool {
	if o != nil && !IsNil(o.EnterpriseAccess) {
		return true
	}

	return false
}

// SetEnterpriseAccess gets a reference to the given SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess and assigns it to the EnterpriseAccess field.
func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) SetEnterpriseAccess(v SecurityRulesAllowWebApplicationInnerSaasEnterpriseControlEnterpriseAccess) {
	o.EnterpriseAccess = &v
}

func (o SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConsumerAccess) {
		toSerialize["consumer_access"] = o.ConsumerAccess
	}
	if !IsNil(o.EnterpriseAccess) {
		toSerialize["enterprise_access"] = o.EnterpriseAccess
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) UnmarshalJSON(data []byte) (err error) {
	varSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl := _SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl{}

	err = json.Unmarshal(data, &varSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl)

	if err != nil {
		return err
	}

	*o = SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl(varSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "consumer_access")
		delete(additionalProperties, "enterprise_access")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl struct {
	value *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl
	isSet bool
}

func (v NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) Get() *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl {
	return v.value
}

func (v *NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) Set(val *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl(val *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) *NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl {
	return &NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl{value: val, isSet: true}
}

func (v NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
