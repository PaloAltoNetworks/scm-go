/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the UrlAccessProfilesCredentialEnforcementMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlAccessProfilesCredentialEnforcementMode{}

// UrlAccessProfilesCredentialEnforcementMode struct for UrlAccessProfilesCredentialEnforcementMode
type UrlAccessProfilesCredentialEnforcementMode struct {
	Disabled             map[string]interface{} `json:"disabled,omitempty"`
	DomainCredentials    map[string]interface{} `json:"domain_credentials,omitempty"`
	GroupMapping         *string                `json:"group_mapping,omitempty"`
	IpUser               map[string]interface{} `json:"ip_user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _UrlAccessProfilesCredentialEnforcementMode UrlAccessProfilesCredentialEnforcementMode

// NewUrlAccessProfilesCredentialEnforcementMode instantiates a new UrlAccessProfilesCredentialEnforcementMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlAccessProfilesCredentialEnforcementMode() *UrlAccessProfilesCredentialEnforcementMode {
	this := UrlAccessProfilesCredentialEnforcementMode{}
	return &this
}

// NewUrlAccessProfilesCredentialEnforcementModeWithDefaults instantiates a new UrlAccessProfilesCredentialEnforcementMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlAccessProfilesCredentialEnforcementModeWithDefaults() *UrlAccessProfilesCredentialEnforcementMode {
	this := UrlAccessProfilesCredentialEnforcementMode{}
	return &this
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetDisabled() map[string]interface{} {
	if o == nil || IsNil(o.Disabled) {
		var ret map[string]interface{}
		return ret
	}
	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetDisabledOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Disabled) {
		return map[string]interface{}{}, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given map[string]interface{} and assigns it to the Disabled field.
func (o *UrlAccessProfilesCredentialEnforcementMode) SetDisabled(v map[string]interface{}) {
	o.Disabled = v
}

// GetDomainCredentials returns the DomainCredentials field value if set, zero value otherwise.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetDomainCredentials() map[string]interface{} {
	if o == nil || IsNil(o.DomainCredentials) {
		var ret map[string]interface{}
		return ret
	}
	return o.DomainCredentials
}

// GetDomainCredentialsOk returns a tuple with the DomainCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetDomainCredentialsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.DomainCredentials) {
		return map[string]interface{}{}, false
	}
	return o.DomainCredentials, true
}

// HasDomainCredentials returns a boolean if a field has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) HasDomainCredentials() bool {
	if o != nil && !IsNil(o.DomainCredentials) {
		return true
	}

	return false
}

// SetDomainCredentials gets a reference to the given map[string]interface{} and assigns it to the DomainCredentials field.
func (o *UrlAccessProfilesCredentialEnforcementMode) SetDomainCredentials(v map[string]interface{}) {
	o.DomainCredentials = v
}

// GetGroupMapping returns the GroupMapping field value if set, zero value otherwise.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetGroupMapping() string {
	if o == nil || IsNil(o.GroupMapping) {
		var ret string
		return ret
	}
	return *o.GroupMapping
}

// GetGroupMappingOk returns a tuple with the GroupMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetGroupMappingOk() (*string, bool) {
	if o == nil || IsNil(o.GroupMapping) {
		return nil, false
	}
	return o.GroupMapping, true
}

// HasGroupMapping returns a boolean if a field has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) HasGroupMapping() bool {
	if o != nil && !IsNil(o.GroupMapping) {
		return true
	}

	return false
}

// SetGroupMapping gets a reference to the given string and assigns it to the GroupMapping field.
func (o *UrlAccessProfilesCredentialEnforcementMode) SetGroupMapping(v string) {
	o.GroupMapping = &v
}

// GetIpUser returns the IpUser field value if set, zero value otherwise.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetIpUser() map[string]interface{} {
	if o == nil || IsNil(o.IpUser) {
		var ret map[string]interface{}
		return ret
	}
	return o.IpUser
}

// GetIpUserOk returns a tuple with the IpUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) GetIpUserOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.IpUser) {
		return map[string]interface{}{}, false
	}
	return o.IpUser, true
}

// HasIpUser returns a boolean if a field has been set.
func (o *UrlAccessProfilesCredentialEnforcementMode) HasIpUser() bool {
	if o != nil && !IsNil(o.IpUser) {
		return true
	}

	return false
}

// SetIpUser gets a reference to the given map[string]interface{} and assigns it to the IpUser field.
func (o *UrlAccessProfilesCredentialEnforcementMode) SetIpUser(v map[string]interface{}) {
	o.IpUser = v
}

func (o UrlAccessProfilesCredentialEnforcementMode) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlAccessProfilesCredentialEnforcementMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.DomainCredentials) {
		toSerialize["domain_credentials"] = o.DomainCredentials
	}
	if !IsNil(o.GroupMapping) {
		toSerialize["group_mapping"] = o.GroupMapping
	}
	if !IsNil(o.IpUser) {
		toSerialize["ip_user"] = o.IpUser
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UrlAccessProfilesCredentialEnforcementMode) UnmarshalJSON(data []byte) (err error) {
	varUrlAccessProfilesCredentialEnforcementMode := _UrlAccessProfilesCredentialEnforcementMode{}

	err = json.Unmarshal(data, &varUrlAccessProfilesCredentialEnforcementMode)

	if err != nil {
		return err
	}

	*o = UrlAccessProfilesCredentialEnforcementMode(varUrlAccessProfilesCredentialEnforcementMode)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "domain_credentials")
		delete(additionalProperties, "group_mapping")
		delete(additionalProperties, "ip_user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUrlAccessProfilesCredentialEnforcementMode struct {
	value *UrlAccessProfilesCredentialEnforcementMode
	isSet bool
}

func (v NullableUrlAccessProfilesCredentialEnforcementMode) Get() *UrlAccessProfilesCredentialEnforcementMode {
	return v.value
}

func (v *NullableUrlAccessProfilesCredentialEnforcementMode) Set(val *UrlAccessProfilesCredentialEnforcementMode) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlAccessProfilesCredentialEnforcementMode) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlAccessProfilesCredentialEnforcementMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlAccessProfilesCredentialEnforcementMode(val *UrlAccessProfilesCredentialEnforcementMode) *NullableUrlAccessProfilesCredentialEnforcementMode {
	return &NullableUrlAccessProfilesCredentialEnforcementMode{value: val, isSet: true}
}

func (v NullableUrlAccessProfilesCredentialEnforcementMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlAccessProfilesCredentialEnforcementMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
