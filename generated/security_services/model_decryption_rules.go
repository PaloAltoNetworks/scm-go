/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DecryptionRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DecryptionRules{}

// DecryptionRules struct for DecryptionRules
type DecryptionRules struct {
	// The action to be taken
	Action string `json:"action"`
	// The destination URL category
	Category []string `json:"category"`
	// The description of the decryption rule
	Description *string `json:"description,omitempty"`
	// The destination addresses
	Destination []string `json:"destination"`
	// The Host Integrity Profile of the destination host
	DestinationHip []string `json:"destination_hip,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Is the rule disabled?
	Disabled *bool `json:"disabled,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The source security zone
	From []string `json:"from"`
	// The UUID of the decryption rule
	Id *string `json:"id,omitempty"`
	// Log failed decryption events?
	LogFail *bool `json:"log_fail,omitempty"`
	// The log settings of the decryption rule
	LogSetting *string `json:"log_setting,omitempty"`
	// Log successful decryption events?
	LogSuccess *bool `json:"log_success,omitempty"`
	// The name of the decryption rule
	Name string `json:"name"`
	// Negate the destination addresses?
	NegateDestination *bool `json:"negate_destination,omitempty"`
	// Negate the source addresses?
	NegateSource *bool `json:"negate_source,omitempty"`
	// The decryption profile associated with the decryption rule
	Profile *string `json:"profile,omitempty"`
	// The destination services and/or service groups
	Service []string `json:"service"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The source addresses
	Source    []string `json:"source"`
	SourceHip []string `json:"source_hip,omitempty"`
	// List of source users and/or groups.  Reserved words include `any`, `pre-login`, `known-user`, and `unknown`.
	SourceUser []string `json:"source_user"`
	// The tags associated with the decryption rule
	Tag []string `json:"tag,omitempty"`
	// The destination security zone
	To                   []string             `json:"to"`
	Type                 *DecryptionRulesType `json:"type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DecryptionRules DecryptionRules

// NewDecryptionRules instantiates a new DecryptionRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDecryptionRules(action string, category []string, destination []string, from []string, name string, service []string, source []string, sourceUser []string, to []string) *DecryptionRules {
	this := DecryptionRules{}
	this.Action = action
	this.Category = category
	this.Destination = destination
	this.From = from
	this.Name = name
	this.Service = service
	this.Source = source
	this.SourceUser = sourceUser
	this.To = to
	return &this
}

// NewDecryptionRulesWithDefaults instantiates a new DecryptionRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDecryptionRulesWithDefaults() *DecryptionRules {
	this := DecryptionRules{}
	return &this
}

// GetAction returns the Action field value
func (o *DecryptionRules) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *DecryptionRules) SetAction(v string) {
	o.Action = v
}

// GetCategory returns the Category field value
func (o *DecryptionRules) GetCategory() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetCategoryOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category, true
}

// SetCategory sets field value
func (o *DecryptionRules) SetCategory(v []string) {
	o.Category = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DecryptionRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DecryptionRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DecryptionRules) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value
func (o *DecryptionRules) GetDestination() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetDestinationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destination, true
}

// SetDestination sets field value
func (o *DecryptionRules) SetDestination(v []string) {
	o.Destination = v
}

// GetDestinationHip returns the DestinationHip field value if set, zero value otherwise.
func (o *DecryptionRules) GetDestinationHip() []string {
	if o == nil || IsNil(o.DestinationHip) {
		var ret []string
		return ret
	}
	return o.DestinationHip
}

// GetDestinationHipOk returns a tuple with the DestinationHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetDestinationHipOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationHip) {
		return nil, false
	}
	return o.DestinationHip, true
}

// HasDestinationHip returns a boolean if a field has been set.
func (o *DecryptionRules) HasDestinationHip() bool {
	if o != nil && !IsNil(o.DestinationHip) {
		return true
	}

	return false
}

// SetDestinationHip gets a reference to the given []string and assigns it to the DestinationHip field.
func (o *DecryptionRules) SetDestinationHip(v []string) {
	o.DestinationHip = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DecryptionRules) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DecryptionRules) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DecryptionRules) SetDevice(v string) {
	o.Device = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *DecryptionRules) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *DecryptionRules) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *DecryptionRules) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DecryptionRules) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DecryptionRules) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DecryptionRules) SetFolder(v string) {
	o.Folder = &v
}

// GetFrom returns the From field value
func (o *DecryptionRules) GetFrom() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetFromOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.From, true
}

// SetFrom sets field value
func (o *DecryptionRules) SetFrom(v []string) {
	o.From = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DecryptionRules) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DecryptionRules) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DecryptionRules) SetId(v string) {
	o.Id = &v
}

// GetLogFail returns the LogFail field value if set, zero value otherwise.
func (o *DecryptionRules) GetLogFail() bool {
	if o == nil || IsNil(o.LogFail) {
		var ret bool
		return ret
	}
	return *o.LogFail
}

// GetLogFailOk returns a tuple with the LogFail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetLogFailOk() (*bool, bool) {
	if o == nil || IsNil(o.LogFail) {
		return nil, false
	}
	return o.LogFail, true
}

// HasLogFail returns a boolean if a field has been set.
func (o *DecryptionRules) HasLogFail() bool {
	if o != nil && !IsNil(o.LogFail) {
		return true
	}

	return false
}

// SetLogFail gets a reference to the given bool and assigns it to the LogFail field.
func (o *DecryptionRules) SetLogFail(v bool) {
	o.LogFail = &v
}

// GetLogSetting returns the LogSetting field value if set, zero value otherwise.
func (o *DecryptionRules) GetLogSetting() string {
	if o == nil || IsNil(o.LogSetting) {
		var ret string
		return ret
	}
	return *o.LogSetting
}

// GetLogSettingOk returns a tuple with the LogSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetLogSettingOk() (*string, bool) {
	if o == nil || IsNil(o.LogSetting) {
		return nil, false
	}
	return o.LogSetting, true
}

// HasLogSetting returns a boolean if a field has been set.
func (o *DecryptionRules) HasLogSetting() bool {
	if o != nil && !IsNil(o.LogSetting) {
		return true
	}

	return false
}

// SetLogSetting gets a reference to the given string and assigns it to the LogSetting field.
func (o *DecryptionRules) SetLogSetting(v string) {
	o.LogSetting = &v
}

// GetLogSuccess returns the LogSuccess field value if set, zero value otherwise.
func (o *DecryptionRules) GetLogSuccess() bool {
	if o == nil || IsNil(o.LogSuccess) {
		var ret bool
		return ret
	}
	return *o.LogSuccess
}

// GetLogSuccessOk returns a tuple with the LogSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetLogSuccessOk() (*bool, bool) {
	if o == nil || IsNil(o.LogSuccess) {
		return nil, false
	}
	return o.LogSuccess, true
}

// HasLogSuccess returns a boolean if a field has been set.
func (o *DecryptionRules) HasLogSuccess() bool {
	if o != nil && !IsNil(o.LogSuccess) {
		return true
	}

	return false
}

// SetLogSuccess gets a reference to the given bool and assigns it to the LogSuccess field.
func (o *DecryptionRules) SetLogSuccess(v bool) {
	o.LogSuccess = &v
}

// GetName returns the Name field value
func (o *DecryptionRules) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DecryptionRules) SetName(v string) {
	o.Name = v
}

// GetNegateDestination returns the NegateDestination field value if set, zero value otherwise.
func (o *DecryptionRules) GetNegateDestination() bool {
	if o == nil || IsNil(o.NegateDestination) {
		var ret bool
		return ret
	}
	return *o.NegateDestination
}

// GetNegateDestinationOk returns a tuple with the NegateDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetNegateDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateDestination) {
		return nil, false
	}
	return o.NegateDestination, true
}

// HasNegateDestination returns a boolean if a field has been set.
func (o *DecryptionRules) HasNegateDestination() bool {
	if o != nil && !IsNil(o.NegateDestination) {
		return true
	}

	return false
}

// SetNegateDestination gets a reference to the given bool and assigns it to the NegateDestination field.
func (o *DecryptionRules) SetNegateDestination(v bool) {
	o.NegateDestination = &v
}

// GetNegateSource returns the NegateSource field value if set, zero value otherwise.
func (o *DecryptionRules) GetNegateSource() bool {
	if o == nil || IsNil(o.NegateSource) {
		var ret bool
		return ret
	}
	return *o.NegateSource
}

// GetNegateSourceOk returns a tuple with the NegateSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetNegateSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateSource) {
		return nil, false
	}
	return o.NegateSource, true
}

// HasNegateSource returns a boolean if a field has been set.
func (o *DecryptionRules) HasNegateSource() bool {
	if o != nil && !IsNil(o.NegateSource) {
		return true
	}

	return false
}

// SetNegateSource gets a reference to the given bool and assigns it to the NegateSource field.
func (o *DecryptionRules) SetNegateSource(v bool) {
	o.NegateSource = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *DecryptionRules) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *DecryptionRules) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *DecryptionRules) SetProfile(v string) {
	o.Profile = &v
}

// GetService returns the Service field value
func (o *DecryptionRules) GetService() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetServiceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service, true
}

// SetService sets field value
func (o *DecryptionRules) SetService(v []string) {
	o.Service = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *DecryptionRules) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *DecryptionRules) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *DecryptionRules) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSource returns the Source field value
func (o *DecryptionRules) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetSourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *DecryptionRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceHip returns the SourceHip field value if set, zero value otherwise.
func (o *DecryptionRules) GetSourceHip() []string {
	if o == nil || IsNil(o.SourceHip) {
		var ret []string
		return ret
	}
	return o.SourceHip
}

// GetSourceHipOk returns a tuple with the SourceHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetSourceHipOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceHip) {
		return nil, false
	}
	return o.SourceHip, true
}

// HasSourceHip returns a boolean if a field has been set.
func (o *DecryptionRules) HasSourceHip() bool {
	if o != nil && !IsNil(o.SourceHip) {
		return true
	}

	return false
}

// SetSourceHip gets a reference to the given []string and assigns it to the SourceHip field.
func (o *DecryptionRules) SetSourceHip(v []string) {
	o.SourceHip = v
}

// GetSourceUser returns the SourceUser field value
func (o *DecryptionRules) GetSourceUser() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetSourceUserOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceUser, true
}

// SetSourceUser sets field value
func (o *DecryptionRules) SetSourceUser(v []string) {
	o.SourceUser = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *DecryptionRules) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *DecryptionRules) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *DecryptionRules) SetTag(v []string) {
	o.Tag = v
}

// GetTo returns the To field value
func (o *DecryptionRules) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *DecryptionRules) SetTo(v []string) {
	o.To = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DecryptionRules) GetType() DecryptionRulesType {
	if o == nil || IsNil(o.Type) {
		var ret DecryptionRulesType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DecryptionRules) GetTypeOk() (*DecryptionRulesType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DecryptionRules) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given DecryptionRulesType and assigns it to the Type field.
func (o *DecryptionRules) SetType(v DecryptionRulesType) {
	o.Type = &v
}

func (o DecryptionRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DecryptionRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["category"] = o.Category
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.DestinationHip) {
		toSerialize["destination_hip"] = o.DestinationHip
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["from"] = o.From
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LogFail) {
		toSerialize["log_fail"] = o.LogFail
	}
	if !IsNil(o.LogSetting) {
		toSerialize["log_setting"] = o.LogSetting
	}
	if !IsNil(o.LogSuccess) {
		toSerialize["log_success"] = o.LogSuccess
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NegateDestination) {
		toSerialize["negate_destination"] = o.NegateDestination
	}
	if !IsNil(o.NegateSource) {
		toSerialize["negate_source"] = o.NegateSource
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.SourceHip) {
		toSerialize["source_hip"] = o.SourceHip
	}
	toSerialize["source_user"] = o.SourceUser
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["to"] = o.To
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DecryptionRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"category",
		"destination",
		"from",
		"name",
		"service",
		"source",
		"source_user",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDecryptionRules := _DecryptionRules{}

	err = json.Unmarshal(data, &varDecryptionRules)

	if err != nil {
		return err
	}

	*o = DecryptionRules(varDecryptionRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "category")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "destination_hip")
		delete(additionalProperties, "device")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "from")
		delete(additionalProperties, "id")
		delete(additionalProperties, "log_fail")
		delete(additionalProperties, "log_setting")
		delete(additionalProperties, "log_success")
		delete(additionalProperties, "name")
		delete(additionalProperties, "negate_destination")
		delete(additionalProperties, "negate_source")
		delete(additionalProperties, "profile")
		delete(additionalProperties, "service")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_hip")
		delete(additionalProperties, "source_user")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "to")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDecryptionRules struct {
	value *DecryptionRules
	isSet bool
}

func (v NullableDecryptionRules) Get() *DecryptionRules {
	return v.value
}

func (v *NullableDecryptionRules) Set(val *DecryptionRules) {
	v.value = val
	v.isSet = true
}

func (v NullableDecryptionRules) IsSet() bool {
	return v.isSet
}

func (v *NullableDecryptionRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDecryptionRules(val *DecryptionRules) *NullableDecryptionRules {
	return &NullableDecryptionRules{value: val, isSet: true}
}

func (v NullableDecryptionRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDecryptionRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
