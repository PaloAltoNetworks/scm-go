/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the SecurityRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityRules{}

// SecurityRules Represents a Security or Internet security rule. A rule must be one of the policy types AND exist in one scope (folder, snippet, or device).
type SecurityRules struct {
	// The action to be taken when the rule is matched
	Action              *string                                    `json:"action,omitempty"`
	AllowUrlCategory    []InternetRuleTypeAllowUrlCategoryInner    `json:"allow_url_category,omitempty"`
	AllowWebApplication []InternetRuleTypeAllowWebApplicationInner `json:"allow_web_application,omitempty"`
	// The application(s) being accessed
	Application         []string `json:"application,omitempty"`
	BlockUrlCategory    []string `json:"block_url_category,omitempty"`
	BlockWebApplication []string `json:"block_web_application,omitempty"`
	// The URL categories being accessed
	Category               []string                                `json:"category,omitempty"`
	DefaultProfileSettings *InternetRuleTypeDefaultProfileSettings `json:"default_profile_settings,omitempty"`
	// The description of the security rule
	Description *string `json:"description,omitempty"`
	// The destination address(es)
	Destination []string `json:"destination,omitempty"`
	// The destination Host Integrity Profile(s)
	DestinationHip []string `json:"destination_hip,omitempty"`
	// The device in which the resource is defined
	Device  *string  `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	Devices []string `json:"devices,omitempty"`
	// Is the security rule disabled?
	Disabled *bool `json:"disabled,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The source security zone(s)
	From []string `json:"from,omitempty"`
	// The UUID of the security rule
	Id *string `json:"id,omitempty"`
	// Log at session end?
	LogEnd *bool `json:"log_end,omitempty"`
	// The external log forwarding profile
	LogSetting  *string                      `json:"log_setting,omitempty"`
	LogSettings *InternetRuleTypeLogSettings `json:"log_settings,omitempty"`
	// Log at session start?
	LogStart *bool `json:"log_start,omitempty"`
	// The name of the security rule
	Name *string `json:"name,omitempty"`
	// Negate the destination addresses(es)?
	NegateDestination *bool `json:"negate_destination,omitempty"`
	// Negate the source address(es)?
	NegateSource   *bool                           `json:"negate_source,omitempty"`
	NegateUser     *bool                           `json:"negate_user,omitempty"`
	PolicyType     *string                         `json:"policy_type,omitempty"`
	ProfileSetting *SecurityRuleTypeProfileSetting `json:"profile_setting,omitempty"`
	// Schedule in which this rule will be applied
	Schedule         *string                           `json:"schedule,omitempty"`
	SecuritySettings *InternetRuleTypeSecuritySettings `json:"security_settings,omitempty"`
	// The service(s) being accessed
	Service []string `json:"service,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The source addresses(es)
	Source []string `json:"source,omitempty"`
	// The source Host Integrity Profile(s)
	SourceHip []string `json:"source_hip,omitempty"`
	// List of source users and/or groups.  Reserved words include `any`, `pre-login`, `known-user`, and `unknown`.
	SourceUser []string `json:"source_user,omitempty"`
	// The tags associated with the security rule
	Tag                []string `json:"tag,omitempty"`
	TenantRestrictions []string `json:"tenant_restrictions,omitempty"`
	// The destination security zone(s)
	To                   []string `json:"to,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SecurityRules SecurityRules

// NewSecurityRules instantiates a new SecurityRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityRules() *SecurityRules {
	this := SecurityRules{}
	var disabled bool = false
	this.Disabled = &disabled
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	var negateUser bool = false
	this.NegateUser = &negateUser
	var policyType string = "Security"
	this.PolicyType = &policyType
	return &this
}

// NewSecurityRulesWithDefaults instantiates a new SecurityRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityRulesWithDefaults() *SecurityRules {
	this := SecurityRules{}
	var disabled bool = false
	this.Disabled = &disabled
	var negateDestination bool = false
	this.NegateDestination = &negateDestination
	var negateSource bool = false
	this.NegateSource = &negateSource
	var negateUser bool = false
	this.NegateUser = &negateUser
	var policyType string = "Security"
	this.PolicyType = &policyType
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *SecurityRules) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *SecurityRules) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *SecurityRules) SetAction(v string) {
	o.Action = &v
}

// GetAllowUrlCategory returns the AllowUrlCategory field value if set, zero value otherwise.
func (o *SecurityRules) GetAllowUrlCategory() []InternetRuleTypeAllowUrlCategoryInner {
	if o == nil || IsNil(o.AllowUrlCategory) {
		var ret []InternetRuleTypeAllowUrlCategoryInner
		return ret
	}
	return o.AllowUrlCategory
}

// GetAllowUrlCategoryOk returns a tuple with the AllowUrlCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetAllowUrlCategoryOk() ([]InternetRuleTypeAllowUrlCategoryInner, bool) {
	if o == nil || IsNil(o.AllowUrlCategory) {
		return nil, false
	}
	return o.AllowUrlCategory, true
}

// HasAllowUrlCategory returns a boolean if a field has been set.
func (o *SecurityRules) HasAllowUrlCategory() bool {
	if o != nil && !IsNil(o.AllowUrlCategory) {
		return true
	}

	return false
}

// SetAllowUrlCategory gets a reference to the given []InternetRuleTypeAllowUrlCategoryInner and assigns it to the AllowUrlCategory field.
func (o *SecurityRules) SetAllowUrlCategory(v []InternetRuleTypeAllowUrlCategoryInner) {
	o.AllowUrlCategory = v
}

// GetAllowWebApplication returns the AllowWebApplication field value if set, zero value otherwise.
func (o *SecurityRules) GetAllowWebApplication() []InternetRuleTypeAllowWebApplicationInner {
	if o == nil || IsNil(o.AllowWebApplication) {
		var ret []InternetRuleTypeAllowWebApplicationInner
		return ret
	}
	return o.AllowWebApplication
}

// GetAllowWebApplicationOk returns a tuple with the AllowWebApplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetAllowWebApplicationOk() ([]InternetRuleTypeAllowWebApplicationInner, bool) {
	if o == nil || IsNil(o.AllowWebApplication) {
		return nil, false
	}
	return o.AllowWebApplication, true
}

// HasAllowWebApplication returns a boolean if a field has been set.
func (o *SecurityRules) HasAllowWebApplication() bool {
	if o != nil && !IsNil(o.AllowWebApplication) {
		return true
	}

	return false
}

// SetAllowWebApplication gets a reference to the given []InternetRuleTypeAllowWebApplicationInner and assigns it to the AllowWebApplication field.
func (o *SecurityRules) SetAllowWebApplication(v []InternetRuleTypeAllowWebApplicationInner) {
	o.AllowWebApplication = v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *SecurityRules) GetApplication() []string {
	if o == nil || IsNil(o.Application) {
		var ret []string
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetApplicationOk() ([]string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *SecurityRules) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given []string and assigns it to the Application field.
func (o *SecurityRules) SetApplication(v []string) {
	o.Application = v
}

// GetBlockUrlCategory returns the BlockUrlCategory field value if set, zero value otherwise.
func (o *SecurityRules) GetBlockUrlCategory() []string {
	if o == nil || IsNil(o.BlockUrlCategory) {
		var ret []string
		return ret
	}
	return o.BlockUrlCategory
}

// GetBlockUrlCategoryOk returns a tuple with the BlockUrlCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetBlockUrlCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockUrlCategory) {
		return nil, false
	}
	return o.BlockUrlCategory, true
}

// HasBlockUrlCategory returns a boolean if a field has been set.
func (o *SecurityRules) HasBlockUrlCategory() bool {
	if o != nil && !IsNil(o.BlockUrlCategory) {
		return true
	}

	return false
}

// SetBlockUrlCategory gets a reference to the given []string and assigns it to the BlockUrlCategory field.
func (o *SecurityRules) SetBlockUrlCategory(v []string) {
	o.BlockUrlCategory = v
}

// GetBlockWebApplication returns the BlockWebApplication field value if set, zero value otherwise.
func (o *SecurityRules) GetBlockWebApplication() []string {
	if o == nil || IsNil(o.BlockWebApplication) {
		var ret []string
		return ret
	}
	return o.BlockWebApplication
}

// GetBlockWebApplicationOk returns a tuple with the BlockWebApplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetBlockWebApplicationOk() ([]string, bool) {
	if o == nil || IsNil(o.BlockWebApplication) {
		return nil, false
	}
	return o.BlockWebApplication, true
}

// HasBlockWebApplication returns a boolean if a field has been set.
func (o *SecurityRules) HasBlockWebApplication() bool {
	if o != nil && !IsNil(o.BlockWebApplication) {
		return true
	}

	return false
}

// SetBlockWebApplication gets a reference to the given []string and assigns it to the BlockWebApplication field.
func (o *SecurityRules) SetBlockWebApplication(v []string) {
	o.BlockWebApplication = v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *SecurityRules) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *SecurityRules) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *SecurityRules) SetCategory(v []string) {
	o.Category = v
}

// GetDefaultProfileSettings returns the DefaultProfileSettings field value if set, zero value otherwise.
func (o *SecurityRules) GetDefaultProfileSettings() InternetRuleTypeDefaultProfileSettings {
	if o == nil || IsNil(o.DefaultProfileSettings) {
		var ret InternetRuleTypeDefaultProfileSettings
		return ret
	}
	return *o.DefaultProfileSettings
}

// GetDefaultProfileSettingsOk returns a tuple with the DefaultProfileSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDefaultProfileSettingsOk() (*InternetRuleTypeDefaultProfileSettings, bool) {
	if o == nil || IsNil(o.DefaultProfileSettings) {
		return nil, false
	}
	return o.DefaultProfileSettings, true
}

// HasDefaultProfileSettings returns a boolean if a field has been set.
func (o *SecurityRules) HasDefaultProfileSettings() bool {
	if o != nil && !IsNil(o.DefaultProfileSettings) {
		return true
	}

	return false
}

// SetDefaultProfileSettings gets a reference to the given InternetRuleTypeDefaultProfileSettings and assigns it to the DefaultProfileSettings field.
func (o *SecurityRules) SetDefaultProfileSettings(v InternetRuleTypeDefaultProfileSettings) {
	o.DefaultProfileSettings = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SecurityRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SecurityRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SecurityRules) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *SecurityRules) GetDestination() []string {
	if o == nil || IsNil(o.Destination) {
		var ret []string
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDestinationOk() ([]string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *SecurityRules) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []string and assigns it to the Destination field.
func (o *SecurityRules) SetDestination(v []string) {
	o.Destination = v
}

// GetDestinationHip returns the DestinationHip field value if set, zero value otherwise.
func (o *SecurityRules) GetDestinationHip() []string {
	if o == nil || IsNil(o.DestinationHip) {
		var ret []string
		return ret
	}
	return o.DestinationHip
}

// GetDestinationHipOk returns a tuple with the DestinationHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDestinationHipOk() ([]string, bool) {
	if o == nil || IsNil(o.DestinationHip) {
		return nil, false
	}
	return o.DestinationHip, true
}

// HasDestinationHip returns a boolean if a field has been set.
func (o *SecurityRules) HasDestinationHip() bool {
	if o != nil && !IsNil(o.DestinationHip) {
		return true
	}

	return false
}

// SetDestinationHip gets a reference to the given []string and assigns it to the DestinationHip field.
func (o *SecurityRules) SetDestinationHip(v []string) {
	o.DestinationHip = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *SecurityRules) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *SecurityRules) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *SecurityRules) SetDevice(v string) {
	o.Device = &v
}

// GetDevices returns the Devices field value if set, zero value otherwise.
func (o *SecurityRules) GetDevices() []string {
	if o == nil || IsNil(o.Devices) {
		var ret []string
		return ret
	}
	return o.Devices
}

// GetDevicesOk returns a tuple with the Devices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDevicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Devices) {
		return nil, false
	}
	return o.Devices, true
}

// HasDevices returns a boolean if a field has been set.
func (o *SecurityRules) HasDevices() bool {
	if o != nil && !IsNil(o.Devices) {
		return true
	}

	return false
}

// SetDevices gets a reference to the given []string and assigns it to the Devices field.
func (o *SecurityRules) SetDevices(v []string) {
	o.Devices = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SecurityRules) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SecurityRules) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SecurityRules) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *SecurityRules) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *SecurityRules) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *SecurityRules) SetFolder(v string) {
	o.Folder = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *SecurityRules) GetFrom() []string {
	if o == nil || IsNil(o.From) {
		var ret []string
		return ret
	}
	return o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetFromOk() ([]string, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *SecurityRules) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given []string and assigns it to the From field.
func (o *SecurityRules) SetFrom(v []string) {
	o.From = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *SecurityRules) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *SecurityRules) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *SecurityRules) SetId(v string) {
	o.Id = &v
}

// GetLogEnd returns the LogEnd field value if set, zero value otherwise.
func (o *SecurityRules) GetLogEnd() bool {
	if o == nil || IsNil(o.LogEnd) {
		var ret bool
		return ret
	}
	return *o.LogEnd
}

// GetLogEndOk returns a tuple with the LogEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetLogEndOk() (*bool, bool) {
	if o == nil || IsNil(o.LogEnd) {
		return nil, false
	}
	return o.LogEnd, true
}

// HasLogEnd returns a boolean if a field has been set.
func (o *SecurityRules) HasLogEnd() bool {
	if o != nil && !IsNil(o.LogEnd) {
		return true
	}

	return false
}

// SetLogEnd gets a reference to the given bool and assigns it to the LogEnd field.
func (o *SecurityRules) SetLogEnd(v bool) {
	o.LogEnd = &v
}

// GetLogSetting returns the LogSetting field value if set, zero value otherwise.
func (o *SecurityRules) GetLogSetting() string {
	if o == nil || IsNil(o.LogSetting) {
		var ret string
		return ret
	}
	return *o.LogSetting
}

// GetLogSettingOk returns a tuple with the LogSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetLogSettingOk() (*string, bool) {
	if o == nil || IsNil(o.LogSetting) {
		return nil, false
	}
	return o.LogSetting, true
}

// HasLogSetting returns a boolean if a field has been set.
func (o *SecurityRules) HasLogSetting() bool {
	if o != nil && !IsNil(o.LogSetting) {
		return true
	}

	return false
}

// SetLogSetting gets a reference to the given string and assigns it to the LogSetting field.
func (o *SecurityRules) SetLogSetting(v string) {
	o.LogSetting = &v
}

// GetLogSettings returns the LogSettings field value if set, zero value otherwise.
func (o *SecurityRules) GetLogSettings() InternetRuleTypeLogSettings {
	if o == nil || IsNil(o.LogSettings) {
		var ret InternetRuleTypeLogSettings
		return ret
	}
	return *o.LogSettings
}

// GetLogSettingsOk returns a tuple with the LogSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetLogSettingsOk() (*InternetRuleTypeLogSettings, bool) {
	if o == nil || IsNil(o.LogSettings) {
		return nil, false
	}
	return o.LogSettings, true
}

// HasLogSettings returns a boolean if a field has been set.
func (o *SecurityRules) HasLogSettings() bool {
	if o != nil && !IsNil(o.LogSettings) {
		return true
	}

	return false
}

// SetLogSettings gets a reference to the given InternetRuleTypeLogSettings and assigns it to the LogSettings field.
func (o *SecurityRules) SetLogSettings(v InternetRuleTypeLogSettings) {
	o.LogSettings = &v
}

// GetLogStart returns the LogStart field value if set, zero value otherwise.
func (o *SecurityRules) GetLogStart() bool {
	if o == nil || IsNil(o.LogStart) {
		var ret bool
		return ret
	}
	return *o.LogStart
}

// GetLogStartOk returns a tuple with the LogStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetLogStartOk() (*bool, bool) {
	if o == nil || IsNil(o.LogStart) {
		return nil, false
	}
	return o.LogStart, true
}

// HasLogStart returns a boolean if a field has been set.
func (o *SecurityRules) HasLogStart() bool {
	if o != nil && !IsNil(o.LogStart) {
		return true
	}

	return false
}

// SetLogStart gets a reference to the given bool and assigns it to the LogStart field.
func (o *SecurityRules) SetLogStart(v bool) {
	o.LogStart = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecurityRules) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecurityRules) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecurityRules) SetName(v string) {
	o.Name = &v
}

// GetNegateDestination returns the NegateDestination field value if set, zero value otherwise.
func (o *SecurityRules) GetNegateDestination() bool {
	if o == nil || IsNil(o.NegateDestination) {
		var ret bool
		return ret
	}
	return *o.NegateDestination
}

// GetNegateDestinationOk returns a tuple with the NegateDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetNegateDestinationOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateDestination) {
		return nil, false
	}
	return o.NegateDestination, true
}

// HasNegateDestination returns a boolean if a field has been set.
func (o *SecurityRules) HasNegateDestination() bool {
	if o != nil && !IsNil(o.NegateDestination) {
		return true
	}

	return false
}

// SetNegateDestination gets a reference to the given bool and assigns it to the NegateDestination field.
func (o *SecurityRules) SetNegateDestination(v bool) {
	o.NegateDestination = &v
}

// GetNegateSource returns the NegateSource field value if set, zero value otherwise.
func (o *SecurityRules) GetNegateSource() bool {
	if o == nil || IsNil(o.NegateSource) {
		var ret bool
		return ret
	}
	return *o.NegateSource
}

// GetNegateSourceOk returns a tuple with the NegateSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetNegateSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateSource) {
		return nil, false
	}
	return o.NegateSource, true
}

// HasNegateSource returns a boolean if a field has been set.
func (o *SecurityRules) HasNegateSource() bool {
	if o != nil && !IsNil(o.NegateSource) {
		return true
	}

	return false
}

// SetNegateSource gets a reference to the given bool and assigns it to the NegateSource field.
func (o *SecurityRules) SetNegateSource(v bool) {
	o.NegateSource = &v
}

// GetNegateUser returns the NegateUser field value if set, zero value otherwise.
func (o *SecurityRules) GetNegateUser() bool {
	if o == nil || IsNil(o.NegateUser) {
		var ret bool
		return ret
	}
	return *o.NegateUser
}

// GetNegateUserOk returns a tuple with the NegateUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetNegateUserOk() (*bool, bool) {
	if o == nil || IsNil(o.NegateUser) {
		return nil, false
	}
	return o.NegateUser, true
}

// HasNegateUser returns a boolean if a field has been set.
func (o *SecurityRules) HasNegateUser() bool {
	if o != nil && !IsNil(o.NegateUser) {
		return true
	}

	return false
}

// SetNegateUser gets a reference to the given bool and assigns it to the NegateUser field.
func (o *SecurityRules) SetNegateUser(v bool) {
	o.NegateUser = &v
}

// GetPolicyType returns the PolicyType field value if set, zero value otherwise.
func (o *SecurityRules) GetPolicyType() string {
	if o == nil || IsNil(o.PolicyType) {
		var ret string
		return ret
	}
	return *o.PolicyType
}

// GetPolicyTypeOk returns a tuple with the PolicyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetPolicyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PolicyType) {
		return nil, false
	}
	return o.PolicyType, true
}

// HasPolicyType returns a boolean if a field has been set.
func (o *SecurityRules) HasPolicyType() bool {
	if o != nil && !IsNil(o.PolicyType) {
		return true
	}

	return false
}

// SetPolicyType gets a reference to the given string and assigns it to the PolicyType field.
func (o *SecurityRules) SetPolicyType(v string) {
	o.PolicyType = &v
}

// GetProfileSetting returns the ProfileSetting field value if set, zero value otherwise.
func (o *SecurityRules) GetProfileSetting() SecurityRuleTypeProfileSetting {
	if o == nil || IsNil(o.ProfileSetting) {
		var ret SecurityRuleTypeProfileSetting
		return ret
	}
	return *o.ProfileSetting
}

// GetProfileSettingOk returns a tuple with the ProfileSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetProfileSettingOk() (*SecurityRuleTypeProfileSetting, bool) {
	if o == nil || IsNil(o.ProfileSetting) {
		return nil, false
	}
	return o.ProfileSetting, true
}

// HasProfileSetting returns a boolean if a field has been set.
func (o *SecurityRules) HasProfileSetting() bool {
	if o != nil && !IsNil(o.ProfileSetting) {
		return true
	}

	return false
}

// SetProfileSetting gets a reference to the given SecurityRuleTypeProfileSetting and assigns it to the ProfileSetting field.
func (o *SecurityRules) SetProfileSetting(v SecurityRuleTypeProfileSetting) {
	o.ProfileSetting = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *SecurityRules) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *SecurityRules) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *SecurityRules) SetSchedule(v string) {
	o.Schedule = &v
}

// GetSecuritySettings returns the SecuritySettings field value if set, zero value otherwise.
func (o *SecurityRules) GetSecuritySettings() InternetRuleTypeSecuritySettings {
	if o == nil || IsNil(o.SecuritySettings) {
		var ret InternetRuleTypeSecuritySettings
		return ret
	}
	return *o.SecuritySettings
}

// GetSecuritySettingsOk returns a tuple with the SecuritySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetSecuritySettingsOk() (*InternetRuleTypeSecuritySettings, bool) {
	if o == nil || IsNil(o.SecuritySettings) {
		return nil, false
	}
	return o.SecuritySettings, true
}

// HasSecuritySettings returns a boolean if a field has been set.
func (o *SecurityRules) HasSecuritySettings() bool {
	if o != nil && !IsNil(o.SecuritySettings) {
		return true
	}

	return false
}

// SetSecuritySettings gets a reference to the given InternetRuleTypeSecuritySettings and assigns it to the SecuritySettings field.
func (o *SecurityRules) SetSecuritySettings(v InternetRuleTypeSecuritySettings) {
	o.SecuritySettings = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *SecurityRules) GetService() []string {
	if o == nil || IsNil(o.Service) {
		var ret []string
		return ret
	}
	return o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetServiceOk() ([]string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *SecurityRules) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given []string and assigns it to the Service field.
func (o *SecurityRules) SetService(v []string) {
	o.Service = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *SecurityRules) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *SecurityRules) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *SecurityRules) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SecurityRules) GetSource() []string {
	if o == nil || IsNil(o.Source) {
		var ret []string
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetSourceOk() ([]string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SecurityRules) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []string and assigns it to the Source field.
func (o *SecurityRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceHip returns the SourceHip field value if set, zero value otherwise.
func (o *SecurityRules) GetSourceHip() []string {
	if o == nil || IsNil(o.SourceHip) {
		var ret []string
		return ret
	}
	return o.SourceHip
}

// GetSourceHipOk returns a tuple with the SourceHip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetSourceHipOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceHip) {
		return nil, false
	}
	return o.SourceHip, true
}

// HasSourceHip returns a boolean if a field has been set.
func (o *SecurityRules) HasSourceHip() bool {
	if o != nil && !IsNil(o.SourceHip) {
		return true
	}

	return false
}

// SetSourceHip gets a reference to the given []string and assigns it to the SourceHip field.
func (o *SecurityRules) SetSourceHip(v []string) {
	o.SourceHip = v
}

// GetSourceUser returns the SourceUser field value if set, zero value otherwise.
func (o *SecurityRules) GetSourceUser() []string {
	if o == nil || IsNil(o.SourceUser) {
		var ret []string
		return ret
	}
	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetSourceUserOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceUser) {
		return nil, false
	}
	return o.SourceUser, true
}

// HasSourceUser returns a boolean if a field has been set.
func (o *SecurityRules) HasSourceUser() bool {
	if o != nil && !IsNil(o.SourceUser) {
		return true
	}

	return false
}

// SetSourceUser gets a reference to the given []string and assigns it to the SourceUser field.
func (o *SecurityRules) SetSourceUser(v []string) {
	o.SourceUser = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *SecurityRules) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *SecurityRules) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *SecurityRules) SetTag(v []string) {
	o.Tag = v
}

// GetTenantRestrictions returns the TenantRestrictions field value if set, zero value otherwise.
func (o *SecurityRules) GetTenantRestrictions() []string {
	if o == nil || IsNil(o.TenantRestrictions) {
		var ret []string
		return ret
	}
	return o.TenantRestrictions
}

// GetTenantRestrictionsOk returns a tuple with the TenantRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetTenantRestrictionsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantRestrictions) {
		return nil, false
	}
	return o.TenantRestrictions, true
}

// HasTenantRestrictions returns a boolean if a field has been set.
func (o *SecurityRules) HasTenantRestrictions() bool {
	if o != nil && !IsNil(o.TenantRestrictions) {
		return true
	}

	return false
}

// SetTenantRestrictions gets a reference to the given []string and assigns it to the TenantRestrictions field.
func (o *SecurityRules) SetTenantRestrictions(v []string) {
	o.TenantRestrictions = v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *SecurityRules) GetTo() []string {
	if o == nil || IsNil(o.To) {
		var ret []string
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRules) GetToOk() ([]string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *SecurityRules) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []string and assigns it to the To field.
func (o *SecurityRules) SetTo(v []string) {
	o.To = v
}

func (o SecurityRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.AllowUrlCategory) {
		toSerialize["allow_url_category"] = o.AllowUrlCategory
	}
	if !IsNil(o.AllowWebApplication) {
		toSerialize["allow_web_application"] = o.AllowWebApplication
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.BlockUrlCategory) {
		toSerialize["block_url_category"] = o.BlockUrlCategory
	}
	if !IsNil(o.BlockWebApplication) {
		toSerialize["block_web_application"] = o.BlockWebApplication
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.DefaultProfileSettings) {
		toSerialize["default_profile_settings"] = o.DefaultProfileSettings
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.DestinationHip) {
		toSerialize["destination_hip"] = o.DestinationHip
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Devices) {
		toSerialize["devices"] = o.Devices
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LogEnd) {
		toSerialize["log_end"] = o.LogEnd
	}
	if !IsNil(o.LogSetting) {
		toSerialize["log_setting"] = o.LogSetting
	}
	if !IsNil(o.LogSettings) {
		toSerialize["log_settings"] = o.LogSettings
	}
	if !IsNil(o.LogStart) {
		toSerialize["log_start"] = o.LogStart
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NegateDestination) {
		toSerialize["negate_destination"] = o.NegateDestination
	}
	if !IsNil(o.NegateSource) {
		toSerialize["negate_source"] = o.NegateSource
	}
	if !IsNil(o.NegateUser) {
		toSerialize["negate_user"] = o.NegateUser
	}
	if !IsNil(o.PolicyType) {
		toSerialize["policy_type"] = o.PolicyType
	}
	if !IsNil(o.ProfileSetting) {
		toSerialize["profile_setting"] = o.ProfileSetting
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.SecuritySettings) {
		toSerialize["security_settings"] = o.SecuritySettings
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SourceHip) {
		toSerialize["source_hip"] = o.SourceHip
	}
	if !IsNil(o.SourceUser) {
		toSerialize["source_user"] = o.SourceUser
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.TenantRestrictions) {
		toSerialize["tenant_restrictions"] = o.TenantRestrictions
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityRules) UnmarshalJSON(data []byte) (err error) {
	varSecurityRules := _SecurityRules{}

	err = json.Unmarshal(data, &varSecurityRules)

	if err != nil {
		return err
	}

	*o = SecurityRules(varSecurityRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "allow_url_category")
		delete(additionalProperties, "allow_web_application")
		delete(additionalProperties, "application")
		delete(additionalProperties, "block_url_category")
		delete(additionalProperties, "block_web_application")
		delete(additionalProperties, "category")
		delete(additionalProperties, "default_profile_settings")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "destination_hip")
		delete(additionalProperties, "device")
		delete(additionalProperties, "devices")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "from")
		delete(additionalProperties, "id")
		delete(additionalProperties, "log_end")
		delete(additionalProperties, "log_setting")
		delete(additionalProperties, "log_settings")
		delete(additionalProperties, "log_start")
		delete(additionalProperties, "name")
		delete(additionalProperties, "negate_destination")
		delete(additionalProperties, "negate_source")
		delete(additionalProperties, "negate_user")
		delete(additionalProperties, "policy_type")
		delete(additionalProperties, "profile_setting")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "security_settings")
		delete(additionalProperties, "service")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_hip")
		delete(additionalProperties, "source_user")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "tenant_restrictions")
		delete(additionalProperties, "to")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityRules struct {
	value *SecurityRules
	isSet bool
}

func (v NullableSecurityRules) Get() *SecurityRules {
	return v.value
}

func (v *NullableSecurityRules) Set(val *SecurityRules) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityRules) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityRules(val *SecurityRules) *NullableSecurityRules {
	return &NullableSecurityRules{value: val, isSet: true}
}

func (v NullableSecurityRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
