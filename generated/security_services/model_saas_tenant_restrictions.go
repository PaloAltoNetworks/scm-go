/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the SaasTenantRestrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SaasTenantRestrictions{}

// SaasTenantRestrictions struct for SaasTenantRestrictions
type SaasTenantRestrictions struct {
	// Description associated with the tenant restriction (example - Microsoft 365 SaaS Security Restrictions, Dropbox SaaS Security Restrictions, YouTube Safe Search Restrictions, Google Apps SaaS Security Restrictions)
	Description *string `json:"description,omitempty"`
	// List of domains associated with tenant restrictions
	Domains []string `json:"domains,omitempty"`
	// List of headers associated with tenant restrictions
	Headers []SaasTenantRestrictionsHeadersInner `json:"headers,omitempty"`
	// Name of the tenant restriction (example - Microsoft 365, Dropbox, YouTube Safe Search, Google Apps)
	Name *string `json:"name,omitempty"`
	// List of EDL associated with tenant restrictions
	SaasEdl              []string `json:"saas_edl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SaasTenantRestrictions SaasTenantRestrictions

// NewSaasTenantRestrictions instantiates a new SaasTenantRestrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSaasTenantRestrictions() *SaasTenantRestrictions {
	this := SaasTenantRestrictions{}
	return &this
}

// NewSaasTenantRestrictionsWithDefaults instantiates a new SaasTenantRestrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSaasTenantRestrictionsWithDefaults() *SaasTenantRestrictions {
	this := SaasTenantRestrictions{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SaasTenantRestrictions) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasTenantRestrictions) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SaasTenantRestrictions) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SaasTenantRestrictions) SetDescription(v string) {
	o.Description = &v
}

// GetDomains returns the Domains field value if set, zero value otherwise.
func (o *SaasTenantRestrictions) GetDomains() []string {
	if o == nil || IsNil(o.Domains) {
		var ret []string
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasTenantRestrictions) GetDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.Domains) {
		return nil, false
	}
	return o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *SaasTenantRestrictions) HasDomains() bool {
	if o != nil && !IsNil(o.Domains) {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the Domains field.
func (o *SaasTenantRestrictions) SetDomains(v []string) {
	o.Domains = v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *SaasTenantRestrictions) GetHeaders() []SaasTenantRestrictionsHeadersInner {
	if o == nil || IsNil(o.Headers) {
		var ret []SaasTenantRestrictionsHeadersInner
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasTenantRestrictions) GetHeadersOk() ([]SaasTenantRestrictionsHeadersInner, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *SaasTenantRestrictions) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []SaasTenantRestrictionsHeadersInner and assigns it to the Headers field.
func (o *SaasTenantRestrictions) SetHeaders(v []SaasTenantRestrictionsHeadersInner) {
	o.Headers = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SaasTenantRestrictions) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasTenantRestrictions) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SaasTenantRestrictions) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SaasTenantRestrictions) SetName(v string) {
	o.Name = &v
}

// GetSaasEdl returns the SaasEdl field value if set, zero value otherwise.
func (o *SaasTenantRestrictions) GetSaasEdl() []string {
	if o == nil || IsNil(o.SaasEdl) {
		var ret []string
		return ret
	}
	return o.SaasEdl
}

// GetSaasEdlOk returns a tuple with the SaasEdl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SaasTenantRestrictions) GetSaasEdlOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasEdl) {
		return nil, false
	}
	return o.SaasEdl, true
}

// HasSaasEdl returns a boolean if a field has been set.
func (o *SaasTenantRestrictions) HasSaasEdl() bool {
	if o != nil && !IsNil(o.SaasEdl) {
		return true
	}

	return false
}

// SetSaasEdl gets a reference to the given []string and assigns it to the SaasEdl field.
func (o *SaasTenantRestrictions) SetSaasEdl(v []string) {
	o.SaasEdl = v
}

func (o SaasTenantRestrictions) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SaasTenantRestrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Domains) {
		toSerialize["domains"] = o.Domains
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SaasEdl) {
		toSerialize["saas_edl"] = o.SaasEdl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SaasTenantRestrictions) UnmarshalJSON(data []byte) (err error) {
	varSaasTenantRestrictions := _SaasTenantRestrictions{}

	err = json.Unmarshal(data, &varSaasTenantRestrictions)

	if err != nil {
		return err
	}

	*o = SaasTenantRestrictions(varSaasTenantRestrictions)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "domains")
		delete(additionalProperties, "headers")
		delete(additionalProperties, "name")
		delete(additionalProperties, "saas_edl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSaasTenantRestrictions struct {
	value *SaasTenantRestrictions
	isSet bool
}

func (v NullableSaasTenantRestrictions) Get() *SaasTenantRestrictions {
	return v.value
}

func (v *NullableSaasTenantRestrictions) Set(val *SaasTenantRestrictions) {
	v.value = val
	v.isSet = true
}

func (v NullableSaasTenantRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullableSaasTenantRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSaasTenantRestrictions(val *SaasTenantRestrictions) *NullableSaasTenantRestrictions {
	return &NullableSaasTenantRestrictions{value: val, isSet: true}
}

func (v NullableSaasTenantRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSaasTenantRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
