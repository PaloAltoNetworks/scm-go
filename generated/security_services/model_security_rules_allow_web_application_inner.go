/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
)

// checks if the SecurityRulesAllowWebApplicationInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityRulesAllowWebApplicationInner{}

// SecurityRulesAllowWebApplicationInner struct for SecurityRulesAllowWebApplicationInner
type SecurityRulesAllowWebApplicationInner struct {
	ApplicationFunction   []string                                                    `json:"application_function,omitempty"`
	Dlp                   *string                                                     `json:"dlp,omitempty"`
	FileControl           *SecurityRulesAllowUrlCategoryInnerFileControl              `json:"file_control,omitempty"`
	Name                  *string                                                     `json:"name,omitempty"`
	SaasEnterpriseControl *SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl `json:"saas_enterprise_control,omitempty"`
	SaasTenantList        []string                                                    `json:"saas_tenant_list,omitempty"`
	SaasUserList          []string                                                    `json:"saas_user_list,omitempty"`
	TenantControl         *SecurityRulesAllowWebApplicationInnerTenantControl         `json:"tenant_control,omitempty"`
	Type                  *string                                                     `json:"type,omitempty"`
	AdditionalProperties  map[string]interface{}
}

type _SecurityRulesAllowWebApplicationInner SecurityRulesAllowWebApplicationInner

// NewSecurityRulesAllowWebApplicationInner instantiates a new SecurityRulesAllowWebApplicationInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityRulesAllowWebApplicationInner() *SecurityRulesAllowWebApplicationInner {
	this := SecurityRulesAllowWebApplicationInner{}
	return &this
}

// NewSecurityRulesAllowWebApplicationInnerWithDefaults instantiates a new SecurityRulesAllowWebApplicationInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityRulesAllowWebApplicationInnerWithDefaults() *SecurityRulesAllowWebApplicationInner {
	this := SecurityRulesAllowWebApplicationInner{}
	return &this
}

// GetApplicationFunction returns the ApplicationFunction field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetApplicationFunction() []string {
	if o == nil || IsNil(o.ApplicationFunction) {
		var ret []string
		return ret
	}
	return o.ApplicationFunction
}

// GetApplicationFunctionOk returns a tuple with the ApplicationFunction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetApplicationFunctionOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationFunction) {
		return nil, false
	}
	return o.ApplicationFunction, true
}

// HasApplicationFunction returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasApplicationFunction() bool {
	if o != nil && !IsNil(o.ApplicationFunction) {
		return true
	}

	return false
}

// SetApplicationFunction gets a reference to the given []string and assigns it to the ApplicationFunction field.
func (o *SecurityRulesAllowWebApplicationInner) SetApplicationFunction(v []string) {
	o.ApplicationFunction = v
}

// GetDlp returns the Dlp field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetDlp() string {
	if o == nil || IsNil(o.Dlp) {
		var ret string
		return ret
	}
	return *o.Dlp
}

// GetDlpOk returns a tuple with the Dlp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetDlpOk() (*string, bool) {
	if o == nil || IsNil(o.Dlp) {
		return nil, false
	}
	return o.Dlp, true
}

// HasDlp returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasDlp() bool {
	if o != nil && !IsNil(o.Dlp) {
		return true
	}

	return false
}

// SetDlp gets a reference to the given string and assigns it to the Dlp field.
func (o *SecurityRulesAllowWebApplicationInner) SetDlp(v string) {
	o.Dlp = &v
}

// GetFileControl returns the FileControl field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetFileControl() SecurityRulesAllowUrlCategoryInnerFileControl {
	if o == nil || IsNil(o.FileControl) {
		var ret SecurityRulesAllowUrlCategoryInnerFileControl
		return ret
	}
	return *o.FileControl
}

// GetFileControlOk returns a tuple with the FileControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetFileControlOk() (*SecurityRulesAllowUrlCategoryInnerFileControl, bool) {
	if o == nil || IsNil(o.FileControl) {
		return nil, false
	}
	return o.FileControl, true
}

// HasFileControl returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasFileControl() bool {
	if o != nil && !IsNil(o.FileControl) {
		return true
	}

	return false
}

// SetFileControl gets a reference to the given SecurityRulesAllowUrlCategoryInnerFileControl and assigns it to the FileControl field.
func (o *SecurityRulesAllowWebApplicationInner) SetFileControl(v SecurityRulesAllowUrlCategoryInnerFileControl) {
	o.FileControl = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SecurityRulesAllowWebApplicationInner) SetName(v string) {
	o.Name = &v
}

// GetSaasEnterpriseControl returns the SaasEnterpriseControl field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasEnterpriseControl() SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl {
	if o == nil || IsNil(o.SaasEnterpriseControl) {
		var ret SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl
		return ret
	}
	return *o.SaasEnterpriseControl
}

// GetSaasEnterpriseControlOk returns a tuple with the SaasEnterpriseControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasEnterpriseControlOk() (*SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl, bool) {
	if o == nil || IsNil(o.SaasEnterpriseControl) {
		return nil, false
	}
	return o.SaasEnterpriseControl, true
}

// HasSaasEnterpriseControl returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasSaasEnterpriseControl() bool {
	if o != nil && !IsNil(o.SaasEnterpriseControl) {
		return true
	}

	return false
}

// SetSaasEnterpriseControl gets a reference to the given SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl and assigns it to the SaasEnterpriseControl field.
func (o *SecurityRulesAllowWebApplicationInner) SetSaasEnterpriseControl(v SecurityRulesAllowWebApplicationInnerSaasEnterpriseControl) {
	o.SaasEnterpriseControl = &v
}

// GetSaasTenantList returns the SaasTenantList field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasTenantList() []string {
	if o == nil || IsNil(o.SaasTenantList) {
		var ret []string
		return ret
	}
	return o.SaasTenantList
}

// GetSaasTenantListOk returns a tuple with the SaasTenantList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasTenantListOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasTenantList) {
		return nil, false
	}
	return o.SaasTenantList, true
}

// HasSaasTenantList returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasSaasTenantList() bool {
	if o != nil && !IsNil(o.SaasTenantList) {
		return true
	}

	return false
}

// SetSaasTenantList gets a reference to the given []string and assigns it to the SaasTenantList field.
func (o *SecurityRulesAllowWebApplicationInner) SetSaasTenantList(v []string) {
	o.SaasTenantList = v
}

// GetSaasUserList returns the SaasUserList field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasUserList() []string {
	if o == nil || IsNil(o.SaasUserList) {
		var ret []string
		return ret
	}
	return o.SaasUserList
}

// GetSaasUserListOk returns a tuple with the SaasUserList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetSaasUserListOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasUserList) {
		return nil, false
	}
	return o.SaasUserList, true
}

// HasSaasUserList returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasSaasUserList() bool {
	if o != nil && !IsNil(o.SaasUserList) {
		return true
	}

	return false
}

// SetSaasUserList gets a reference to the given []string and assigns it to the SaasUserList field.
func (o *SecurityRulesAllowWebApplicationInner) SetSaasUserList(v []string) {
	o.SaasUserList = v
}

// GetTenantControl returns the TenantControl field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetTenantControl() SecurityRulesAllowWebApplicationInnerTenantControl {
	if o == nil || IsNil(o.TenantControl) {
		var ret SecurityRulesAllowWebApplicationInnerTenantControl
		return ret
	}
	return *o.TenantControl
}

// GetTenantControlOk returns a tuple with the TenantControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetTenantControlOk() (*SecurityRulesAllowWebApplicationInnerTenantControl, bool) {
	if o == nil || IsNil(o.TenantControl) {
		return nil, false
	}
	return o.TenantControl, true
}

// HasTenantControl returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasTenantControl() bool {
	if o != nil && !IsNil(o.TenantControl) {
		return true
	}

	return false
}

// SetTenantControl gets a reference to the given SecurityRulesAllowWebApplicationInnerTenantControl and assigns it to the TenantControl field.
func (o *SecurityRulesAllowWebApplicationInner) SetTenantControl(v SecurityRulesAllowWebApplicationInnerTenantControl) {
	o.TenantControl = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *SecurityRulesAllowWebApplicationInner) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityRulesAllowWebApplicationInner) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *SecurityRulesAllowWebApplicationInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *SecurityRulesAllowWebApplicationInner) SetType(v string) {
	o.Type = &v
}

func (o SecurityRulesAllowWebApplicationInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityRulesAllowWebApplicationInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationFunction) {
		toSerialize["application_function"] = o.ApplicationFunction
	}
	if !IsNil(o.Dlp) {
		toSerialize["dlp"] = o.Dlp
	}
	if !IsNil(o.FileControl) {
		toSerialize["file_control"] = o.FileControl
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SaasEnterpriseControl) {
		toSerialize["saas_enterprise_control"] = o.SaasEnterpriseControl
	}
	if !IsNil(o.SaasTenantList) {
		toSerialize["saas_tenant_list"] = o.SaasTenantList
	}
	if !IsNil(o.SaasUserList) {
		toSerialize["saas_user_list"] = o.SaasUserList
	}
	if !IsNil(o.TenantControl) {
		toSerialize["tenant_control"] = o.TenantControl
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SecurityRulesAllowWebApplicationInner) UnmarshalJSON(data []byte) (err error) {
	varSecurityRulesAllowWebApplicationInner := _SecurityRulesAllowWebApplicationInner{}

	err = json.Unmarshal(data, &varSecurityRulesAllowWebApplicationInner)

	if err != nil {
		return err
	}

	*o = SecurityRulesAllowWebApplicationInner(varSecurityRulesAllowWebApplicationInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "application_function")
		delete(additionalProperties, "dlp")
		delete(additionalProperties, "file_control")
		delete(additionalProperties, "name")
		delete(additionalProperties, "saas_enterprise_control")
		delete(additionalProperties, "saas_tenant_list")
		delete(additionalProperties, "saas_user_list")
		delete(additionalProperties, "tenant_control")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSecurityRulesAllowWebApplicationInner struct {
	value *SecurityRulesAllowWebApplicationInner
	isSet bool
}

func (v NullableSecurityRulesAllowWebApplicationInner) Get() *SecurityRulesAllowWebApplicationInner {
	return v.value
}

func (v *NullableSecurityRulesAllowWebApplicationInner) Set(val *SecurityRulesAllowWebApplicationInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityRulesAllowWebApplicationInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityRulesAllowWebApplicationInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityRulesAllowWebApplicationInner(val *SecurityRulesAllowWebApplicationInner) *NullableSecurityRulesAllowWebApplicationInner {
	return &NullableSecurityRulesAllowWebApplicationInner{value: val, isSet: true}
}

func (v NullableSecurityRulesAllowWebApplicationInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityRulesAllowWebApplicationInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
