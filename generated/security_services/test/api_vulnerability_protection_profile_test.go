/*
 * Security Services Testing
 *
 * VulnerabilityProtectionProfilesAPIService
 */

package security_services

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/paloaltonetworks/scm-go/common"
	"github.com/paloaltonetworks/scm-go/generated/security_services"
)

// NOTE: This file assumes the existence of the following types:
// - VulnerabilityProtectionProfilesRulesInner
// - VulnerabilityProtectionProfilesThreatExceptionInner
// - SetupSecuritySvcTestClient(t *testing.T) *security_services.APIClient
// - handleAPIError(err error)
//
// These dependencies are typically found in the surrounding test suite and common utility files.

// Test_security_services_VulnerabilityProtectionProfilesAPIService_Create tests the creation of a Vulnerability Protection Profile.
func Test_security_services_VulnerabilityProtectionProfilesAPIService_Create(t *testing.T) {
	client := SetupSecuritySvcTestClient(t)
	createdProfileName := "test-vuln-prot-create-" + common.GenerateRandomString(6)

	// --- Define Rules ---
	testRules := []security_services.VulnerabilityProtectionProfilesRulesInner{
		{
			Name: common.StringPtr("rule_one"),
			Action: &security_services.VulnerabilityProtectionProfilesRulesInnerAction{
				Allow: map[string]interface{}{},
			},
			PacketCapture: common.StringPtr("extended-capture"),
			Severity:      []string{"informational"},
			Category:      common.StringPtr("scan"),
			Cve:           []string{"N/A"},
			Host:          common.StringPtr("client"),
			VendorId:      []string{"Match Any Vendor"},
			ThreatName:    common.StringPtr("30000"),
		},
		{
			Name: common.StringPtr("rule_two"),
			Action: &security_services.VulnerabilityProtectionProfilesRulesInnerAction{
				Allow: map[string]interface{}{},
			},
			PacketCapture: common.StringPtr("single-packet"),
			Severity:      []string{"medium"},
			Category:      common.StringPtr("info-leak"),
			Cve:           []string{"Match Any CVE"},
			Host:          common.StringPtr("server"),
			VendorId:      []string{"MS08-037"},
			ThreatName:    common.StringPtr("OpenSSL Threat"),
		},
		{
			Name: common.StringPtr("rule_three"),
			Action: &security_services.VulnerabilityProtectionProfilesRulesInnerAction{
				Allow: map[string]interface{}{},
			},
			PacketCapture: common.StringPtr("disable"),
			Severity:      []string{"critical", "high"},
			Category:      common.StringPtr("overflow"),
			Cve:           []string{"CVE-2008-1147"},
			Host:          common.StringPtr("any"),
			VendorId:      []string{"Match Any Vendor"},
			ThreatName:    common.StringPtr("any"),
		},
	}

	// --- Define Threat Exception ---
	testThreatException := []security_services.VulnerabilityProtectionProfilesThreatExceptionInner{
		{
			Name: common.StringPtr("12345"),
			Action: &security_services.VulnerabilityProtectionProfilesThreatExceptionInnerAction{
				Allow: map[string]interface{}{},
			},
			ExemptIp: []security_services.VulnerabilityProtectionProfilesThreatExceptionInnerExemptIpInner{
				{Name: "192.14.3.100"},
				{Name: "10.8.49.200"},
			},
			Notes:         common.StringPtr("test threat exception"),
			PacketCapture: common.StringPtr("disable"),
			TimeAttribute: &security_services.VulnerabilityProtectionProfilesThreatExceptionInnerTimeAttribute{
				Interval:  common.Int32Ptr(3600),
				Threshold: common.Int32Ptr(24000),
				TrackBy:   common.StringPtr("source"),
			},
		},
	}

	// Define a Vulnerability Protection Profile
	profile := security_services.VulnerabilityProtectionProfiles{
		Folder:          common.StringPtr("Shared"),
		Name:            createdProfileName,
		Description:     common.StringPtr("Test Vulnerability Protection Profile for create API"),
		Rules:           testRules,
		ThreatException: testThreatException,
	}

	fmt.Printf("Creating Vulnerability Protection Profile with name: %s\n", profile.Name)
	req := client.VulnerabilityProtectionProfilesAPI.CreateVulnerabilityProtectionProfiles(context.Background()).VulnerabilityProtectionProfiles(profile)
	res, httpRes, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}

	require.NoError(t, err, "Failed to create Vulnerability Protection Profile")
	assert.Equal(t, 201, httpRes.StatusCode, "Expected 201 Created status")
	require.NotNil(t, res, "Response should not be nil")
	assert.Equal(t, createdProfileName, res.Name, "Created profile name should match")
	createdProfileID := *res.Id

	defer func() {
		t.Logf("Cleaning up Vulnerability Protection Profile with ID: %s", createdProfileID)
		_, errDel := client.VulnerabilityProtectionProfilesAPI.DeleteVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
		require.NoError(t, errDel, "Failed to delete Vulnerability Protection Profile during cleanup")
	}()

	t.Logf("Successfully created Vulnerability Protection Profile: %s with ID: %s", profile.Name, createdProfileID)
	assert.Equal(t, "Shared", *res.Folder, "Folder should match")
	assert.Equal(t, "Test Vulnerability Protection Profile for create API", *res.Description, "Description should match")
}

// Test_security_services_VulnerabilityProtectionProfilesAPIService_GetByID tests retrieving a Vulnerability Protection Profile by its ID.
func Test_security_services_VulnerabilityProtectionProfilesAPIService_GetByID(t *testing.T) {
	client := SetupSecuritySvcTestClient(t)
	profileName := "test-vuln-prot-get-" + common.GenerateRandomString(6)
	profile := security_services.VulnerabilityProtectionProfiles{
		Folder:      common.StringPtr("Shared"),
		Name:        profileName,
		Description: common.StringPtr("Test Vulnerability Protection Profile for get API"),
	}

	createRes, _, err := client.VulnerabilityProtectionProfilesAPI.CreateVulnerabilityProtectionProfiles(context.Background()).VulnerabilityProtectionProfiles(profile).Execute()
	require.NoError(t, err, "Failed to create Vulnerability Protection Profile for get test")
	createdProfileID := *createRes.Id
	require.NotEmpty(t, createdProfileID, "Created profile ID should not be empty")

	defer func() {
		t.Logf("Cleaning up Vulnerability Protection Profile with ID: %s", createdProfileID)
		_, errDel := client.VulnerabilityProtectionProfilesAPI.DeleteVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
		require.NoError(t, errDel, "Failed to delete Vulnerability Protection Profile during cleanup")
	}()

	getRes, httpResGet, errGet := client.VulnerabilityProtectionProfilesAPI.GetVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
	require.NoError(t, errGet, "Failed to get Vulnerability Protection Profile by ID")
	assert.Equal(t, 200, httpResGet.StatusCode, "Expected 200 OK status")
	require.NotNil(t, getRes, "Get response should not be nil")
	assert.Equal(t, profileName, getRes.Name, "Profile name should match")
}

// Test_security_services_VulnerabilityProtectionProfilesAPIService_Update tests updating an existing Vulnerability Protection Profile.
func Test_security_services_VulnerabilityProtectionProfilesAPIService_Update(t *testing.T) {
	client := SetupSecuritySvcTestClient(t)
	profileName := "test-vuln-prot-update-" + common.GenerateRandomString(6)
	profile := security_services.VulnerabilityProtectionProfiles{
		Folder: common.StringPtr("Shared"),
		Name:   profileName,
	}

	createRes, _, err := client.VulnerabilityProtectionProfilesAPI.CreateVulnerabilityProtectionProfiles(context.Background()).VulnerabilityProtectionProfiles(profile).Execute()
	require.NoError(t, err, "Failed to create Vulnerability Protection Profile for update test")
	createdProfileID := *createRes.Id
	require.NotEmpty(t, createdProfileID, "Created profile ID should not be empty")

	defer func() {
		t.Logf("Cleaning up Vulnerability Protection Profile with ID: %s", createdProfileID)
		_, errDel := client.VulnerabilityProtectionProfilesAPI.DeleteVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
		require.NoError(t, errDel, "Failed to delete Vulnerability Protection Profile during cleanup")
	}()

	updatedDescription := "Updated vulnerability profile description"
	updatedProfile := security_services.VulnerabilityProtectionProfiles{
		Name:        profileName,
		Description: common.StringPtr(updatedDescription),
		// Note: In a real-world scenario, you would modify Rules or ThreatException here.
	}

	updateRes, httpResUpdate, errUpdate := client.VulnerabilityProtectionProfilesAPI.UpdateVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).VulnerabilityProtectionProfiles(updatedProfile).Execute()
	require.NoError(t, errUpdate, "Failed to update Vulnerability Protection Profile")
	assert.Equal(t, 200, httpResUpdate.StatusCode, "Expected 200 OK status")
	require.NotNil(t, updateRes, "Update response should not be nil")
	assert.Equal(t, updatedDescription, *updateRes.Description, "Description should be updated")
}

// Test_security_services_VulnerabilityProtectionProfilesAPIService_List tests listing Vulnerability Protection Profiles.
func Test_security_services_VulnerabilityProtectionProfilesAPIService_List(t *testing.T) {
	client := SetupSecuritySvcTestClient(t)
	profileName := "test-vuln-prot-list-" + common.GenerateRandomString(6)
	profile := security_services.VulnerabilityProtectionProfiles{
		Folder: common.StringPtr("Shared"),
		Name:   profileName,
	}

	createRes, _, err := client.VulnerabilityProtectionProfilesAPI.CreateVulnerabilityProtectionProfiles(context.Background()).VulnerabilityProtectionProfiles(profile).Execute()
	require.NoError(t, err, "Failed to create Vulnerability Protection Profile for list test")
	createdProfileID := *createRes.Id
	require.NotEmpty(t, createdProfileID, "Created profile ID should not be empty")

	defer func() {
		t.Logf("Cleaning up Vulnerability Protection Profile with ID: %s", createdProfileID)
		_, errDel := client.VulnerabilityProtectionProfilesAPI.DeleteVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
		require.NoError(t, errDel, "Failed to delete Vulnerability Protection Profile during cleanup")
	}()

	listRes, httpResList, errList := client.VulnerabilityProtectionProfilesAPI.ListVulnerabilityProtectionProfiles(context.Background()).Folder("Shared").Limit(10000).Execute()
	require.NoError(t, errList, "Failed to list Vulnerability Protection Profiles")
	assert.Equal(t, 200, httpResList.StatusCode, "Expected 200 OK status")
	require.NotNil(t, listRes, "List response should not be nil")

	foundObject := false
	for _, p := range listRes.Data {
		if p.Name != "" && p.Name == profileName {
			foundObject = true
			break
		}
	}
	assert.True(t, foundObject, "Created Vulnerability Protection Profile should be found in the list")
}

// Test_security_services_VulnerabilityProtectionProfilesAPIService_DeleteByID tests deleting a Vulnerability Protection Profile by its ID.
func Test_security_services_VulnerabilityProtectionProfilesAPIService_DeleteByID(t *testing.T) {
	client := SetupSecuritySvcTestClient(t)
	profileName := "test-vuln-prot-delete-" + common.GenerateRandomString(6)
	profile := security_services.VulnerabilityProtectionProfiles{
		Folder: common.StringPtr("Shared"),
		Name:   profileName,
	}

	createRes, _, err := client.VulnerabilityProtectionProfilesAPI.CreateVulnerabilityProtectionProfiles(context.Background()).VulnerabilityProtectionProfiles(profile).Execute()
	require.NoError(t, err, "Failed to create Vulnerability Protection Profile for delete test")
	createdProfileID := *createRes.Id
	require.NotEmpty(t, createdProfileID, "Created profile ID should not be empty")

	httpResDel, errDel := client.VulnerabilityProtectionProfilesAPI.DeleteVulnerabilityProtectionProfilesByID(context.Background(), createdProfileID).Execute()
	require.NoError(t, errDel, "Failed to delete Vulnerability Protection Profile")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status")
}
