/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DosProtectionProfilesFloodTcpSyn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DosProtectionProfilesFloodTcpSyn{}

// DosProtectionProfilesFloodTcpSyn struct for DosProtectionProfilesFloodTcpSyn
type DosProtectionProfilesFloodTcpSyn struct {
	Enable               bool                                        `json:"enable"`
	Red                  *DosProtectionProfilesFloodIcmpRed          `json:"red,omitempty"`
	SynCookies           *DosProtectionProfilesFloodTcpSynSynCookies `json:"syn-cookies,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DosProtectionProfilesFloodTcpSyn DosProtectionProfilesFloodTcpSyn

// NewDosProtectionProfilesFloodTcpSyn instantiates a new DosProtectionProfilesFloodTcpSyn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDosProtectionProfilesFloodTcpSyn(enable bool) *DosProtectionProfilesFloodTcpSyn {
	this := DosProtectionProfilesFloodTcpSyn{}
	this.Enable = enable
	return &this
}

// NewDosProtectionProfilesFloodTcpSynWithDefaults instantiates a new DosProtectionProfilesFloodTcpSyn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDosProtectionProfilesFloodTcpSynWithDefaults() *DosProtectionProfilesFloodTcpSyn {
	this := DosProtectionProfilesFloodTcpSyn{}
	var enable bool = false
	this.Enable = enable
	return &this
}

// GetEnable returns the Enable field value
func (o *DosProtectionProfilesFloodTcpSyn) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *DosProtectionProfilesFloodTcpSyn) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *DosProtectionProfilesFloodTcpSyn) SetEnable(v bool) {
	o.Enable = v
}

// GetRed returns the Red field value if set, zero value otherwise.
func (o *DosProtectionProfilesFloodTcpSyn) GetRed() DosProtectionProfilesFloodIcmpRed {
	if o == nil || IsNil(o.Red) {
		var ret DosProtectionProfilesFloodIcmpRed
		return ret
	}
	return *o.Red
}

// GetRedOk returns a tuple with the Red field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosProtectionProfilesFloodTcpSyn) GetRedOk() (*DosProtectionProfilesFloodIcmpRed, bool) {
	if o == nil || IsNil(o.Red) {
		return nil, false
	}
	return o.Red, true
}

// HasRed returns a boolean if a field has been set.
func (o *DosProtectionProfilesFloodTcpSyn) HasRed() bool {
	if o != nil && !IsNil(o.Red) {
		return true
	}

	return false
}

// SetRed gets a reference to the given DosProtectionProfilesFloodIcmpRed and assigns it to the Red field.
func (o *DosProtectionProfilesFloodTcpSyn) SetRed(v DosProtectionProfilesFloodIcmpRed) {
	o.Red = &v
}

// GetSynCookies returns the SynCookies field value if set, zero value otherwise.
func (o *DosProtectionProfilesFloodTcpSyn) GetSynCookies() DosProtectionProfilesFloodTcpSynSynCookies {
	if o == nil || IsNil(o.SynCookies) {
		var ret DosProtectionProfilesFloodTcpSynSynCookies
		return ret
	}
	return *o.SynCookies
}

// GetSynCookiesOk returns a tuple with the SynCookies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DosProtectionProfilesFloodTcpSyn) GetSynCookiesOk() (*DosProtectionProfilesFloodTcpSynSynCookies, bool) {
	if o == nil || IsNil(o.SynCookies) {
		return nil, false
	}
	return o.SynCookies, true
}

// HasSynCookies returns a boolean if a field has been set.
func (o *DosProtectionProfilesFloodTcpSyn) HasSynCookies() bool {
	if o != nil && !IsNil(o.SynCookies) {
		return true
	}

	return false
}

// SetSynCookies gets a reference to the given DosProtectionProfilesFloodTcpSynSynCookies and assigns it to the SynCookies field.
func (o *DosProtectionProfilesFloodTcpSyn) SetSynCookies(v DosProtectionProfilesFloodTcpSynSynCookies) {
	o.SynCookies = &v
}

func (o DosProtectionProfilesFloodTcpSyn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DosProtectionProfilesFloodTcpSyn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enable"] = o.Enable
	if !IsNil(o.Red) {
		toSerialize["red"] = o.Red
	}
	if !IsNil(o.SynCookies) {
		toSerialize["syn-cookies"] = o.SynCookies
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DosProtectionProfilesFloodTcpSyn) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDosProtectionProfilesFloodTcpSyn := _DosProtectionProfilesFloodTcpSyn{}

	err = json.Unmarshal(data, &varDosProtectionProfilesFloodTcpSyn)

	if err != nil {
		return err
	}

	*o = DosProtectionProfilesFloodTcpSyn(varDosProtectionProfilesFloodTcpSyn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable")
		delete(additionalProperties, "red")
		delete(additionalProperties, "syn-cookies")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDosProtectionProfilesFloodTcpSyn struct {
	value *DosProtectionProfilesFloodTcpSyn
	isSet bool
}

func (v NullableDosProtectionProfilesFloodTcpSyn) Get() *DosProtectionProfilesFloodTcpSyn {
	return v.value
}

func (v *NullableDosProtectionProfilesFloodTcpSyn) Set(val *DosProtectionProfilesFloodTcpSyn) {
	v.value = val
	v.isSet = true
}

func (v NullableDosProtectionProfilesFloodTcpSyn) IsSet() bool {
	return v.isSet
}

func (v *NullableDosProtectionProfilesFloodTcpSyn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDosProtectionProfilesFloodTcpSyn(val *DosProtectionProfilesFloodTcpSyn) *NullableDosProtectionProfilesFloodTcpSyn {
	return &NullableDosProtectionProfilesFloodTcpSyn{value: val, isSet: true}
}

func (v NullableDosProtectionProfilesFloodTcpSyn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDosProtectionProfilesFloodTcpSyn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
