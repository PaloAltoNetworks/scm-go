/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the AntiSpywareSignatures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AntiSpywareSignatures{}

// AntiSpywareSignatures struct for AntiSpywareSignatures
type AntiSpywareSignatures struct {
	Bugtraq       []string                            `json:"bugtraq,omitempty"`
	Comment       *string                             `json:"comment,omitempty"`
	Cve           []string                            `json:"cve,omitempty"`
	DefaultAction *AntiSpywareSignaturesDefaultAction `json:"default_action,omitempty"`
	// The device in which the resource is defined
	Device    *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	Direction *string `json:"direction,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id        string                          `json:"id"`
	Reference []string                        `json:"reference,omitempty"`
	Severity  *string                         `json:"severity,omitempty"`
	Signature *AntiSpywareSignaturesSignature `json:"signature,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// threat id range <15000-18000> and <6900001-7000000>
	ThreatId             int32    `json:"threat_id"`
	Threatname           string   `json:"threatname"`
	Vendor               []string `json:"vendor,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AntiSpywareSignatures AntiSpywareSignatures

// NewAntiSpywareSignatures instantiates a new AntiSpywareSignatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAntiSpywareSignatures(id string, threatId int32, threatname string) *AntiSpywareSignatures {
	this := AntiSpywareSignatures{}
	this.Id = id
	this.ThreatId = threatId
	this.Threatname = threatname
	return &this
}

// NewAntiSpywareSignaturesWithDefaults instantiates a new AntiSpywareSignatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAntiSpywareSignaturesWithDefaults() *AntiSpywareSignatures {
	this := AntiSpywareSignatures{}
	return &this
}

// GetBugtraq returns the Bugtraq field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetBugtraq() []string {
	if o == nil || IsNil(o.Bugtraq) {
		var ret []string
		return ret
	}
	return o.Bugtraq
}

// GetBugtraqOk returns a tuple with the Bugtraq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetBugtraqOk() ([]string, bool) {
	if o == nil || IsNil(o.Bugtraq) {
		return nil, false
	}
	return o.Bugtraq, true
}

// HasBugtraq returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasBugtraq() bool {
	if o != nil && !IsNil(o.Bugtraq) {
		return true
	}

	return false
}

// SetBugtraq gets a reference to the given []string and assigns it to the Bugtraq field.
func (o *AntiSpywareSignatures) SetBugtraq(v []string) {
	o.Bugtraq = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *AntiSpywareSignatures) SetComment(v string) {
	o.Comment = &v
}

// GetCve returns the Cve field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetCve() []string {
	if o == nil || IsNil(o.Cve) {
		var ret []string
		return ret
	}
	return o.Cve
}

// GetCveOk returns a tuple with the Cve field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetCveOk() ([]string, bool) {
	if o == nil || IsNil(o.Cve) {
		return nil, false
	}
	return o.Cve, true
}

// HasCve returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasCve() bool {
	if o != nil && !IsNil(o.Cve) {
		return true
	}

	return false
}

// SetCve gets a reference to the given []string and assigns it to the Cve field.
func (o *AntiSpywareSignatures) SetCve(v []string) {
	o.Cve = v
}

// GetDefaultAction returns the DefaultAction field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetDefaultAction() AntiSpywareSignaturesDefaultAction {
	if o == nil || IsNil(o.DefaultAction) {
		var ret AntiSpywareSignaturesDefaultAction
		return ret
	}
	return *o.DefaultAction
}

// GetDefaultActionOk returns a tuple with the DefaultAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetDefaultActionOk() (*AntiSpywareSignaturesDefaultAction, bool) {
	if o == nil || IsNil(o.DefaultAction) {
		return nil, false
	}
	return o.DefaultAction, true
}

// HasDefaultAction returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasDefaultAction() bool {
	if o != nil && !IsNil(o.DefaultAction) {
		return true
	}

	return false
}

// SetDefaultAction gets a reference to the given AntiSpywareSignaturesDefaultAction and assigns it to the DefaultAction field.
func (o *AntiSpywareSignatures) SetDefaultAction(v AntiSpywareSignaturesDefaultAction) {
	o.DefaultAction = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *AntiSpywareSignatures) SetDevice(v string) {
	o.Device = &v
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *AntiSpywareSignatures) SetDirection(v string) {
	o.Direction = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *AntiSpywareSignatures) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *AntiSpywareSignatures) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AntiSpywareSignatures) SetId(v string) {
	o.Id = v
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetReference() []string {
	if o == nil || IsNil(o.Reference) {
		var ret []string
		return ret
	}
	return o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetReferenceOk() ([]string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given []string and assigns it to the Reference field.
func (o *AntiSpywareSignatures) SetReference(v []string) {
	o.Reference = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *AntiSpywareSignatures) SetSeverity(v string) {
	o.Severity = &v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetSignature() AntiSpywareSignaturesSignature {
	if o == nil || IsNil(o.Signature) {
		var ret AntiSpywareSignaturesSignature
		return ret
	}
	return *o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetSignatureOk() (*AntiSpywareSignaturesSignature, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given AntiSpywareSignaturesSignature and assigns it to the Signature field.
func (o *AntiSpywareSignatures) SetSignature(v AntiSpywareSignaturesSignature) {
	o.Signature = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *AntiSpywareSignatures) SetSnippet(v string) {
	o.Snippet = &v
}

// GetThreatId returns the ThreatId field value
func (o *AntiSpywareSignatures) GetThreatId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ThreatId
}

// GetThreatIdOk returns a tuple with the ThreatId field value
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetThreatIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ThreatId, true
}

// SetThreatId sets field value
func (o *AntiSpywareSignatures) SetThreatId(v int32) {
	o.ThreatId = v
}

// GetThreatname returns the Threatname field value
func (o *AntiSpywareSignatures) GetThreatname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Threatname
}

// GetThreatnameOk returns a tuple with the Threatname field value
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetThreatnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threatname, true
}

// SetThreatname sets field value
func (o *AntiSpywareSignatures) SetThreatname(v string) {
	o.Threatname = v
}

// GetVendor returns the Vendor field value if set, zero value otherwise.
func (o *AntiSpywareSignatures) GetVendor() []string {
	if o == nil || IsNil(o.Vendor) {
		var ret []string
		return ret
	}
	return o.Vendor
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AntiSpywareSignatures) GetVendorOk() ([]string, bool) {
	if o == nil || IsNil(o.Vendor) {
		return nil, false
	}
	return o.Vendor, true
}

// HasVendor returns a boolean if a field has been set.
func (o *AntiSpywareSignatures) HasVendor() bool {
	if o != nil && !IsNil(o.Vendor) {
		return true
	}

	return false
}

// SetVendor gets a reference to the given []string and assigns it to the Vendor field.
func (o *AntiSpywareSignatures) SetVendor(v []string) {
	o.Vendor = v
}

func (o AntiSpywareSignatures) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AntiSpywareSignatures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bugtraq) {
		toSerialize["bugtraq"] = o.Bugtraq
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.Cve) {
		toSerialize["cve"] = o.Cve
	}
	if !IsNil(o.DefaultAction) {
		toSerialize["default_action"] = o.DefaultAction
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	toSerialize["threat_id"] = o.ThreatId
	toSerialize["threatname"] = o.Threatname
	if !IsNil(o.Vendor) {
		toSerialize["vendor"] = o.Vendor
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AntiSpywareSignatures) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"threat_id",
		"threatname",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAntiSpywareSignatures := _AntiSpywareSignatures{}

	err = json.Unmarshal(data, &varAntiSpywareSignatures)

	if err != nil {
		return err
	}

	*o = AntiSpywareSignatures(varAntiSpywareSignatures)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bugtraq")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "cve")
		delete(additionalProperties, "default_action")
		delete(additionalProperties, "device")
		delete(additionalProperties, "direction")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "reference")
		delete(additionalProperties, "severity")
		delete(additionalProperties, "signature")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "threat_id")
		delete(additionalProperties, "threatname")
		delete(additionalProperties, "vendor")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAntiSpywareSignatures struct {
	value *AntiSpywareSignatures
	isSet bool
}

func (v NullableAntiSpywareSignatures) Get() *AntiSpywareSignatures {
	return v.value
}

func (v *NullableAntiSpywareSignatures) Set(val *AntiSpywareSignatures) {
	v.value = val
	v.isSet = true
}

func (v NullableAntiSpywareSignatures) IsSet() bool {
	return v.isSet
}

func (v *NullableAntiSpywareSignatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAntiSpywareSignatures(val *AntiSpywareSignatures) *NullableAntiSpywareSignatures {
	return &NullableAntiSpywareSignatures{value: val, isSet: true}
}

func (v NullableAntiSpywareSignatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAntiSpywareSignatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
