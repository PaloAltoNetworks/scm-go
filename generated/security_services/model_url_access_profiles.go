/*
Security Services

These APIs are used for defining and managing security services configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package security_services

import (
	"encoding/json"
	"fmt"
)

// checks if the UrlAccessProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UrlAccessProfiles{}

// UrlAccessProfiles struct for UrlAccessProfiles
type UrlAccessProfiles struct {
	Alert                 []string                                `json:"alert,omitempty"`
	Allow                 []string                                `json:"allow,omitempty"`
	Block                 []string                                `json:"block,omitempty"`
	CloudInlineCat        *bool                                   `json:"cloud_inline_cat,omitempty"`
	Continue              []string                                `json:"continue,omitempty"`
	CredentialEnforcement *UrlAccessProfilesCredentialEnforcement `json:"credential_enforcement,omitempty"`
	Description           *string                                 `json:"description,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id                    *string  `json:"id,omitempty"`
	LocalInlineCat        *bool    `json:"local_inline_cat,omitempty"`
	LogContainerPageOnly  *bool    `json:"log_container_page_only,omitempty"`
	LogHttpHdrReferer     *bool    `json:"log_http_hdr_referer,omitempty"`
	LogHttpHdrUserAgent   *bool    `json:"log_http_hdr_user_agent,omitempty"`
	LogHttpHdrXff         *bool    `json:"log_http_hdr_xff,omitempty"`
	MlavCategoryException []string `json:"mlav_category_exception,omitempty"`
	Name                  string   `json:"name"`
	Redirect              []string `json:"redirect,omitempty"`
	SafeSearchEnforcement *bool    `json:"safe_search_enforcement,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _UrlAccessProfiles UrlAccessProfiles

// NewUrlAccessProfiles instantiates a new UrlAccessProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUrlAccessProfiles(name string) *UrlAccessProfiles {
	this := UrlAccessProfiles{}
	var logContainerPageOnly bool = true
	this.LogContainerPageOnly = &logContainerPageOnly
	var logHttpHdrReferer bool = false
	this.LogHttpHdrReferer = &logHttpHdrReferer
	var logHttpHdrUserAgent bool = false
	this.LogHttpHdrUserAgent = &logHttpHdrUserAgent
	var logHttpHdrXff bool = false
	this.LogHttpHdrXff = &logHttpHdrXff
	this.Name = name
	var safeSearchEnforcement bool = false
	this.SafeSearchEnforcement = &safeSearchEnforcement
	return &this
}

// NewUrlAccessProfilesWithDefaults instantiates a new UrlAccessProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUrlAccessProfilesWithDefaults() *UrlAccessProfiles {
	this := UrlAccessProfiles{}
	var logContainerPageOnly bool = true
	this.LogContainerPageOnly = &logContainerPageOnly
	var logHttpHdrReferer bool = false
	this.LogHttpHdrReferer = &logHttpHdrReferer
	var logHttpHdrUserAgent bool = false
	this.LogHttpHdrUserAgent = &logHttpHdrUserAgent
	var logHttpHdrXff bool = false
	this.LogHttpHdrXff = &logHttpHdrXff
	var safeSearchEnforcement bool = false
	this.SafeSearchEnforcement = &safeSearchEnforcement
	return &this
}

// GetAlert returns the Alert field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetAlert() []string {
	if o == nil || IsNil(o.Alert) {
		var ret []string
		return ret
	}
	return o.Alert
}

// GetAlertOk returns a tuple with the Alert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetAlertOk() ([]string, bool) {
	if o == nil || IsNil(o.Alert) {
		return nil, false
	}
	return o.Alert, true
}

// HasAlert returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasAlert() bool {
	if o != nil && !IsNil(o.Alert) {
		return true
	}

	return false
}

// SetAlert gets a reference to the given []string and assigns it to the Alert field.
func (o *UrlAccessProfiles) SetAlert(v []string) {
	o.Alert = v
}

// GetAllow returns the Allow field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetAllow() []string {
	if o == nil || IsNil(o.Allow) {
		var ret []string
		return ret
	}
	return o.Allow
}

// GetAllowOk returns a tuple with the Allow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetAllowOk() ([]string, bool) {
	if o == nil || IsNil(o.Allow) {
		return nil, false
	}
	return o.Allow, true
}

// HasAllow returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasAllow() bool {
	if o != nil && !IsNil(o.Allow) {
		return true
	}

	return false
}

// SetAllow gets a reference to the given []string and assigns it to the Allow field.
func (o *UrlAccessProfiles) SetAllow(v []string) {
	o.Allow = v
}

// GetBlock returns the Block field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetBlock() []string {
	if o == nil || IsNil(o.Block) {
		var ret []string
		return ret
	}
	return o.Block
}

// GetBlockOk returns a tuple with the Block field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetBlockOk() ([]string, bool) {
	if o == nil || IsNil(o.Block) {
		return nil, false
	}
	return o.Block, true
}

// HasBlock returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasBlock() bool {
	if o != nil && !IsNil(o.Block) {
		return true
	}

	return false
}

// SetBlock gets a reference to the given []string and assigns it to the Block field.
func (o *UrlAccessProfiles) SetBlock(v []string) {
	o.Block = v
}

// GetCloudInlineCat returns the CloudInlineCat field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetCloudInlineCat() bool {
	if o == nil || IsNil(o.CloudInlineCat) {
		var ret bool
		return ret
	}
	return *o.CloudInlineCat
}

// GetCloudInlineCatOk returns a tuple with the CloudInlineCat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetCloudInlineCatOk() (*bool, bool) {
	if o == nil || IsNil(o.CloudInlineCat) {
		return nil, false
	}
	return o.CloudInlineCat, true
}

// HasCloudInlineCat returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasCloudInlineCat() bool {
	if o != nil && !IsNil(o.CloudInlineCat) {
		return true
	}

	return false
}

// SetCloudInlineCat gets a reference to the given bool and assigns it to the CloudInlineCat field.
func (o *UrlAccessProfiles) SetCloudInlineCat(v bool) {
	o.CloudInlineCat = &v
}

// GetContinue returns the Continue field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetContinue() []string {
	if o == nil || IsNil(o.Continue) {
		var ret []string
		return ret
	}
	return o.Continue
}

// GetContinueOk returns a tuple with the Continue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetContinueOk() ([]string, bool) {
	if o == nil || IsNil(o.Continue) {
		return nil, false
	}
	return o.Continue, true
}

// HasContinue returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasContinue() bool {
	if o != nil && !IsNil(o.Continue) {
		return true
	}

	return false
}

// SetContinue gets a reference to the given []string and assigns it to the Continue field.
func (o *UrlAccessProfiles) SetContinue(v []string) {
	o.Continue = v
}

// GetCredentialEnforcement returns the CredentialEnforcement field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetCredentialEnforcement() UrlAccessProfilesCredentialEnforcement {
	if o == nil || IsNil(o.CredentialEnforcement) {
		var ret UrlAccessProfilesCredentialEnforcement
		return ret
	}
	return *o.CredentialEnforcement
}

// GetCredentialEnforcementOk returns a tuple with the CredentialEnforcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetCredentialEnforcementOk() (*UrlAccessProfilesCredentialEnforcement, bool) {
	if o == nil || IsNil(o.CredentialEnforcement) {
		return nil, false
	}
	return o.CredentialEnforcement, true
}

// HasCredentialEnforcement returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasCredentialEnforcement() bool {
	if o != nil && !IsNil(o.CredentialEnforcement) {
		return true
	}

	return false
}

// SetCredentialEnforcement gets a reference to the given UrlAccessProfilesCredentialEnforcement and assigns it to the CredentialEnforcement field.
func (o *UrlAccessProfiles) SetCredentialEnforcement(v UrlAccessProfilesCredentialEnforcement) {
	o.CredentialEnforcement = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *UrlAccessProfiles) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *UrlAccessProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *UrlAccessProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UrlAccessProfiles) SetId(v string) {
	o.Id = &v
}

// GetLocalInlineCat returns the LocalInlineCat field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetLocalInlineCat() bool {
	if o == nil || IsNil(o.LocalInlineCat) {
		var ret bool
		return ret
	}
	return *o.LocalInlineCat
}

// GetLocalInlineCatOk returns a tuple with the LocalInlineCat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetLocalInlineCatOk() (*bool, bool) {
	if o == nil || IsNil(o.LocalInlineCat) {
		return nil, false
	}
	return o.LocalInlineCat, true
}

// HasLocalInlineCat returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasLocalInlineCat() bool {
	if o != nil && !IsNil(o.LocalInlineCat) {
		return true
	}

	return false
}

// SetLocalInlineCat gets a reference to the given bool and assigns it to the LocalInlineCat field.
func (o *UrlAccessProfiles) SetLocalInlineCat(v bool) {
	o.LocalInlineCat = &v
}

// GetLogContainerPageOnly returns the LogContainerPageOnly field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetLogContainerPageOnly() bool {
	if o == nil || IsNil(o.LogContainerPageOnly) {
		var ret bool
		return ret
	}
	return *o.LogContainerPageOnly
}

// GetLogContainerPageOnlyOk returns a tuple with the LogContainerPageOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetLogContainerPageOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.LogContainerPageOnly) {
		return nil, false
	}
	return o.LogContainerPageOnly, true
}

// HasLogContainerPageOnly returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasLogContainerPageOnly() bool {
	if o != nil && !IsNil(o.LogContainerPageOnly) {
		return true
	}

	return false
}

// SetLogContainerPageOnly gets a reference to the given bool and assigns it to the LogContainerPageOnly field.
func (o *UrlAccessProfiles) SetLogContainerPageOnly(v bool) {
	o.LogContainerPageOnly = &v
}

// GetLogHttpHdrReferer returns the LogHttpHdrReferer field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetLogHttpHdrReferer() bool {
	if o == nil || IsNil(o.LogHttpHdrReferer) {
		var ret bool
		return ret
	}
	return *o.LogHttpHdrReferer
}

// GetLogHttpHdrRefererOk returns a tuple with the LogHttpHdrReferer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetLogHttpHdrRefererOk() (*bool, bool) {
	if o == nil || IsNil(o.LogHttpHdrReferer) {
		return nil, false
	}
	return o.LogHttpHdrReferer, true
}

// HasLogHttpHdrReferer returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasLogHttpHdrReferer() bool {
	if o != nil && !IsNil(o.LogHttpHdrReferer) {
		return true
	}

	return false
}

// SetLogHttpHdrReferer gets a reference to the given bool and assigns it to the LogHttpHdrReferer field.
func (o *UrlAccessProfiles) SetLogHttpHdrReferer(v bool) {
	o.LogHttpHdrReferer = &v
}

// GetLogHttpHdrUserAgent returns the LogHttpHdrUserAgent field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetLogHttpHdrUserAgent() bool {
	if o == nil || IsNil(o.LogHttpHdrUserAgent) {
		var ret bool
		return ret
	}
	return *o.LogHttpHdrUserAgent
}

// GetLogHttpHdrUserAgentOk returns a tuple with the LogHttpHdrUserAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetLogHttpHdrUserAgentOk() (*bool, bool) {
	if o == nil || IsNil(o.LogHttpHdrUserAgent) {
		return nil, false
	}
	return o.LogHttpHdrUserAgent, true
}

// HasLogHttpHdrUserAgent returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasLogHttpHdrUserAgent() bool {
	if o != nil && !IsNil(o.LogHttpHdrUserAgent) {
		return true
	}

	return false
}

// SetLogHttpHdrUserAgent gets a reference to the given bool and assigns it to the LogHttpHdrUserAgent field.
func (o *UrlAccessProfiles) SetLogHttpHdrUserAgent(v bool) {
	o.LogHttpHdrUserAgent = &v
}

// GetLogHttpHdrXff returns the LogHttpHdrXff field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetLogHttpHdrXff() bool {
	if o == nil || IsNil(o.LogHttpHdrXff) {
		var ret bool
		return ret
	}
	return *o.LogHttpHdrXff
}

// GetLogHttpHdrXffOk returns a tuple with the LogHttpHdrXff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetLogHttpHdrXffOk() (*bool, bool) {
	if o == nil || IsNil(o.LogHttpHdrXff) {
		return nil, false
	}
	return o.LogHttpHdrXff, true
}

// HasLogHttpHdrXff returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasLogHttpHdrXff() bool {
	if o != nil && !IsNil(o.LogHttpHdrXff) {
		return true
	}

	return false
}

// SetLogHttpHdrXff gets a reference to the given bool and assigns it to the LogHttpHdrXff field.
func (o *UrlAccessProfiles) SetLogHttpHdrXff(v bool) {
	o.LogHttpHdrXff = &v
}

// GetMlavCategoryException returns the MlavCategoryException field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetMlavCategoryException() []string {
	if o == nil || IsNil(o.MlavCategoryException) {
		var ret []string
		return ret
	}
	return o.MlavCategoryException
}

// GetMlavCategoryExceptionOk returns a tuple with the MlavCategoryException field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetMlavCategoryExceptionOk() ([]string, bool) {
	if o == nil || IsNil(o.MlavCategoryException) {
		return nil, false
	}
	return o.MlavCategoryException, true
}

// HasMlavCategoryException returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasMlavCategoryException() bool {
	if o != nil && !IsNil(o.MlavCategoryException) {
		return true
	}

	return false
}

// SetMlavCategoryException gets a reference to the given []string and assigns it to the MlavCategoryException field.
func (o *UrlAccessProfiles) SetMlavCategoryException(v []string) {
	o.MlavCategoryException = v
}

// GetName returns the Name field value
func (o *UrlAccessProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UrlAccessProfiles) SetName(v string) {
	o.Name = v
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetRedirect() []string {
	if o == nil || IsNil(o.Redirect) {
		var ret []string
		return ret
	}
	return o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetRedirectOk() ([]string, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given []string and assigns it to the Redirect field.
func (o *UrlAccessProfiles) SetRedirect(v []string) {
	o.Redirect = v
}

// GetSafeSearchEnforcement returns the SafeSearchEnforcement field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetSafeSearchEnforcement() bool {
	if o == nil || IsNil(o.SafeSearchEnforcement) {
		var ret bool
		return ret
	}
	return *o.SafeSearchEnforcement
}

// GetSafeSearchEnforcementOk returns a tuple with the SafeSearchEnforcement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetSafeSearchEnforcementOk() (*bool, bool) {
	if o == nil || IsNil(o.SafeSearchEnforcement) {
		return nil, false
	}
	return o.SafeSearchEnforcement, true
}

// HasSafeSearchEnforcement returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasSafeSearchEnforcement() bool {
	if o != nil && !IsNil(o.SafeSearchEnforcement) {
		return true
	}

	return false
}

// SetSafeSearchEnforcement gets a reference to the given bool and assigns it to the SafeSearchEnforcement field.
func (o *UrlAccessProfiles) SetSafeSearchEnforcement(v bool) {
	o.SafeSearchEnforcement = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *UrlAccessProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UrlAccessProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *UrlAccessProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *UrlAccessProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

func (o UrlAccessProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UrlAccessProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Alert) {
		toSerialize["alert"] = o.Alert
	}
	if !IsNil(o.Allow) {
		toSerialize["allow"] = o.Allow
	}
	if !IsNil(o.Block) {
		toSerialize["block"] = o.Block
	}
	if !IsNil(o.CloudInlineCat) {
		toSerialize["cloud_inline_cat"] = o.CloudInlineCat
	}
	if !IsNil(o.Continue) {
		toSerialize["continue"] = o.Continue
	}
	if !IsNil(o.CredentialEnforcement) {
		toSerialize["credential_enforcement"] = o.CredentialEnforcement
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalInlineCat) {
		toSerialize["local_inline_cat"] = o.LocalInlineCat
	}
	if !IsNil(o.LogContainerPageOnly) {
		toSerialize["log_container_page_only"] = o.LogContainerPageOnly
	}
	if !IsNil(o.LogHttpHdrReferer) {
		toSerialize["log_http_hdr_referer"] = o.LogHttpHdrReferer
	}
	if !IsNil(o.LogHttpHdrUserAgent) {
		toSerialize["log_http_hdr_user_agent"] = o.LogHttpHdrUserAgent
	}
	if !IsNil(o.LogHttpHdrXff) {
		toSerialize["log_http_hdr_xff"] = o.LogHttpHdrXff
	}
	if !IsNil(o.MlavCategoryException) {
		toSerialize["mlav_category_exception"] = o.MlavCategoryException
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	if !IsNil(o.SafeSearchEnforcement) {
		toSerialize["safe_search_enforcement"] = o.SafeSearchEnforcement
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UrlAccessProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUrlAccessProfiles := _UrlAccessProfiles{}

	err = json.Unmarshal(data, &varUrlAccessProfiles)

	if err != nil {
		return err
	}

	*o = UrlAccessProfiles(varUrlAccessProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "alert")
		delete(additionalProperties, "allow")
		delete(additionalProperties, "block")
		delete(additionalProperties, "cloud_inline_cat")
		delete(additionalProperties, "continue")
		delete(additionalProperties, "credential_enforcement")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "local_inline_cat")
		delete(additionalProperties, "log_container_page_only")
		delete(additionalProperties, "log_http_hdr_referer")
		delete(additionalProperties, "log_http_hdr_user_agent")
		delete(additionalProperties, "log_http_hdr_xff")
		delete(additionalProperties, "mlav_category_exception")
		delete(additionalProperties, "name")
		delete(additionalProperties, "redirect")
		delete(additionalProperties, "safe_search_enforcement")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUrlAccessProfiles struct {
	value *UrlAccessProfiles
	isSet bool
}

func (v NullableUrlAccessProfiles) Get() *UrlAccessProfiles {
	return v.value
}

func (v *NullableUrlAccessProfiles) Set(val *UrlAccessProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableUrlAccessProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableUrlAccessProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUrlAccessProfiles(val *UrlAccessProfiles) *NullableUrlAccessProfiles {
	return &NullableUrlAccessProfiles{value: val, isSet: true}
}

func (v NullableUrlAccessProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUrlAccessProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
