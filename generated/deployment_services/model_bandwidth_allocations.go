/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
	"fmt"
)

// checks if the BandwidthAllocations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BandwidthAllocations{}

// BandwidthAllocations struct for BandwidthAllocations
type BandwidthAllocations struct {
	// bandwidth to allocate in Mbps
	AllocatedBandwidth float32 `json:"allocated_bandwidth"`
	// name of the aggregated bandwidth region
	Name                 string                   `json:"name"`
	Qos                  *BandwidthAllocationsQos `json:"qos,omitempty"`
	SpnNameList          []string                 `json:"spn_name_list,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BandwidthAllocations BandwidthAllocations

// NewBandwidthAllocations instantiates a new BandwidthAllocations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthAllocations(allocatedBandwidth float32, name string) *BandwidthAllocations {
	this := BandwidthAllocations{}
	this.AllocatedBandwidth = allocatedBandwidth
	this.Name = name
	return &this
}

// NewBandwidthAllocationsWithDefaults instantiates a new BandwidthAllocations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthAllocationsWithDefaults() *BandwidthAllocations {
	this := BandwidthAllocations{}
	return &this
}

// GetAllocatedBandwidth returns the AllocatedBandwidth field value
func (o *BandwidthAllocations) GetAllocatedBandwidth() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.AllocatedBandwidth
}

// GetAllocatedBandwidthOk returns a tuple with the AllocatedBandwidth field value
// and a boolean to check if the value has been set.
func (o *BandwidthAllocations) GetAllocatedBandwidthOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.AllocatedBandwidth, true
}

// SetAllocatedBandwidth sets field value
func (o *BandwidthAllocations) SetAllocatedBandwidth(v float32) {
	o.AllocatedBandwidth = v
}

// GetName returns the Name field value
func (o *BandwidthAllocations) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *BandwidthAllocations) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *BandwidthAllocations) SetName(v string) {
	o.Name = v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *BandwidthAllocations) GetQos() BandwidthAllocationsQos {
	if o == nil || IsNil(o.Qos) {
		var ret BandwidthAllocationsQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthAllocations) GetQosOk() (*BandwidthAllocationsQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *BandwidthAllocations) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given BandwidthAllocationsQos and assigns it to the Qos field.
func (o *BandwidthAllocations) SetQos(v BandwidthAllocationsQos) {
	o.Qos = &v
}

// GetSpnNameList returns the SpnNameList field value if set, zero value otherwise.
func (o *BandwidthAllocations) GetSpnNameList() []string {
	if o == nil || IsNil(o.SpnNameList) {
		var ret []string
		return ret
	}
	return o.SpnNameList
}

// GetSpnNameListOk returns a tuple with the SpnNameList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthAllocations) GetSpnNameListOk() ([]string, bool) {
	if o == nil || IsNil(o.SpnNameList) {
		return nil, false
	}
	return o.SpnNameList, true
}

// HasSpnNameList returns a boolean if a field has been set.
func (o *BandwidthAllocations) HasSpnNameList() bool {
	if o != nil && !IsNil(o.SpnNameList) {
		return true
	}

	return false
}

// SetSpnNameList gets a reference to the given []string and assigns it to the SpnNameList field.
func (o *BandwidthAllocations) SetSpnNameList(v []string) {
	o.SpnNameList = v
}

func (o BandwidthAllocations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BandwidthAllocations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["allocated_bandwidth"] = o.AllocatedBandwidth
	toSerialize["name"] = o.Name
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.SpnNameList) {
		toSerialize["spn_name_list"] = o.SpnNameList
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BandwidthAllocations) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"allocated_bandwidth",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBandwidthAllocations := _BandwidthAllocations{}

	err = json.Unmarshal(data, &varBandwidthAllocations)

	if err != nil {
		return err
	}

	*o = BandwidthAllocations(varBandwidthAllocations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allocated_bandwidth")
		delete(additionalProperties, "name")
		delete(additionalProperties, "qos")
		delete(additionalProperties, "spn_name_list")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBandwidthAllocations struct {
	value *BandwidthAllocations
	isSet bool
}

func (v NullableBandwidthAllocations) Get() *BandwidthAllocations {
	return v.value
}

func (v *NullableBandwidthAllocations) Set(val *BandwidthAllocations) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthAllocations) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthAllocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthAllocations(val *BandwidthAllocations) *NullableBandwidthAllocations {
	return &NullableBandwidthAllocations{value: val, isSet: true}
}

func (v NullableBandwidthAllocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthAllocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
