/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
	"fmt"
)

// checks if the RemoteNetworks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteNetworks{}

// RemoteNetworks struct for RemoteNetworks
type RemoteNetworks struct {
	EcmpLoadBalancing *string `json:"ecmp_load_balancing,omitempty"`
	// ecmp_tunnels is required when ecmp_load_balancing is enable
	EcmpTunnels []RemoteNetworksEcmpTunnelsInner `json:"ecmp_tunnels,omitempty"`
	// The folder that contains the remote network
	Folder string `json:"folder"`
	// The UUID of the remote network
	Id string `json:"id"`
	// ipsec_tunnel is required when ecmp_load_balancing is disable
	IpsecTunnel *string `json:"ipsec_tunnel,omitempty"`
	// New customer will only be on aggregate bandwidth licensing
	LicenseType string `json:"license_type"`
	// The name of the remote network
	Name     string                  `json:"name"`
	Protocol *RemoteNetworksProtocol `json:"protocol,omitempty"`
	Region   string                  `json:"region"`
	// specify secondary ipsec_tunnel if needed
	SecondaryIpsecTunnel *string `json:"secondary_ipsec_tunnel,omitempty"`
	// spn-name is needed when license_type is FWAAS-AGGREGATE
	SpnName              *string  `json:"spn_name,omitempty"`
	Subnets              []string `json:"subnets,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RemoteNetworks RemoteNetworks

// NewRemoteNetworks instantiates a new RemoteNetworks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteNetworks(folder string, id string, licenseType string, name string, region string) *RemoteNetworks {
	this := RemoteNetworks{}
	var ecmpLoadBalancing string = "disable"
	this.EcmpLoadBalancing = &ecmpLoadBalancing
	this.Folder = folder
	this.Id = id
	this.LicenseType = licenseType
	this.Name = name
	this.Region = region
	return &this
}

// NewRemoteNetworksWithDefaults instantiates a new RemoteNetworks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteNetworksWithDefaults() *RemoteNetworks {
	this := RemoteNetworks{}
	var ecmpLoadBalancing string = "disable"
	this.EcmpLoadBalancing = &ecmpLoadBalancing
	var folder string = "Remote Networks"
	this.Folder = folder
	var licenseType string = "FWAAS-AGGREGATE"
	this.LicenseType = licenseType
	return &this
}

// GetEcmpLoadBalancing returns the EcmpLoadBalancing field value if set, zero value otherwise.
func (o *RemoteNetworks) GetEcmpLoadBalancing() string {
	if o == nil || IsNil(o.EcmpLoadBalancing) {
		var ret string
		return ret
	}
	return *o.EcmpLoadBalancing
}

// GetEcmpLoadBalancingOk returns a tuple with the EcmpLoadBalancing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetEcmpLoadBalancingOk() (*string, bool) {
	if o == nil || IsNil(o.EcmpLoadBalancing) {
		return nil, false
	}
	return o.EcmpLoadBalancing, true
}

// HasEcmpLoadBalancing returns a boolean if a field has been set.
func (o *RemoteNetworks) HasEcmpLoadBalancing() bool {
	if o != nil && !IsNil(o.EcmpLoadBalancing) {
		return true
	}

	return false
}

// SetEcmpLoadBalancing gets a reference to the given string and assigns it to the EcmpLoadBalancing field.
func (o *RemoteNetworks) SetEcmpLoadBalancing(v string) {
	o.EcmpLoadBalancing = &v
}

// GetEcmpTunnels returns the EcmpTunnels field value if set, zero value otherwise.
func (o *RemoteNetworks) GetEcmpTunnels() []RemoteNetworksEcmpTunnelsInner {
	if o == nil || IsNil(o.EcmpTunnels) {
		var ret []RemoteNetworksEcmpTunnelsInner
		return ret
	}
	return o.EcmpTunnels
}

// GetEcmpTunnelsOk returns a tuple with the EcmpTunnels field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetEcmpTunnelsOk() ([]RemoteNetworksEcmpTunnelsInner, bool) {
	if o == nil || IsNil(o.EcmpTunnels) {
		return nil, false
	}
	return o.EcmpTunnels, true
}

// HasEcmpTunnels returns a boolean if a field has been set.
func (o *RemoteNetworks) HasEcmpTunnels() bool {
	if o != nil && !IsNil(o.EcmpTunnels) {
		return true
	}

	return false
}

// SetEcmpTunnels gets a reference to the given []RemoteNetworksEcmpTunnelsInner and assigns it to the EcmpTunnels field.
func (o *RemoteNetworks) SetEcmpTunnels(v []RemoteNetworksEcmpTunnelsInner) {
	o.EcmpTunnels = v
}

// GetFolder returns the Folder field value
func (o *RemoteNetworks) GetFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *RemoteNetworks) SetFolder(v string) {
	o.Folder = v
}

// GetId returns the Id field value
func (o *RemoteNetworks) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RemoteNetworks) SetId(v string) {
	o.Id = v
}

// GetIpsecTunnel returns the IpsecTunnel field value if set, zero value otherwise.
func (o *RemoteNetworks) GetIpsecTunnel() string {
	if o == nil || IsNil(o.IpsecTunnel) {
		var ret string
		return ret
	}
	return *o.IpsecTunnel
}

// GetIpsecTunnelOk returns a tuple with the IpsecTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetIpsecTunnelOk() (*string, bool) {
	if o == nil || IsNil(o.IpsecTunnel) {
		return nil, false
	}
	return o.IpsecTunnel, true
}

// HasIpsecTunnel returns a boolean if a field has been set.
func (o *RemoteNetworks) HasIpsecTunnel() bool {
	if o != nil && !IsNil(o.IpsecTunnel) {
		return true
	}

	return false
}

// SetIpsecTunnel gets a reference to the given string and assigns it to the IpsecTunnel field.
func (o *RemoteNetworks) SetIpsecTunnel(v string) {
	o.IpsecTunnel = &v
}

// GetLicenseType returns the LicenseType field value
func (o *RemoteNetworks) GetLicenseType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetLicenseTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LicenseType, true
}

// SetLicenseType sets field value
func (o *RemoteNetworks) SetLicenseType(v string) {
	o.LicenseType = v
}

// GetName returns the Name field value
func (o *RemoteNetworks) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RemoteNetworks) SetName(v string) {
	o.Name = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *RemoteNetworks) GetProtocol() RemoteNetworksProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret RemoteNetworksProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetProtocolOk() (*RemoteNetworksProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *RemoteNetworks) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given RemoteNetworksProtocol and assigns it to the Protocol field.
func (o *RemoteNetworks) SetProtocol(v RemoteNetworksProtocol) {
	o.Protocol = &v
}

// GetRegion returns the Region field value
func (o *RemoteNetworks) GetRegion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Region
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Region, true
}

// SetRegion sets field value
func (o *RemoteNetworks) SetRegion(v string) {
	o.Region = v
}

// GetSecondaryIpsecTunnel returns the SecondaryIpsecTunnel field value if set, zero value otherwise.
func (o *RemoteNetworks) GetSecondaryIpsecTunnel() string {
	if o == nil || IsNil(o.SecondaryIpsecTunnel) {
		var ret string
		return ret
	}
	return *o.SecondaryIpsecTunnel
}

// GetSecondaryIpsecTunnelOk returns a tuple with the SecondaryIpsecTunnel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetSecondaryIpsecTunnelOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryIpsecTunnel) {
		return nil, false
	}
	return o.SecondaryIpsecTunnel, true
}

// HasSecondaryIpsecTunnel returns a boolean if a field has been set.
func (o *RemoteNetworks) HasSecondaryIpsecTunnel() bool {
	if o != nil && !IsNil(o.SecondaryIpsecTunnel) {
		return true
	}

	return false
}

// SetSecondaryIpsecTunnel gets a reference to the given string and assigns it to the SecondaryIpsecTunnel field.
func (o *RemoteNetworks) SetSecondaryIpsecTunnel(v string) {
	o.SecondaryIpsecTunnel = &v
}

// GetSpnName returns the SpnName field value if set, zero value otherwise.
func (o *RemoteNetworks) GetSpnName() string {
	if o == nil || IsNil(o.SpnName) {
		var ret string
		return ret
	}
	return *o.SpnName
}

// GetSpnNameOk returns a tuple with the SpnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetSpnNameOk() (*string, bool) {
	if o == nil || IsNil(o.SpnName) {
		return nil, false
	}
	return o.SpnName, true
}

// HasSpnName returns a boolean if a field has been set.
func (o *RemoteNetworks) HasSpnName() bool {
	if o != nil && !IsNil(o.SpnName) {
		return true
	}

	return false
}

// SetSpnName gets a reference to the given string and assigns it to the SpnName field.
func (o *RemoteNetworks) SetSpnName(v string) {
	o.SpnName = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *RemoteNetworks) GetSubnets() []string {
	if o == nil || IsNil(o.Subnets) {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteNetworks) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *RemoteNetworks) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *RemoteNetworks) SetSubnets(v []string) {
	o.Subnets = v
}

func (o RemoteNetworks) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteNetworks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EcmpLoadBalancing) {
		toSerialize["ecmp_load_balancing"] = o.EcmpLoadBalancing
	}
	if !IsNil(o.EcmpTunnels) {
		toSerialize["ecmp_tunnels"] = o.EcmpTunnels
	}
	toSerialize["folder"] = o.Folder
	toSerialize["id"] = o.Id
	if !IsNil(o.IpsecTunnel) {
		toSerialize["ipsec_tunnel"] = o.IpsecTunnel
	}
	toSerialize["license_type"] = o.LicenseType
	toSerialize["name"] = o.Name
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	toSerialize["region"] = o.Region
	if !IsNil(o.SecondaryIpsecTunnel) {
		toSerialize["secondary_ipsec_tunnel"] = o.SecondaryIpsecTunnel
	}
	if !IsNil(o.SpnName) {
		toSerialize["spn_name"] = o.SpnName
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RemoteNetworks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"folder",
		"id",
		"license_type",
		"name",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteNetworks := _RemoteNetworks{}

	err = json.Unmarshal(data, &varRemoteNetworks)

	if err != nil {
		return err
	}

	*o = RemoteNetworks(varRemoteNetworks)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ecmp_load_balancing")
		delete(additionalProperties, "ecmp_tunnels")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ipsec_tunnel")
		delete(additionalProperties, "license_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "region")
		delete(additionalProperties, "secondary_ipsec_tunnel")
		delete(additionalProperties, "spn_name")
		delete(additionalProperties, "subnets")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRemoteNetworks struct {
	value *RemoteNetworks
	isSet bool
}

func (v NullableRemoteNetworks) Get() *RemoteNetworks {
	return v.value
}

func (v *NullableRemoteNetworks) Set(val *RemoteNetworks) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteNetworks) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteNetworks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteNetworks(val *RemoteNetworks) *NullableRemoteNetworks {
	return &NullableRemoteNetworks{value: val, isSet: true}
}

func (v NullableRemoteNetworks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteNetworks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
