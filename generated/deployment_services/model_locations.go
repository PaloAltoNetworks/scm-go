/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
)

// checks if the Locations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Locations{}

// Locations struct for Locations
type Locations struct {
	AggregateRegion *string `json:"aggregate_region,omitempty"`
	// The continent in which the location exists
	Continent *string `json:"continent,omitempty"`
	// The location as displayed in the Strata Cloud Manager portal
	Display *string `json:"display,omitempty"`
	// The latitudinal position of the location
	Latitude *float32 `json:"latitude,omitempty"`
	// The longitudinal position of the location
	Longitude            *float32 `json:"longitude,omitempty"`
	Region               *string  `json:"region,omitempty"`
	Value                *string  `json:"value,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Locations Locations

// NewLocations instantiates a new Locations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocations() *Locations {
	this := Locations{}
	return &this
}

// NewLocationsWithDefaults instantiates a new Locations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationsWithDefaults() *Locations {
	this := Locations{}
	return &this
}

// GetAggregateRegion returns the AggregateRegion field value if set, zero value otherwise.
func (o *Locations) GetAggregateRegion() string {
	if o == nil || IsNil(o.AggregateRegion) {
		var ret string
		return ret
	}
	return *o.AggregateRegion
}

// GetAggregateRegionOk returns a tuple with the AggregateRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetAggregateRegionOk() (*string, bool) {
	if o == nil || IsNil(o.AggregateRegion) {
		return nil, false
	}
	return o.AggregateRegion, true
}

// HasAggregateRegion returns a boolean if a field has been set.
func (o *Locations) HasAggregateRegion() bool {
	if o != nil && !IsNil(o.AggregateRegion) {
		return true
	}

	return false
}

// SetAggregateRegion gets a reference to the given string and assigns it to the AggregateRegion field.
func (o *Locations) SetAggregateRegion(v string) {
	o.AggregateRegion = &v
}

// GetContinent returns the Continent field value if set, zero value otherwise.
func (o *Locations) GetContinent() string {
	if o == nil || IsNil(o.Continent) {
		var ret string
		return ret
	}
	return *o.Continent
}

// GetContinentOk returns a tuple with the Continent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetContinentOk() (*string, bool) {
	if o == nil || IsNil(o.Continent) {
		return nil, false
	}
	return o.Continent, true
}

// HasContinent returns a boolean if a field has been set.
func (o *Locations) HasContinent() bool {
	if o != nil && !IsNil(o.Continent) {
		return true
	}

	return false
}

// SetContinent gets a reference to the given string and assigns it to the Continent field.
func (o *Locations) SetContinent(v string) {
	o.Continent = &v
}

// GetDisplay returns the Display field value if set, zero value otherwise.
func (o *Locations) GetDisplay() string {
	if o == nil || IsNil(o.Display) {
		var ret string
		return ret
	}
	return *o.Display
}

// GetDisplayOk returns a tuple with the Display field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetDisplayOk() (*string, bool) {
	if o == nil || IsNil(o.Display) {
		return nil, false
	}
	return o.Display, true
}

// HasDisplay returns a boolean if a field has been set.
func (o *Locations) HasDisplay() bool {
	if o != nil && !IsNil(o.Display) {
		return true
	}

	return false
}

// SetDisplay gets a reference to the given string and assigns it to the Display field.
func (o *Locations) SetDisplay(v string) {
	o.Display = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *Locations) GetLatitude() float32 {
	if o == nil || IsNil(o.Latitude) {
		var ret float32
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetLatitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *Locations) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given float32 and assigns it to the Latitude field.
func (o *Locations) SetLatitude(v float32) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *Locations) GetLongitude() float32 {
	if o == nil || IsNil(o.Longitude) {
		var ret float32
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetLongitudeOk() (*float32, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *Locations) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given float32 and assigns it to the Longitude field.
func (o *Locations) SetLongitude(v float32) {
	o.Longitude = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *Locations) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *Locations) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *Locations) SetRegion(v string) {
	o.Region = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Locations) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Locations) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Locations) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Locations) SetValue(v string) {
	o.Value = &v
}

func (o Locations) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Locations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AggregateRegion) {
		toSerialize["aggregate_region"] = o.AggregateRegion
	}
	if !IsNil(o.Continent) {
		toSerialize["continent"] = o.Continent
	}
	if !IsNil(o.Display) {
		toSerialize["display"] = o.Display
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Locations) UnmarshalJSON(data []byte) (err error) {
	varLocations := _Locations{}

	err = json.Unmarshal(data, &varLocations)

	if err != nil {
		return err
	}

	*o = Locations(varLocations)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregate_region")
		delete(additionalProperties, "continent")
		delete(additionalProperties, "display")
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		delete(additionalProperties, "region")
		delete(additionalProperties, "value")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLocations struct {
	value *Locations
	isSet bool
}

func (v NullableLocations) Get() *Locations {
	return v.value
}

func (v *NullableLocations) Set(val *Locations) {
	v.value = val
	v.isSet = true
}

func (v NullableLocations) IsSet() bool {
	return v.isSet
}

func (v *NullableLocations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocations(val *Locations) *NullableLocations {
	return &NullableLocations{value: val, isSet: true}
}

func (v NullableLocations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
