/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
)

// checks if the BgpRouting type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpRouting{}

// BgpRouting struct for BgpRouting
type BgpRouting struct {
	AcceptRouteOverSC         *bool                        `json:"accept_route_over_SC,omitempty"`
	AddHostRouteToIkePeer     *bool                        `json:"add_host_route_to_ike_peer,omitempty"`
	BackboneRouting           *string                      `json:"backbone_routing,omitempty"`
	OutboundRoutesForServices []string                     `json:"outbound_routes_for_services,omitempty"`
	RoutingPreference         *BgpRoutingRoutingPreference `json:"routing_preference,omitempty"`
	WithdrawStaticRoute       *bool                        `json:"withdraw_static_route,omitempty"`
	AdditionalProperties      map[string]interface{}
}

type _BgpRouting BgpRouting

// NewBgpRouting instantiates a new BgpRouting object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpRouting() *BgpRouting {
	this := BgpRouting{}
	return &this
}

// NewBgpRoutingWithDefaults instantiates a new BgpRouting object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpRoutingWithDefaults() *BgpRouting {
	this := BgpRouting{}
	return &this
}

// GetAcceptRouteOverSC returns the AcceptRouteOverSC field value if set, zero value otherwise.
func (o *BgpRouting) GetAcceptRouteOverSC() bool {
	if o == nil || IsNil(o.AcceptRouteOverSC) {
		var ret bool
		return ret
	}
	return *o.AcceptRouteOverSC
}

// GetAcceptRouteOverSCOk returns a tuple with the AcceptRouteOverSC field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetAcceptRouteOverSCOk() (*bool, bool) {
	if o == nil || IsNil(o.AcceptRouteOverSC) {
		return nil, false
	}
	return o.AcceptRouteOverSC, true
}

// HasAcceptRouteOverSC returns a boolean if a field has been set.
func (o *BgpRouting) HasAcceptRouteOverSC() bool {
	if o != nil && !IsNil(o.AcceptRouteOverSC) {
		return true
	}

	return false
}

// SetAcceptRouteOverSC gets a reference to the given bool and assigns it to the AcceptRouteOverSC field.
func (o *BgpRouting) SetAcceptRouteOverSC(v bool) {
	o.AcceptRouteOverSC = &v
}

// GetAddHostRouteToIkePeer returns the AddHostRouteToIkePeer field value if set, zero value otherwise.
func (o *BgpRouting) GetAddHostRouteToIkePeer() bool {
	if o == nil || IsNil(o.AddHostRouteToIkePeer) {
		var ret bool
		return ret
	}
	return *o.AddHostRouteToIkePeer
}

// GetAddHostRouteToIkePeerOk returns a tuple with the AddHostRouteToIkePeer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetAddHostRouteToIkePeerOk() (*bool, bool) {
	if o == nil || IsNil(o.AddHostRouteToIkePeer) {
		return nil, false
	}
	return o.AddHostRouteToIkePeer, true
}

// HasAddHostRouteToIkePeer returns a boolean if a field has been set.
func (o *BgpRouting) HasAddHostRouteToIkePeer() bool {
	if o != nil && !IsNil(o.AddHostRouteToIkePeer) {
		return true
	}

	return false
}

// SetAddHostRouteToIkePeer gets a reference to the given bool and assigns it to the AddHostRouteToIkePeer field.
func (o *BgpRouting) SetAddHostRouteToIkePeer(v bool) {
	o.AddHostRouteToIkePeer = &v
}

// GetBackboneRouting returns the BackboneRouting field value if set, zero value otherwise.
func (o *BgpRouting) GetBackboneRouting() string {
	if o == nil || IsNil(o.BackboneRouting) {
		var ret string
		return ret
	}
	return *o.BackboneRouting
}

// GetBackboneRoutingOk returns a tuple with the BackboneRouting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetBackboneRoutingOk() (*string, bool) {
	if o == nil || IsNil(o.BackboneRouting) {
		return nil, false
	}
	return o.BackboneRouting, true
}

// HasBackboneRouting returns a boolean if a field has been set.
func (o *BgpRouting) HasBackboneRouting() bool {
	if o != nil && !IsNil(o.BackboneRouting) {
		return true
	}

	return false
}

// SetBackboneRouting gets a reference to the given string and assigns it to the BackboneRouting field.
func (o *BgpRouting) SetBackboneRouting(v string) {
	o.BackboneRouting = &v
}

// GetOutboundRoutesForServices returns the OutboundRoutesForServices field value if set, zero value otherwise.
func (o *BgpRouting) GetOutboundRoutesForServices() []string {
	if o == nil || IsNil(o.OutboundRoutesForServices) {
		var ret []string
		return ret
	}
	return o.OutboundRoutesForServices
}

// GetOutboundRoutesForServicesOk returns a tuple with the OutboundRoutesForServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetOutboundRoutesForServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.OutboundRoutesForServices) {
		return nil, false
	}
	return o.OutboundRoutesForServices, true
}

// HasOutboundRoutesForServices returns a boolean if a field has been set.
func (o *BgpRouting) HasOutboundRoutesForServices() bool {
	if o != nil && !IsNil(o.OutboundRoutesForServices) {
		return true
	}

	return false
}

// SetOutboundRoutesForServices gets a reference to the given []string and assigns it to the OutboundRoutesForServices field.
func (o *BgpRouting) SetOutboundRoutesForServices(v []string) {
	o.OutboundRoutesForServices = v
}

// GetRoutingPreference returns the RoutingPreference field value if set, zero value otherwise.
func (o *BgpRouting) GetRoutingPreference() BgpRoutingRoutingPreference {
	if o == nil || IsNil(o.RoutingPreference) {
		var ret BgpRoutingRoutingPreference
		return ret
	}
	return *o.RoutingPreference
}

// GetRoutingPreferenceOk returns a tuple with the RoutingPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetRoutingPreferenceOk() (*BgpRoutingRoutingPreference, bool) {
	if o == nil || IsNil(o.RoutingPreference) {
		return nil, false
	}
	return o.RoutingPreference, true
}

// HasRoutingPreference returns a boolean if a field has been set.
func (o *BgpRouting) HasRoutingPreference() bool {
	if o != nil && !IsNil(o.RoutingPreference) {
		return true
	}

	return false
}

// SetRoutingPreference gets a reference to the given BgpRoutingRoutingPreference and assigns it to the RoutingPreference field.
func (o *BgpRouting) SetRoutingPreference(v BgpRoutingRoutingPreference) {
	o.RoutingPreference = &v
}

// GetWithdrawStaticRoute returns the WithdrawStaticRoute field value if set, zero value otherwise.
func (o *BgpRouting) GetWithdrawStaticRoute() bool {
	if o == nil || IsNil(o.WithdrawStaticRoute) {
		var ret bool
		return ret
	}
	return *o.WithdrawStaticRoute
}

// GetWithdrawStaticRouteOk returns a tuple with the WithdrawStaticRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouting) GetWithdrawStaticRouteOk() (*bool, bool) {
	if o == nil || IsNil(o.WithdrawStaticRoute) {
		return nil, false
	}
	return o.WithdrawStaticRoute, true
}

// HasWithdrawStaticRoute returns a boolean if a field has been set.
func (o *BgpRouting) HasWithdrawStaticRoute() bool {
	if o != nil && !IsNil(o.WithdrawStaticRoute) {
		return true
	}

	return false
}

// SetWithdrawStaticRoute gets a reference to the given bool and assigns it to the WithdrawStaticRoute field.
func (o *BgpRouting) SetWithdrawStaticRoute(v bool) {
	o.WithdrawStaticRoute = &v
}

func (o BgpRouting) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpRouting) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AcceptRouteOverSC) {
		toSerialize["accept_route_over_SC"] = o.AcceptRouteOverSC
	}
	if !IsNil(o.AddHostRouteToIkePeer) {
		toSerialize["add_host_route_to_ike_peer"] = o.AddHostRouteToIkePeer
	}
	if !IsNil(o.BackboneRouting) {
		toSerialize["backbone_routing"] = o.BackboneRouting
	}
	if !IsNil(o.OutboundRoutesForServices) {
		toSerialize["outbound_routes_for_services"] = o.OutboundRoutesForServices
	}
	if !IsNil(o.RoutingPreference) {
		toSerialize["routing_preference"] = o.RoutingPreference
	}
	if !IsNil(o.WithdrawStaticRoute) {
		toSerialize["withdraw_static_route"] = o.WithdrawStaticRoute
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpRouting) UnmarshalJSON(data []byte) (err error) {
	varBgpRouting := _BgpRouting{}

	err = json.Unmarshal(data, &varBgpRouting)

	if err != nil {
		return err
	}

	*o = BgpRouting(varBgpRouting)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "accept_route_over_SC")
		delete(additionalProperties, "add_host_route_to_ike_peer")
		delete(additionalProperties, "backbone_routing")
		delete(additionalProperties, "outbound_routes_for_services")
		delete(additionalProperties, "routing_preference")
		delete(additionalProperties, "withdraw_static_route")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpRouting struct {
	value *BgpRouting
	isSet bool
}

func (v NullableBgpRouting) Get() *BgpRouting {
	return v.value
}

func (v *NullableBgpRouting) Set(val *BgpRouting) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpRouting) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpRouting) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpRouting(val *BgpRouting) *NullableBgpRouting {
	return &NullableBgpRouting{value: val, isSet: true}
}

func (v NullableBgpRouting) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpRouting) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
