/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
)

// checks if the SharedInfrastructureSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharedInfrastructureSettings{}

// SharedInfrastructureSettings struct for SharedInfrastructureSettings
type SharedInfrastructureSettings struct {
	ApiKey                         *string                                                     `json:"api_key,omitempty"`
	CaptivePortalRedirectIpAddress *string                                                     `json:"captive_portal_redirect_ip_address,omitempty"`
	ConnectorApplicationBlocks     *EditSharedInfrastructureSettingsConnectorApplicationBlocks `json:"connector-application-blocks,omitempty"`
	ConnectorConnectorBlocks       *EditSharedInfrastructureSettingsConnectorConnectorBlocks   `json:"connector-connector-blocks,omitempty"`
	EgressIpNotificationUrl        *string                                                     `json:"egress_ip_notification_url,omitempty"`
	// The folder containing the shared infrastructure settings
	Folder                   *string  `json:"folder,omitempty"`
	InfraBgpAs               *string  `json:"infra_bgp_as,omitempty"`
	InfrastructureSubnet     *string  `json:"infrastructure_subnet,omitempty"`
	InfrastructureSubnetIpv6 *string  `json:"infrastructure_subnet_ipv6,omitempty"`
	Ipv6                     *bool    `json:"ipv6,omitempty"`
	LoopbackIps              []string `json:"loopback_ips,omitempty"`
	TunnelMonitorIpAddress   *string  `json:"tunnel_monitor_ip_address,omitempty"`
	AdditionalProperties     map[string]interface{}
}

type _SharedInfrastructureSettings SharedInfrastructureSettings

// NewSharedInfrastructureSettings instantiates a new SharedInfrastructureSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharedInfrastructureSettings() *SharedInfrastructureSettings {
	this := SharedInfrastructureSettings{}
	return &this
}

// NewSharedInfrastructureSettingsWithDefaults instantiates a new SharedInfrastructureSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharedInfrastructureSettingsWithDefaults() *SharedInfrastructureSettings {
	this := SharedInfrastructureSettings{}
	return &this
}

// GetApiKey returns the ApiKey field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetApiKey() string {
	if o == nil || IsNil(o.ApiKey) {
		var ret string
		return ret
	}
	return *o.ApiKey
}

// GetApiKeyOk returns a tuple with the ApiKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetApiKeyOk() (*string, bool) {
	if o == nil || IsNil(o.ApiKey) {
		return nil, false
	}
	return o.ApiKey, true
}

// HasApiKey returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasApiKey() bool {
	if o != nil && !IsNil(o.ApiKey) {
		return true
	}

	return false
}

// SetApiKey gets a reference to the given string and assigns it to the ApiKey field.
func (o *SharedInfrastructureSettings) SetApiKey(v string) {
	o.ApiKey = &v
}

// GetCaptivePortalRedirectIpAddress returns the CaptivePortalRedirectIpAddress field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetCaptivePortalRedirectIpAddress() string {
	if o == nil || IsNil(o.CaptivePortalRedirectIpAddress) {
		var ret string
		return ret
	}
	return *o.CaptivePortalRedirectIpAddress
}

// GetCaptivePortalRedirectIpAddressOk returns a tuple with the CaptivePortalRedirectIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetCaptivePortalRedirectIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.CaptivePortalRedirectIpAddress) {
		return nil, false
	}
	return o.CaptivePortalRedirectIpAddress, true
}

// HasCaptivePortalRedirectIpAddress returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasCaptivePortalRedirectIpAddress() bool {
	if o != nil && !IsNil(o.CaptivePortalRedirectIpAddress) {
		return true
	}

	return false
}

// SetCaptivePortalRedirectIpAddress gets a reference to the given string and assigns it to the CaptivePortalRedirectIpAddress field.
func (o *SharedInfrastructureSettings) SetCaptivePortalRedirectIpAddress(v string) {
	o.CaptivePortalRedirectIpAddress = &v
}

// GetConnectorApplicationBlocks returns the ConnectorApplicationBlocks field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetConnectorApplicationBlocks() EditSharedInfrastructureSettingsConnectorApplicationBlocks {
	if o == nil || IsNil(o.ConnectorApplicationBlocks) {
		var ret EditSharedInfrastructureSettingsConnectorApplicationBlocks
		return ret
	}
	return *o.ConnectorApplicationBlocks
}

// GetConnectorApplicationBlocksOk returns a tuple with the ConnectorApplicationBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetConnectorApplicationBlocksOk() (*EditSharedInfrastructureSettingsConnectorApplicationBlocks, bool) {
	if o == nil || IsNil(o.ConnectorApplicationBlocks) {
		return nil, false
	}
	return o.ConnectorApplicationBlocks, true
}

// HasConnectorApplicationBlocks returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasConnectorApplicationBlocks() bool {
	if o != nil && !IsNil(o.ConnectorApplicationBlocks) {
		return true
	}

	return false
}

// SetConnectorApplicationBlocks gets a reference to the given EditSharedInfrastructureSettingsConnectorApplicationBlocks and assigns it to the ConnectorApplicationBlocks field.
func (o *SharedInfrastructureSettings) SetConnectorApplicationBlocks(v EditSharedInfrastructureSettingsConnectorApplicationBlocks) {
	o.ConnectorApplicationBlocks = &v
}

// GetConnectorConnectorBlocks returns the ConnectorConnectorBlocks field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetConnectorConnectorBlocks() EditSharedInfrastructureSettingsConnectorConnectorBlocks {
	if o == nil || IsNil(o.ConnectorConnectorBlocks) {
		var ret EditSharedInfrastructureSettingsConnectorConnectorBlocks
		return ret
	}
	return *o.ConnectorConnectorBlocks
}

// GetConnectorConnectorBlocksOk returns a tuple with the ConnectorConnectorBlocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetConnectorConnectorBlocksOk() (*EditSharedInfrastructureSettingsConnectorConnectorBlocks, bool) {
	if o == nil || IsNil(o.ConnectorConnectorBlocks) {
		return nil, false
	}
	return o.ConnectorConnectorBlocks, true
}

// HasConnectorConnectorBlocks returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasConnectorConnectorBlocks() bool {
	if o != nil && !IsNil(o.ConnectorConnectorBlocks) {
		return true
	}

	return false
}

// SetConnectorConnectorBlocks gets a reference to the given EditSharedInfrastructureSettingsConnectorConnectorBlocks and assigns it to the ConnectorConnectorBlocks field.
func (o *SharedInfrastructureSettings) SetConnectorConnectorBlocks(v EditSharedInfrastructureSettingsConnectorConnectorBlocks) {
	o.ConnectorConnectorBlocks = &v
}

// GetEgressIpNotificationUrl returns the EgressIpNotificationUrl field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetEgressIpNotificationUrl() string {
	if o == nil || IsNil(o.EgressIpNotificationUrl) {
		var ret string
		return ret
	}
	return *o.EgressIpNotificationUrl
}

// GetEgressIpNotificationUrlOk returns a tuple with the EgressIpNotificationUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetEgressIpNotificationUrlOk() (*string, bool) {
	if o == nil || IsNil(o.EgressIpNotificationUrl) {
		return nil, false
	}
	return o.EgressIpNotificationUrl, true
}

// HasEgressIpNotificationUrl returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasEgressIpNotificationUrl() bool {
	if o != nil && !IsNil(o.EgressIpNotificationUrl) {
		return true
	}

	return false
}

// SetEgressIpNotificationUrl gets a reference to the given string and assigns it to the EgressIpNotificationUrl field.
func (o *SharedInfrastructureSettings) SetEgressIpNotificationUrl(v string) {
	o.EgressIpNotificationUrl = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *SharedInfrastructureSettings) SetFolder(v string) {
	o.Folder = &v
}

// GetInfraBgpAs returns the InfraBgpAs field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetInfraBgpAs() string {
	if o == nil || IsNil(o.InfraBgpAs) {
		var ret string
		return ret
	}
	return *o.InfraBgpAs
}

// GetInfraBgpAsOk returns a tuple with the InfraBgpAs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetInfraBgpAsOk() (*string, bool) {
	if o == nil || IsNil(o.InfraBgpAs) {
		return nil, false
	}
	return o.InfraBgpAs, true
}

// HasInfraBgpAs returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasInfraBgpAs() bool {
	if o != nil && !IsNil(o.InfraBgpAs) {
		return true
	}

	return false
}

// SetInfraBgpAs gets a reference to the given string and assigns it to the InfraBgpAs field.
func (o *SharedInfrastructureSettings) SetInfraBgpAs(v string) {
	o.InfraBgpAs = &v
}

// GetInfrastructureSubnet returns the InfrastructureSubnet field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetInfrastructureSubnet() string {
	if o == nil || IsNil(o.InfrastructureSubnet) {
		var ret string
		return ret
	}
	return *o.InfrastructureSubnet
}

// GetInfrastructureSubnetOk returns a tuple with the InfrastructureSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetInfrastructureSubnetOk() (*string, bool) {
	if o == nil || IsNil(o.InfrastructureSubnet) {
		return nil, false
	}
	return o.InfrastructureSubnet, true
}

// HasInfrastructureSubnet returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasInfrastructureSubnet() bool {
	if o != nil && !IsNil(o.InfrastructureSubnet) {
		return true
	}

	return false
}

// SetInfrastructureSubnet gets a reference to the given string and assigns it to the InfrastructureSubnet field.
func (o *SharedInfrastructureSettings) SetInfrastructureSubnet(v string) {
	o.InfrastructureSubnet = &v
}

// GetInfrastructureSubnetIpv6 returns the InfrastructureSubnetIpv6 field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetInfrastructureSubnetIpv6() string {
	if o == nil || IsNil(o.InfrastructureSubnetIpv6) {
		var ret string
		return ret
	}
	return *o.InfrastructureSubnetIpv6
}

// GetInfrastructureSubnetIpv6Ok returns a tuple with the InfrastructureSubnetIpv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetInfrastructureSubnetIpv6Ok() (*string, bool) {
	if o == nil || IsNil(o.InfrastructureSubnetIpv6) {
		return nil, false
	}
	return o.InfrastructureSubnetIpv6, true
}

// HasInfrastructureSubnetIpv6 returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasInfrastructureSubnetIpv6() bool {
	if o != nil && !IsNil(o.InfrastructureSubnetIpv6) {
		return true
	}

	return false
}

// SetInfrastructureSubnetIpv6 gets a reference to the given string and assigns it to the InfrastructureSubnetIpv6 field.
func (o *SharedInfrastructureSettings) SetInfrastructureSubnetIpv6(v string) {
	o.InfrastructureSubnetIpv6 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetIpv6() bool {
	if o == nil || IsNil(o.Ipv6) {
		var ret bool
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetIpv6Ok() (*bool, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given bool and assigns it to the Ipv6 field.
func (o *SharedInfrastructureSettings) SetIpv6(v bool) {
	o.Ipv6 = &v
}

// GetLoopbackIps returns the LoopbackIps field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetLoopbackIps() []string {
	if o == nil || IsNil(o.LoopbackIps) {
		var ret []string
		return ret
	}
	return o.LoopbackIps
}

// GetLoopbackIpsOk returns a tuple with the LoopbackIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetLoopbackIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.LoopbackIps) {
		return nil, false
	}
	return o.LoopbackIps, true
}

// HasLoopbackIps returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasLoopbackIps() bool {
	if o != nil && !IsNil(o.LoopbackIps) {
		return true
	}

	return false
}

// SetLoopbackIps gets a reference to the given []string and assigns it to the LoopbackIps field.
func (o *SharedInfrastructureSettings) SetLoopbackIps(v []string) {
	o.LoopbackIps = v
}

// GetTunnelMonitorIpAddress returns the TunnelMonitorIpAddress field value if set, zero value otherwise.
func (o *SharedInfrastructureSettings) GetTunnelMonitorIpAddress() string {
	if o == nil || IsNil(o.TunnelMonitorIpAddress) {
		var ret string
		return ret
	}
	return *o.TunnelMonitorIpAddress
}

// GetTunnelMonitorIpAddressOk returns a tuple with the TunnelMonitorIpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharedInfrastructureSettings) GetTunnelMonitorIpAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TunnelMonitorIpAddress) {
		return nil, false
	}
	return o.TunnelMonitorIpAddress, true
}

// HasTunnelMonitorIpAddress returns a boolean if a field has been set.
func (o *SharedInfrastructureSettings) HasTunnelMonitorIpAddress() bool {
	if o != nil && !IsNil(o.TunnelMonitorIpAddress) {
		return true
	}

	return false
}

// SetTunnelMonitorIpAddress gets a reference to the given string and assigns it to the TunnelMonitorIpAddress field.
func (o *SharedInfrastructureSettings) SetTunnelMonitorIpAddress(v string) {
	o.TunnelMonitorIpAddress = &v
}

func (o SharedInfrastructureSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharedInfrastructureSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKey) {
		toSerialize["api_key"] = o.ApiKey
	}
	if !IsNil(o.CaptivePortalRedirectIpAddress) {
		toSerialize["captive_portal_redirect_ip_address"] = o.CaptivePortalRedirectIpAddress
	}
	if !IsNil(o.ConnectorApplicationBlocks) {
		toSerialize["connector-application-blocks"] = o.ConnectorApplicationBlocks
	}
	if !IsNil(o.ConnectorConnectorBlocks) {
		toSerialize["connector-connector-blocks"] = o.ConnectorConnectorBlocks
	}
	if !IsNil(o.EgressIpNotificationUrl) {
		toSerialize["egress_ip_notification_url"] = o.EgressIpNotificationUrl
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.InfraBgpAs) {
		toSerialize["infra_bgp_as"] = o.InfraBgpAs
	}
	if !IsNil(o.InfrastructureSubnet) {
		toSerialize["infrastructure_subnet"] = o.InfrastructureSubnet
	}
	if !IsNil(o.InfrastructureSubnetIpv6) {
		toSerialize["infrastructure_subnet_ipv6"] = o.InfrastructureSubnetIpv6
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.LoopbackIps) {
		toSerialize["loopback_ips"] = o.LoopbackIps
	}
	if !IsNil(o.TunnelMonitorIpAddress) {
		toSerialize["tunnel_monitor_ip_address"] = o.TunnelMonitorIpAddress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SharedInfrastructureSettings) UnmarshalJSON(data []byte) (err error) {
	varSharedInfrastructureSettings := _SharedInfrastructureSettings{}

	err = json.Unmarshal(data, &varSharedInfrastructureSettings)

	if err != nil {
		return err
	}

	*o = SharedInfrastructureSettings(varSharedInfrastructureSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "api_key")
		delete(additionalProperties, "captive_portal_redirect_ip_address")
		delete(additionalProperties, "connector-application-blocks")
		delete(additionalProperties, "connector-connector-blocks")
		delete(additionalProperties, "egress_ip_notification_url")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "infra_bgp_as")
		delete(additionalProperties, "infrastructure_subnet")
		delete(additionalProperties, "infrastructure_subnet_ipv6")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "loopback_ips")
		delete(additionalProperties, "tunnel_monitor_ip_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSharedInfrastructureSettings struct {
	value *SharedInfrastructureSettings
	isSet bool
}

func (v NullableSharedInfrastructureSettings) Get() *SharedInfrastructureSettings {
	return v.value
}

func (v *NullableSharedInfrastructureSettings) Set(val *SharedInfrastructureSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSharedInfrastructureSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSharedInfrastructureSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharedInfrastructureSettings(val *SharedInfrastructureSettings) *NullableSharedInfrastructureSettings {
	return &NullableSharedInfrastructureSettings{value: val, isSet: true}
}

func (v NullableSharedInfrastructureSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharedInfrastructureSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
