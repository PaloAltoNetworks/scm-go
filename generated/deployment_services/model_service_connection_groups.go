/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ServiceConnectionGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceConnectionGroups{}

// ServiceConnectionGroups struct for ServiceConnectionGroups
type ServiceConnectionGroups struct {
	DisableSnat *bool `json:"disable_snat,omitempty"`
	// The folder containing the service connection group
	Folder string `json:"folder"`
	// The UUID of the service connection group
	Id                   string   `json:"id"`
	Name                 string   `json:"name"`
	PbfOnly              *bool    `json:"pbf_only,omitempty"`
	Target               []string `json:"target"`
	AdditionalProperties map[string]interface{}
}

type _ServiceConnectionGroups ServiceConnectionGroups

// NewServiceConnectionGroups instantiates a new ServiceConnectionGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceConnectionGroups(folder string, id string, name string, target []string) *ServiceConnectionGroups {
	this := ServiceConnectionGroups{}
	this.Folder = folder
	this.Id = id
	this.Name = name
	this.Target = target
	return &this
}

// NewServiceConnectionGroupsWithDefaults instantiates a new ServiceConnectionGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceConnectionGroupsWithDefaults() *ServiceConnectionGroups {
	this := ServiceConnectionGroups{}
	var folder string = "Service Connections"
	this.Folder = folder
	return &this
}

// GetDisableSnat returns the DisableSnat field value if set, zero value otherwise.
func (o *ServiceConnectionGroups) GetDisableSnat() bool {
	if o == nil || IsNil(o.DisableSnat) {
		var ret bool
		return ret
	}
	return *o.DisableSnat
}

// GetDisableSnatOk returns a tuple with the DisableSnat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetDisableSnatOk() (*bool, bool) {
	if o == nil || IsNil(o.DisableSnat) {
		return nil, false
	}
	return o.DisableSnat, true
}

// HasDisableSnat returns a boolean if a field has been set.
func (o *ServiceConnectionGroups) HasDisableSnat() bool {
	if o != nil && !IsNil(o.DisableSnat) {
		return true
	}

	return false
}

// SetDisableSnat gets a reference to the given bool and assigns it to the DisableSnat field.
func (o *ServiceConnectionGroups) SetDisableSnat(v bool) {
	o.DisableSnat = &v
}

// GetFolder returns the Folder field value
func (o *ServiceConnectionGroups) GetFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *ServiceConnectionGroups) SetFolder(v string) {
	o.Folder = v
}

// GetId returns the Id field value
func (o *ServiceConnectionGroups) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ServiceConnectionGroups) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ServiceConnectionGroups) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ServiceConnectionGroups) SetName(v string) {
	o.Name = v
}

// GetPbfOnly returns the PbfOnly field value if set, zero value otherwise.
func (o *ServiceConnectionGroups) GetPbfOnly() bool {
	if o == nil || IsNil(o.PbfOnly) {
		var ret bool
		return ret
	}
	return *o.PbfOnly
}

// GetPbfOnlyOk returns a tuple with the PbfOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetPbfOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.PbfOnly) {
		return nil, false
	}
	return o.PbfOnly, true
}

// HasPbfOnly returns a boolean if a field has been set.
func (o *ServiceConnectionGroups) HasPbfOnly() bool {
	if o != nil && !IsNil(o.PbfOnly) {
		return true
	}

	return false
}

// SetPbfOnly gets a reference to the given bool and assigns it to the PbfOnly field.
func (o *ServiceConnectionGroups) SetPbfOnly(v bool) {
	o.PbfOnly = &v
}

// GetTarget returns the Target field value
func (o *ServiceConnectionGroups) GetTarget() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Target
}

// GetTargetOk returns a tuple with the Target field value
// and a boolean to check if the value has been set.
func (o *ServiceConnectionGroups) GetTargetOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target, true
}

// SetTarget sets field value
func (o *ServiceConnectionGroups) SetTarget(v []string) {
	o.Target = v
}

func (o ServiceConnectionGroups) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceConnectionGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisableSnat) {
		toSerialize["disable_snat"] = o.DisableSnat
	}
	toSerialize["folder"] = o.Folder
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.PbfOnly) {
		toSerialize["pbf_only"] = o.PbfOnly
	}
	toSerialize["target"] = o.Target

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServiceConnectionGroups) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"folder",
		"id",
		"name",
		"target",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServiceConnectionGroups := _ServiceConnectionGroups{}

	err = json.Unmarshal(data, &varServiceConnectionGroups)

	if err != nil {
		return err
	}

	*o = ServiceConnectionGroups(varServiceConnectionGroups)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disable_snat")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "pbf_only")
		delete(additionalProperties, "target")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServiceConnectionGroups struct {
	value *ServiceConnectionGroups
	isSet bool
}

func (v NullableServiceConnectionGroups) Get() *ServiceConnectionGroups {
	return v.value
}

func (v *NullableServiceConnectionGroups) Set(val *ServiceConnectionGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceConnectionGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceConnectionGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceConnectionGroups(val *ServiceConnectionGroups) *NullableServiceConnectionGroups {
	return &NullableServiceConnectionGroups{value: val, isSet: true}
}

func (v NullableServiceConnectionGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceConnectionGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
