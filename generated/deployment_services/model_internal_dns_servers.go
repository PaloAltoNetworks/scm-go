/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
	"fmt"
)

// checks if the InternalDnsServers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InternalDnsServers{}

// InternalDnsServers struct for InternalDnsServers
type InternalDnsServers struct {
	// The DNS domain name(s)
	DomainName []string `json:"domain_name"`
	// The UUID of the internet DNS server resource
	Id string `json:"id"`
	// The name of the internet DNS server resource
	Name string `json:"name"`
	// The IP address of the primary DNS server
	Primary string `json:"primary"`
	// The IP address of the secondary DNS server
	Secondary            *string `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _InternalDnsServers InternalDnsServers

// NewInternalDnsServers instantiates a new InternalDnsServers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInternalDnsServers(domainName []string, id string, name string, primary string) *InternalDnsServers {
	this := InternalDnsServers{}
	this.DomainName = domainName
	this.Id = id
	this.Name = name
	this.Primary = primary
	return &this
}

// NewInternalDnsServersWithDefaults instantiates a new InternalDnsServers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInternalDnsServersWithDefaults() *InternalDnsServers {
	this := InternalDnsServers{}
	return &this
}

// GetDomainName returns the DomainName field value
func (o *InternalDnsServers) GetDomainName() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *InternalDnsServers) GetDomainNameOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainName, true
}

// SetDomainName sets field value
func (o *InternalDnsServers) SetDomainName(v []string) {
	o.DomainName = v
}

// GetId returns the Id field value
func (o *InternalDnsServers) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *InternalDnsServers) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *InternalDnsServers) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *InternalDnsServers) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InternalDnsServers) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InternalDnsServers) SetName(v string) {
	o.Name = v
}

// GetPrimary returns the Primary field value
func (o *InternalDnsServers) GetPrimary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *InternalDnsServers) GetPrimaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *InternalDnsServers) SetPrimary(v string) {
	o.Primary = v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *InternalDnsServers) GetSecondary() string {
	if o == nil || IsNil(o.Secondary) {
		var ret string
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InternalDnsServers) GetSecondaryOk() (*string, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *InternalDnsServers) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given string and assigns it to the Secondary field.
func (o *InternalDnsServers) SetSecondary(v string) {
	o.Secondary = &v
}

func (o InternalDnsServers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InternalDnsServers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain_name"] = o.DomainName
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["primary"] = o.Primary
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *InternalDnsServers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain_name",
		"id",
		"name",
		"primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInternalDnsServers := _InternalDnsServers{}

	err = json.Unmarshal(data, &varInternalDnsServers)

	if err != nil {
		return err
	}

	*o = InternalDnsServers(varInternalDnsServers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "domain_name")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableInternalDnsServers struct {
	value *InternalDnsServers
	isSet bool
}

func (v NullableInternalDnsServers) Get() *InternalDnsServers {
	return v.value
}

func (v *NullableInternalDnsServers) Set(val *InternalDnsServers) {
	v.value = val
	v.isSet = true
}

func (v NullableInternalDnsServers) IsSet() bool {
	return v.isSet
}

func (v *NullableInternalDnsServers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInternalDnsServers(val *InternalDnsServers) *NullableInternalDnsServers {
	return &NullableInternalDnsServers{value: val, isSet: true}
}

func (v NullableInternalDnsServers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInternalDnsServers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
