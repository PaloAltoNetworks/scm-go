/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
)

// checks if the SitesQos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitesQos{}

// SitesQos struct for SitesQos
type SitesQos struct {
	// The backup CIR in Mbps. This is distributed equally for all tunnels in the site.
	BackupCir *float32 `json:"backup_cir,omitempty"`
	// The CIR in Mbps. This is distributed equally for all tunnels in the site.
	Cir *float32 `json:"cir,omitempty"`
	// The name of the site QoS profile
	Profile              *string `json:"profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SitesQos SitesQos

// NewSitesQos instantiates a new SitesQos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSitesQos() *SitesQos {
	this := SitesQos{}
	return &this
}

// NewSitesQosWithDefaults instantiates a new SitesQos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitesQosWithDefaults() *SitesQos {
	this := SitesQos{}
	return &this
}

// GetBackupCir returns the BackupCir field value if set, zero value otherwise.
func (o *SitesQos) GetBackupCir() float32 {
	if o == nil || IsNil(o.BackupCir) {
		var ret float32
		return ret
	}
	return *o.BackupCir
}

// GetBackupCirOk returns a tuple with the BackupCir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitesQos) GetBackupCirOk() (*float32, bool) {
	if o == nil || IsNil(o.BackupCir) {
		return nil, false
	}
	return o.BackupCir, true
}

// HasBackupCir returns a boolean if a field has been set.
func (o *SitesQos) HasBackupCir() bool {
	if o != nil && !IsNil(o.BackupCir) {
		return true
	}

	return false
}

// SetBackupCir gets a reference to the given float32 and assigns it to the BackupCir field.
func (o *SitesQos) SetBackupCir(v float32) {
	o.BackupCir = &v
}

// GetCir returns the Cir field value if set, zero value otherwise.
func (o *SitesQos) GetCir() float32 {
	if o == nil || IsNil(o.Cir) {
		var ret float32
		return ret
	}
	return *o.Cir
}

// GetCirOk returns a tuple with the Cir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitesQos) GetCirOk() (*float32, bool) {
	if o == nil || IsNil(o.Cir) {
		return nil, false
	}
	return o.Cir, true
}

// HasCir returns a boolean if a field has been set.
func (o *SitesQos) HasCir() bool {
	if o != nil && !IsNil(o.Cir) {
		return true
	}

	return false
}

// SetCir gets a reference to the given float32 and assigns it to the Cir field.
func (o *SitesQos) SetCir(v float32) {
	o.Cir = &v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *SitesQos) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SitesQos) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *SitesQos) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *SitesQos) SetProfile(v string) {
	o.Profile = &v
}

func (o SitesQos) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitesQos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupCir) {
		toSerialize["backup_cir"] = o.BackupCir
	}
	if !IsNil(o.Cir) {
		toSerialize["cir"] = o.Cir
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SitesQos) UnmarshalJSON(data []byte) (err error) {
	varSitesQos := _SitesQos{}

	err = json.Unmarshal(data, &varSitesQos)

	if err != nil {
		return err
	}

	*o = SitesQos(varSitesQos)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "backup_cir")
		delete(additionalProperties, "cir")
		delete(additionalProperties, "profile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSitesQos struct {
	value *SitesQos
	isSet bool
}

func (v NullableSitesQos) Get() *SitesQos {
	return v.value
}

func (v *NullableSitesQos) Set(val *SitesQos) {
	v.value = val
	v.isSet = true
}

func (v NullableSitesQos) IsSet() bool {
	return v.isSet
}

func (v *NullableSitesQos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitesQos(val *SitesQos) *NullableSitesQos {
	return &NullableSitesQos{value: val, isSet: true}
}

func (v NullableSitesQos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitesQos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
