/*
Network Deployment

These APIs are used for defining and managing Prisma Access Remote Network and Service Connection configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package deployment_services

import (
	"encoding/json"
	"fmt"
)

// checks if the TrafficSteeringRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrafficSteeringRules{}

// TrafficSteeringRules struct for TrafficSteeringRules
type TrafficSteeringRules struct {
	Action      *TrafficSteeringRulesAction `json:"action,omitempty"`
	Category    []string                    `json:"category,omitempty"`
	Destination []string                    `json:"destination,omitempty"`
	// The folder containing the traffic steering rule
	Folder string `json:"folder"`
	// The UUID of the traffic steering rule
	Id                   string   `json:"id"`
	Name                 string   `json:"name"`
	Service              []string `json:"service"`
	Source               []string `json:"source"`
	SourceUser           []string `json:"source_user,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _TrafficSteeringRules TrafficSteeringRules

// NewTrafficSteeringRules instantiates a new TrafficSteeringRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrafficSteeringRules(folder string, id string, name string, service []string, source []string) *TrafficSteeringRules {
	this := TrafficSteeringRules{}
	this.Folder = folder
	this.Id = id
	this.Name = name
	this.Service = service
	this.Source = source
	return &this
}

// NewTrafficSteeringRulesWithDefaults instantiates a new TrafficSteeringRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrafficSteeringRulesWithDefaults() *TrafficSteeringRules {
	this := TrafficSteeringRules{}
	var folder string = "Service Connections"
	this.Folder = folder
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *TrafficSteeringRules) GetAction() TrafficSteeringRulesAction {
	if o == nil || IsNil(o.Action) {
		var ret TrafficSteeringRulesAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetActionOk() (*TrafficSteeringRulesAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *TrafficSteeringRules) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given TrafficSteeringRulesAction and assigns it to the Action field.
func (o *TrafficSteeringRules) SetAction(v TrafficSteeringRulesAction) {
	o.Action = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *TrafficSteeringRules) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *TrafficSteeringRules) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *TrafficSteeringRules) SetCategory(v []string) {
	o.Category = v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *TrafficSteeringRules) GetDestination() []string {
	if o == nil || IsNil(o.Destination) {
		var ret []string
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetDestinationOk() ([]string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *TrafficSteeringRules) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []string and assigns it to the Destination field.
func (o *TrafficSteeringRules) SetDestination(v []string) {
	o.Destination = v
}

// GetFolder returns the Folder field value
func (o *TrafficSteeringRules) GetFolder() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Folder
}

// GetFolderOk returns a tuple with the Folder field value
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Folder, true
}

// SetFolder sets field value
func (o *TrafficSteeringRules) SetFolder(v string) {
	o.Folder = v
}

// GetId returns the Id field value
func (o *TrafficSteeringRules) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TrafficSteeringRules) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *TrafficSteeringRules) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *TrafficSteeringRules) SetName(v string) {
	o.Name = v
}

// GetService returns the Service field value
func (o *TrafficSteeringRules) GetService() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetServiceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service, true
}

// SetService sets field value
func (o *TrafficSteeringRules) SetService(v []string) {
	o.Service = v
}

// GetSource returns the Source field value
func (o *TrafficSteeringRules) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetSourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *TrafficSteeringRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceUser returns the SourceUser field value if set, zero value otherwise.
func (o *TrafficSteeringRules) GetSourceUser() []string {
	if o == nil || IsNil(o.SourceUser) {
		var ret []string
		return ret
	}
	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TrafficSteeringRules) GetSourceUserOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceUser) {
		return nil, false
	}
	return o.SourceUser, true
}

// HasSourceUser returns a boolean if a field has been set.
func (o *TrafficSteeringRules) HasSourceUser() bool {
	if o != nil && !IsNil(o.SourceUser) {
		return true
	}

	return false
}

// SetSourceUser gets a reference to the given []string and assigns it to the SourceUser field.
func (o *TrafficSteeringRules) SetSourceUser(v []string) {
	o.SourceUser = v
}

func (o TrafficSteeringRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrafficSteeringRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	toSerialize["folder"] = o.Folder
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["service"] = o.Service
	toSerialize["source"] = o.Source
	if !IsNil(o.SourceUser) {
		toSerialize["source_user"] = o.SourceUser
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *TrafficSteeringRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"folder",
		"id",
		"name",
		"service",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrafficSteeringRules := _TrafficSteeringRules{}

	err = json.Unmarshal(data, &varTrafficSteeringRules)

	if err != nil {
		return err
	}

	*o = TrafficSteeringRules(varTrafficSteeringRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "category")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "service")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_user")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableTrafficSteeringRules struct {
	value *TrafficSteeringRules
	isSet bool
}

func (v NullableTrafficSteeringRules) Get() *TrafficSteeringRules {
	return v.value
}

func (v *NullableTrafficSteeringRules) Set(val *TrafficSteeringRules) {
	v.value = val
	v.isSet = true
}

func (v NullableTrafficSteeringRules) IsSet() bool {
	return v.isSet
}

func (v *NullableTrafficSteeringRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrafficSteeringRules(val *TrafficSteeringRules) *NullableTrafficSteeringRules {
	return &NullableTrafficSteeringRules{value: val, isSet: true}
}

func (v NullableTrafficSteeringRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrafficSteeringRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
