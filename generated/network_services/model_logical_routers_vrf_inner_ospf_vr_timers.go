/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerOspfVrTimers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerOspfVrTimers{}

// LogicalRoutersVrfInnerOspfVrTimers struct for LogicalRoutersVrfInnerOspfVrTimers
type LogicalRoutersVrfInnerOspfVrTimers struct {
	LsaInterval          *float32 `json:"lsa_interval,omitempty"`
	SpfCalculationDelay  *float32 `json:"spf_calculation_delay,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerOspfVrTimers LogicalRoutersVrfInnerOspfVrTimers

// NewLogicalRoutersVrfInnerOspfVrTimers instantiates a new LogicalRoutersVrfInnerOspfVrTimers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerOspfVrTimers() *LogicalRoutersVrfInnerOspfVrTimers {
	this := LogicalRoutersVrfInnerOspfVrTimers{}
	return &this
}

// NewLogicalRoutersVrfInnerOspfVrTimersWithDefaults instantiates a new LogicalRoutersVrfInnerOspfVrTimers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerOspfVrTimersWithDefaults() *LogicalRoutersVrfInnerOspfVrTimers {
	this := LogicalRoutersVrfInnerOspfVrTimers{}
	return &this
}

// GetLsaInterval returns the LsaInterval field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerOspfVrTimers) GetLsaInterval() float32 {
	if o == nil || IsNil(o.LsaInterval) {
		var ret float32
		return ret
	}
	return *o.LsaInterval
}

// GetLsaIntervalOk returns a tuple with the LsaInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerOspfVrTimers) GetLsaIntervalOk() (*float32, bool) {
	if o == nil || IsNil(o.LsaInterval) {
		return nil, false
	}
	return o.LsaInterval, true
}

// HasLsaInterval returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerOspfVrTimers) HasLsaInterval() bool {
	if o != nil && !IsNil(o.LsaInterval) {
		return true
	}

	return false
}

// SetLsaInterval gets a reference to the given float32 and assigns it to the LsaInterval field.
func (o *LogicalRoutersVrfInnerOspfVrTimers) SetLsaInterval(v float32) {
	o.LsaInterval = &v
}

// GetSpfCalculationDelay returns the SpfCalculationDelay field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerOspfVrTimers) GetSpfCalculationDelay() float32 {
	if o == nil || IsNil(o.SpfCalculationDelay) {
		var ret float32
		return ret
	}
	return *o.SpfCalculationDelay
}

// GetSpfCalculationDelayOk returns a tuple with the SpfCalculationDelay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerOspfVrTimers) GetSpfCalculationDelayOk() (*float32, bool) {
	if o == nil || IsNil(o.SpfCalculationDelay) {
		return nil, false
	}
	return o.SpfCalculationDelay, true
}

// HasSpfCalculationDelay returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerOspfVrTimers) HasSpfCalculationDelay() bool {
	if o != nil && !IsNil(o.SpfCalculationDelay) {
		return true
	}

	return false
}

// SetSpfCalculationDelay gets a reference to the given float32 and assigns it to the SpfCalculationDelay field.
func (o *LogicalRoutersVrfInnerOspfVrTimers) SetSpfCalculationDelay(v float32) {
	o.SpfCalculationDelay = &v
}

func (o LogicalRoutersVrfInnerOspfVrTimers) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerOspfVrTimers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LsaInterval) {
		toSerialize["lsa_interval"] = o.LsaInterval
	}
	if !IsNil(o.SpfCalculationDelay) {
		toSerialize["spf_calculation_delay"] = o.SpfCalculationDelay
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerOspfVrTimers) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerOspfVrTimers := _LogicalRoutersVrfInnerOspfVrTimers{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerOspfVrTimers)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerOspfVrTimers(varLogicalRoutersVrfInnerOspfVrTimers)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lsa_interval")
		delete(additionalProperties, "spf_calculation_delay")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerOspfVrTimers struct {
	value *LogicalRoutersVrfInnerOspfVrTimers
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerOspfVrTimers) Get() *LogicalRoutersVrfInnerOspfVrTimers {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerOspfVrTimers) Set(val *LogicalRoutersVrfInnerOspfVrTimers) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerOspfVrTimers) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerOspfVrTimers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerOspfVrTimers(val *LogicalRoutersVrfInnerOspfVrTimers) *NullableLogicalRoutersVrfInnerOspfVrTimers {
	return &NullableLogicalRoutersVrfInnerOspfVrTimers{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerOspfVrTimers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerOspfVrTimers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
