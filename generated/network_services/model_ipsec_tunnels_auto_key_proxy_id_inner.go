/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the IpsecTunnelsAutoKeyProxyIdInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpsecTunnelsAutoKeyProxyIdInner{}

// IpsecTunnelsAutoKeyProxyIdInner struct for IpsecTunnelsAutoKeyProxyIdInner
type IpsecTunnelsAutoKeyProxyIdInner struct {
	Local                *string                                  `json:"local,omitempty"`
	Name                 string                                   `json:"name"`
	Protocol             *IpsecTunnelsAutoKeyProxyIdInnerProtocol `json:"protocol,omitempty"`
	Remote               *string                                  `json:"remote,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IpsecTunnelsAutoKeyProxyIdInner IpsecTunnelsAutoKeyProxyIdInner

// NewIpsecTunnelsAutoKeyProxyIdInner instantiates a new IpsecTunnelsAutoKeyProxyIdInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpsecTunnelsAutoKeyProxyIdInner(name string) *IpsecTunnelsAutoKeyProxyIdInner {
	this := IpsecTunnelsAutoKeyProxyIdInner{}
	this.Name = name
	return &this
}

// NewIpsecTunnelsAutoKeyProxyIdInnerWithDefaults instantiates a new IpsecTunnelsAutoKeyProxyIdInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpsecTunnelsAutoKeyProxyIdInnerWithDefaults() *IpsecTunnelsAutoKeyProxyIdInner {
	this := IpsecTunnelsAutoKeyProxyIdInner{}
	return &this
}

// GetLocal returns the Local field value if set, zero value otherwise.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetLocal() string {
	if o == nil || IsNil(o.Local) {
		var ret string
		return ret
	}
	return *o.Local
}

// GetLocalOk returns a tuple with the Local field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetLocalOk() (*string, bool) {
	if o == nil || IsNil(o.Local) {
		return nil, false
	}
	return o.Local, true
}

// HasLocal returns a boolean if a field has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) HasLocal() bool {
	if o != nil && !IsNil(o.Local) {
		return true
	}

	return false
}

// SetLocal gets a reference to the given string and assigns it to the Local field.
func (o *IpsecTunnelsAutoKeyProxyIdInner) SetLocal(v string) {
	o.Local = &v
}

// GetName returns the Name field value
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IpsecTunnelsAutoKeyProxyIdInner) SetName(v string) {
	o.Name = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetProtocol() IpsecTunnelsAutoKeyProxyIdInnerProtocol {
	if o == nil || IsNil(o.Protocol) {
		var ret IpsecTunnelsAutoKeyProxyIdInnerProtocol
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetProtocolOk() (*IpsecTunnelsAutoKeyProxyIdInnerProtocol, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given IpsecTunnelsAutoKeyProxyIdInnerProtocol and assigns it to the Protocol field.
func (o *IpsecTunnelsAutoKeyProxyIdInner) SetProtocol(v IpsecTunnelsAutoKeyProxyIdInnerProtocol) {
	o.Protocol = &v
}

// GetRemote returns the Remote field value if set, zero value otherwise.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetRemote() string {
	if o == nil || IsNil(o.Remote) {
		var ret string
		return ret
	}
	return *o.Remote
}

// GetRemoteOk returns a tuple with the Remote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) GetRemoteOk() (*string, bool) {
	if o == nil || IsNil(o.Remote) {
		return nil, false
	}
	return o.Remote, true
}

// HasRemote returns a boolean if a field has been set.
func (o *IpsecTunnelsAutoKeyProxyIdInner) HasRemote() bool {
	if o != nil && !IsNil(o.Remote) {
		return true
	}

	return false
}

// SetRemote gets a reference to the given string and assigns it to the Remote field.
func (o *IpsecTunnelsAutoKeyProxyIdInner) SetRemote(v string) {
	o.Remote = &v
}

func (o IpsecTunnelsAutoKeyProxyIdInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpsecTunnelsAutoKeyProxyIdInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Local) {
		toSerialize["local"] = o.Local
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	if !IsNil(o.Remote) {
		toSerialize["remote"] = o.Remote
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpsecTunnelsAutoKeyProxyIdInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpsecTunnelsAutoKeyProxyIdInner := _IpsecTunnelsAutoKeyProxyIdInner{}

	err = json.Unmarshal(data, &varIpsecTunnelsAutoKeyProxyIdInner)

	if err != nil {
		return err
	}

	*o = IpsecTunnelsAutoKeyProxyIdInner(varIpsecTunnelsAutoKeyProxyIdInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "local")
		delete(additionalProperties, "name")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "remote")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpsecTunnelsAutoKeyProxyIdInner struct {
	value *IpsecTunnelsAutoKeyProxyIdInner
	isSet bool
}

func (v NullableIpsecTunnelsAutoKeyProxyIdInner) Get() *IpsecTunnelsAutoKeyProxyIdInner {
	return v.value
}

func (v *NullableIpsecTunnelsAutoKeyProxyIdInner) Set(val *IpsecTunnelsAutoKeyProxyIdInner) {
	v.value = val
	v.isSet = true
}

func (v NullableIpsecTunnelsAutoKeyProxyIdInner) IsSet() bool {
	return v.isSet
}

func (v *NullableIpsecTunnelsAutoKeyProxyIdInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpsecTunnelsAutoKeyProxyIdInner(val *IpsecTunnelsAutoKeyProxyIdInner) *NullableIpsecTunnelsAutoKeyProxyIdInner {
	return &NullableIpsecTunnelsAutoKeyProxyIdInner{value: val, isSet: true}
}

func (v NullableIpsecTunnelsAutoKeyProxyIdInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpsecTunnelsAutoKeyProxyIdInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
