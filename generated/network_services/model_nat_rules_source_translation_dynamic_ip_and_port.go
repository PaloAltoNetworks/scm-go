/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the NatRulesSourceTranslationDynamicIpAndPort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRulesSourceTranslationDynamicIpAndPort{}

// NatRulesSourceTranslationDynamicIpAndPort Dynamic IP and port
type NatRulesSourceTranslationDynamicIpAndPort struct {
	// Floating IP address
	FloatingIp *string `json:"floating_ip,omitempty"`
	// Interface name
	Interface *string `json:"interface,omitempty"`
	// Translated source IP address
	Ip *string `json:"ip,omitempty"`
	// Translated source IP addresses
	TranslatedAddress    []string `json:"translated_address,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NatRulesSourceTranslationDynamicIpAndPort NatRulesSourceTranslationDynamicIpAndPort

// NewNatRulesSourceTranslationDynamicIpAndPort instantiates a new NatRulesSourceTranslationDynamicIpAndPort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRulesSourceTranslationDynamicIpAndPort() *NatRulesSourceTranslationDynamicIpAndPort {
	this := NatRulesSourceTranslationDynamicIpAndPort{}
	return &this
}

// NewNatRulesSourceTranslationDynamicIpAndPortWithDefaults instantiates a new NatRulesSourceTranslationDynamicIpAndPort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesSourceTranslationDynamicIpAndPortWithDefaults() *NatRulesSourceTranslationDynamicIpAndPort {
	this := NatRulesSourceTranslationDynamicIpAndPort{}
	return &this
}

// GetFloatingIp returns the FloatingIp field value if set, zero value otherwise.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetFloatingIp() string {
	if o == nil || IsNil(o.FloatingIp) {
		var ret string
		return ret
	}
	return *o.FloatingIp
}

// GetFloatingIpOk returns a tuple with the FloatingIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetFloatingIpOk() (*string, bool) {
	if o == nil || IsNil(o.FloatingIp) {
		return nil, false
	}
	return o.FloatingIp, true
}

// HasFloatingIp returns a boolean if a field has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) HasFloatingIp() bool {
	if o != nil && !IsNil(o.FloatingIp) {
		return true
	}

	return false
}

// SetFloatingIp gets a reference to the given string and assigns it to the FloatingIp field.
func (o *NatRulesSourceTranslationDynamicIpAndPort) SetFloatingIp(v string) {
	o.FloatingIp = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *NatRulesSourceTranslationDynamicIpAndPort) SetInterface(v string) {
	o.Interface = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *NatRulesSourceTranslationDynamicIpAndPort) SetIp(v string) {
	o.Ip = &v
}

// GetTranslatedAddress returns the TranslatedAddress field value if set, zero value otherwise.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetTranslatedAddress() []string {
	if o == nil || IsNil(o.TranslatedAddress) {
		var ret []string
		return ret
	}
	return o.TranslatedAddress
}

// GetTranslatedAddressOk returns a tuple with the TranslatedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) GetTranslatedAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.TranslatedAddress) {
		return nil, false
	}
	return o.TranslatedAddress, true
}

// HasTranslatedAddress returns a boolean if a field has been set.
func (o *NatRulesSourceTranslationDynamicIpAndPort) HasTranslatedAddress() bool {
	if o != nil && !IsNil(o.TranslatedAddress) {
		return true
	}

	return false
}

// SetTranslatedAddress gets a reference to the given []string and assigns it to the TranslatedAddress field.
func (o *NatRulesSourceTranslationDynamicIpAndPort) SetTranslatedAddress(v []string) {
	o.TranslatedAddress = v
}

func (o NatRulesSourceTranslationDynamicIpAndPort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRulesSourceTranslationDynamicIpAndPort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FloatingIp) {
		toSerialize["floating_ip"] = o.FloatingIp
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.TranslatedAddress) {
		toSerialize["translated_address"] = o.TranslatedAddress
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRulesSourceTranslationDynamicIpAndPort) UnmarshalJSON(data []byte) (err error) {
	varNatRulesSourceTranslationDynamicIpAndPort := _NatRulesSourceTranslationDynamicIpAndPort{}

	err = json.Unmarshal(data, &varNatRulesSourceTranslationDynamicIpAndPort)

	if err != nil {
		return err
	}

	*o = NatRulesSourceTranslationDynamicIpAndPort(varNatRulesSourceTranslationDynamicIpAndPort)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "floating_ip")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "translated_address")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRulesSourceTranslationDynamicIpAndPort struct {
	value *NatRulesSourceTranslationDynamicIpAndPort
	isSet bool
}

func (v NullableNatRulesSourceTranslationDynamicIpAndPort) Get() *NatRulesSourceTranslationDynamicIpAndPort {
	return v.value
}

func (v *NullableNatRulesSourceTranslationDynamicIpAndPort) Set(val *NatRulesSourceTranslationDynamicIpAndPort) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRulesSourceTranslationDynamicIpAndPort) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRulesSourceTranslationDynamicIpAndPort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRulesSourceTranslationDynamicIpAndPort(val *NatRulesSourceTranslationDynamicIpAndPort) *NullableNatRulesSourceTranslationDynamicIpAndPort {
	return &NullableNatRulesSourceTranslationDynamicIpAndPort{value: val, isSet: true}
}

func (v NullableNatRulesSourceTranslationDynamicIpAndPort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRulesSourceTranslationDynamicIpAndPort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
