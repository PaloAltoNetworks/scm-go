/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RoutePrefixListsIpv4Ipv4EntryInnerPrefix type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePrefixListsIpv4Ipv4EntryInnerPrefix{}

// RoutePrefixListsIpv4Ipv4EntryInnerPrefix struct for RoutePrefixListsIpv4Ipv4EntryInnerPrefix
type RoutePrefixListsIpv4Ipv4EntryInnerPrefix struct {
	Entry *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry `json:"entry,omitempty"`
	// Network
	Network              *string `json:"network,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutePrefixListsIpv4Ipv4EntryInnerPrefix RoutePrefixListsIpv4Ipv4EntryInnerPrefix

// NewRoutePrefixListsIpv4Ipv4EntryInnerPrefix instantiates a new RoutePrefixListsIpv4Ipv4EntryInnerPrefix object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePrefixListsIpv4Ipv4EntryInnerPrefix() *RoutePrefixListsIpv4Ipv4EntryInnerPrefix {
	this := RoutePrefixListsIpv4Ipv4EntryInnerPrefix{}
	return &this
}

// NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixWithDefaults instantiates a new RoutePrefixListsIpv4Ipv4EntryInnerPrefix object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixWithDefaults() *RoutePrefixListsIpv4Ipv4EntryInnerPrefix {
	this := RoutePrefixListsIpv4Ipv4EntryInnerPrefix{}
	return &this
}

// GetEntry returns the Entry field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) GetEntry() RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry {
	if o == nil || IsNil(o.Entry) {
		var ret RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry
		return ret
	}
	return *o.Entry
}

// GetEntryOk returns a tuple with the Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) GetEntryOk() (*RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry, bool) {
	if o == nil || IsNil(o.Entry) {
		return nil, false
	}
	return o.Entry, true
}

// HasEntry returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) HasEntry() bool {
	if o != nil && !IsNil(o.Entry) {
		return true
	}

	return false
}

// SetEntry gets a reference to the given RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry and assigns it to the Entry field.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) SetEntry(v RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) {
	o.Entry = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) SetNetwork(v string) {
	o.Network = &v
}

func (o RoutePrefixListsIpv4Ipv4EntryInnerPrefix) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePrefixListsIpv4Ipv4EntryInnerPrefix) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Entry) {
		toSerialize["entry"] = o.Entry
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) UnmarshalJSON(data []byte) (err error) {
	varRoutePrefixListsIpv4Ipv4EntryInnerPrefix := _RoutePrefixListsIpv4Ipv4EntryInnerPrefix{}

	err = json.Unmarshal(data, &varRoutePrefixListsIpv4Ipv4EntryInnerPrefix)

	if err != nil {
		return err
	}

	*o = RoutePrefixListsIpv4Ipv4EntryInnerPrefix(varRoutePrefixListsIpv4Ipv4EntryInnerPrefix)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "entry")
		delete(additionalProperties, "network")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix struct {
	value *RoutePrefixListsIpv4Ipv4EntryInnerPrefix
	isSet bool
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) Get() *RoutePrefixListsIpv4Ipv4EntryInnerPrefix {
	return v.value
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) Set(val *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix(val *RoutePrefixListsIpv4Ipv4EntryInnerPrefix) *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix {
	return &NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix{value: val, isSet: true}
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefix) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
