/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the Layer3Subinterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Layer3Subinterfaces{}

// Layer3Subinterfaces struct for Layer3Subinterfaces
type Layer3Subinterfaces struct {
	// Layer 3 sub Interfaces ARP configuration
	Arp []Layer3SubinterfacesArpInner `json:"arp,omitempty"`
	// Description
	Comment    *string                        `json:"comment,omitempty"`
	DdnsConfig *Layer3SubinterfacesDdnsConfig `json:"ddns_config,omitempty"`
	// The device in which the resource is defined
	Device     *string                                  `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	DhcpClient *Layer3SubInterfacesDhcpClientDhcpClient `json:"dhcp-client,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// Interface management profile
	InterfaceManagementProfile *string  `json:"interface_management_profile,omitempty"`
	Ip                         []string `json:"ip,omitempty"`
	// MTU
	Mtu *float32 `json:"mtu,omitempty"`
	// L3 sub-interface name
	Name string `json:"name"`
	// Parent interface
	ParentInterface *string `json:"parent-interface,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// VLAN tag
	Tag                  *float32 `json:"tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Layer3Subinterfaces Layer3Subinterfaces

// NewLayer3Subinterfaces instantiates a new Layer3Subinterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayer3Subinterfaces(name string) *Layer3Subinterfaces {
	this := Layer3Subinterfaces{}
	this.Name = name
	return &this
}

// NewLayer3SubinterfacesWithDefaults instantiates a new Layer3Subinterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayer3SubinterfacesWithDefaults() *Layer3Subinterfaces {
	this := Layer3Subinterfaces{}
	return &this
}

// GetArp returns the Arp field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetArp() []Layer3SubinterfacesArpInner {
	if o == nil || IsNil(o.Arp) {
		var ret []Layer3SubinterfacesArpInner
		return ret
	}
	return o.Arp
}

// GetArpOk returns a tuple with the Arp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetArpOk() ([]Layer3SubinterfacesArpInner, bool) {
	if o == nil || IsNil(o.Arp) {
		return nil, false
	}
	return o.Arp, true
}

// HasArp returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasArp() bool {
	if o != nil && !IsNil(o.Arp) {
		return true
	}

	return false
}

// SetArp gets a reference to the given []Layer3SubinterfacesArpInner and assigns it to the Arp field.
func (o *Layer3Subinterfaces) SetArp(v []Layer3SubinterfacesArpInner) {
	o.Arp = v
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *Layer3Subinterfaces) SetComment(v string) {
	o.Comment = &v
}

// GetDdnsConfig returns the DdnsConfig field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetDdnsConfig() Layer3SubinterfacesDdnsConfig {
	if o == nil || IsNil(o.DdnsConfig) {
		var ret Layer3SubinterfacesDdnsConfig
		return ret
	}
	return *o.DdnsConfig
}

// GetDdnsConfigOk returns a tuple with the DdnsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetDdnsConfigOk() (*Layer3SubinterfacesDdnsConfig, bool) {
	if o == nil || IsNil(o.DdnsConfig) {
		return nil, false
	}
	return o.DdnsConfig, true
}

// HasDdnsConfig returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasDdnsConfig() bool {
	if o != nil && !IsNil(o.DdnsConfig) {
		return true
	}

	return false
}

// SetDdnsConfig gets a reference to the given Layer3SubinterfacesDdnsConfig and assigns it to the DdnsConfig field.
func (o *Layer3Subinterfaces) SetDdnsConfig(v Layer3SubinterfacesDdnsConfig) {
	o.DdnsConfig = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Layer3Subinterfaces) SetDevice(v string) {
	o.Device = &v
}

// GetDhcpClient returns the DhcpClient field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetDhcpClient() Layer3SubInterfacesDhcpClientDhcpClient {
	if o == nil || IsNil(o.DhcpClient) {
		var ret Layer3SubInterfacesDhcpClientDhcpClient
		return ret
	}
	return *o.DhcpClient
}

// GetDhcpClientOk returns a tuple with the DhcpClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetDhcpClientOk() (*Layer3SubInterfacesDhcpClientDhcpClient, bool) {
	if o == nil || IsNil(o.DhcpClient) {
		return nil, false
	}
	return o.DhcpClient, true
}

// HasDhcpClient returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasDhcpClient() bool {
	if o != nil && !IsNil(o.DhcpClient) {
		return true
	}

	return false
}

// SetDhcpClient gets a reference to the given Layer3SubInterfacesDhcpClientDhcpClient and assigns it to the DhcpClient field.
func (o *Layer3Subinterfaces) SetDhcpClient(v Layer3SubInterfacesDhcpClientDhcpClient) {
	o.DhcpClient = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *Layer3Subinterfaces) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Layer3Subinterfaces) SetId(v string) {
	o.Id = &v
}

// GetInterfaceManagementProfile returns the InterfaceManagementProfile field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetInterfaceManagementProfile() string {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		var ret string
		return ret
	}
	return *o.InterfaceManagementProfile
}

// GetInterfaceManagementProfileOk returns a tuple with the InterfaceManagementProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetInterfaceManagementProfileOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		return nil, false
	}
	return o.InterfaceManagementProfile, true
}

// HasInterfaceManagementProfile returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasInterfaceManagementProfile() bool {
	if o != nil && !IsNil(o.InterfaceManagementProfile) {
		return true
	}

	return false
}

// SetInterfaceManagementProfile gets a reference to the given string and assigns it to the InterfaceManagementProfile field.
func (o *Layer3Subinterfaces) SetInterfaceManagementProfile(v string) {
	o.InterfaceManagementProfile = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetIp() []string {
	if o == nil || IsNil(o.Ip) {
		var ret []string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetIpOk() ([]string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []string and assigns it to the Ip field.
func (o *Layer3Subinterfaces) SetIp(v []string) {
	o.Ip = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetMtu() float32 {
	if o == nil || IsNil(o.Mtu) {
		var ret float32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetMtuOk() (*float32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given float32 and assigns it to the Mtu field.
func (o *Layer3Subinterfaces) SetMtu(v float32) {
	o.Mtu = &v
}

// GetName returns the Name field value
func (o *Layer3Subinterfaces) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Layer3Subinterfaces) SetName(v string) {
	o.Name = v
}

// GetParentInterface returns the ParentInterface field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetParentInterface() string {
	if o == nil || IsNil(o.ParentInterface) {
		var ret string
		return ret
	}
	return *o.ParentInterface
}

// GetParentInterfaceOk returns a tuple with the ParentInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetParentInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ParentInterface) {
		return nil, false
	}
	return o.ParentInterface, true
}

// HasParentInterface returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasParentInterface() bool {
	if o != nil && !IsNil(o.ParentInterface) {
		return true
	}

	return false
}

// SetParentInterface gets a reference to the given string and assigns it to the ParentInterface field.
func (o *Layer3Subinterfaces) SetParentInterface(v string) {
	o.ParentInterface = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *Layer3Subinterfaces) SetSnippet(v string) {
	o.Snippet = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *Layer3Subinterfaces) GetTag() float32 {
	if o == nil || IsNil(o.Tag) {
		var ret float32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3Subinterfaces) GetTagOk() (*float32, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *Layer3Subinterfaces) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given float32 and assigns it to the Tag field.
func (o *Layer3Subinterfaces) SetTag(v float32) {
	o.Tag = &v
}

func (o Layer3Subinterfaces) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Layer3Subinterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arp) {
		toSerialize["arp"] = o.Arp
	}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DdnsConfig) {
		toSerialize["ddns_config"] = o.DdnsConfig
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DhcpClient) {
		toSerialize["dhcp-client"] = o.DhcpClient
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.InterfaceManagementProfile) {
		toSerialize["interface_management_profile"] = o.InterfaceManagementProfile
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.ParentInterface) {
		toSerialize["parent-interface"] = o.ParentInterface
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Layer3Subinterfaces) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayer3Subinterfaces := _Layer3Subinterfaces{}

	err = json.Unmarshal(data, &varLayer3Subinterfaces)

	if err != nil {
		return err
	}

	*o = Layer3Subinterfaces(varLayer3Subinterfaces)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "arp")
		delete(additionalProperties, "comment")
		delete(additionalProperties, "ddns_config")
		delete(additionalProperties, "device")
		delete(additionalProperties, "dhcp-client")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "interface_management_profile")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "name")
		delete(additionalProperties, "parent-interface")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLayer3Subinterfaces struct {
	value *Layer3Subinterfaces
	isSet bool
}

func (v NullableLayer3Subinterfaces) Get() *Layer3Subinterfaces {
	return v.value
}

func (v *NullableLayer3Subinterfaces) Set(val *Layer3Subinterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableLayer3Subinterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableLayer3Subinterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayer3Subinterfaces(val *Layer3Subinterfaces) *NullableLayer3Subinterfaces {
	return &NullableLayer3Subinterfaces{value: val, isSet: true}
}

func (v NullableLayer3Subinterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayer3Subinterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
