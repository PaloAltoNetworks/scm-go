/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the AggEthernetArpInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggEthernetArpInner{}

// AggEthernetArpInner struct for AggEthernetArpInner
type AggEthernetArpInner struct {
	// MAC address
	HwAddress *string `json:"hw-address,omitempty"`
	// IP address
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AggEthernetArpInner AggEthernetArpInner

// NewAggEthernetArpInner instantiates a new AggEthernetArpInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggEthernetArpInner() *AggEthernetArpInner {
	this := AggEthernetArpInner{}
	return &this
}

// NewAggEthernetArpInnerWithDefaults instantiates a new AggEthernetArpInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggEthernetArpInnerWithDefaults() *AggEthernetArpInner {
	this := AggEthernetArpInner{}
	return &this
}

// GetHwAddress returns the HwAddress field value if set, zero value otherwise.
func (o *AggEthernetArpInner) GetHwAddress() string {
	if o == nil || IsNil(o.HwAddress) {
		var ret string
		return ret
	}
	return *o.HwAddress
}

// GetHwAddressOk returns a tuple with the HwAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggEthernetArpInner) GetHwAddressOk() (*string, bool) {
	if o == nil || IsNil(o.HwAddress) {
		return nil, false
	}
	return o.HwAddress, true
}

// HasHwAddress returns a boolean if a field has been set.
func (o *AggEthernetArpInner) HasHwAddress() bool {
	if o != nil && !IsNil(o.HwAddress) {
		return true
	}

	return false
}

// SetHwAddress gets a reference to the given string and assigns it to the HwAddress field.
func (o *AggEthernetArpInner) SetHwAddress(v string) {
	o.HwAddress = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AggEthernetArpInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggEthernetArpInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AggEthernetArpInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AggEthernetArpInner) SetName(v string) {
	o.Name = &v
}

func (o AggEthernetArpInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggEthernetArpInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HwAddress) {
		toSerialize["hw-address"] = o.HwAddress
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AggEthernetArpInner) UnmarshalJSON(data []byte) (err error) {
	varAggEthernetArpInner := _AggEthernetArpInner{}

	err = json.Unmarshal(data, &varAggEthernetArpInner)

	if err != nil {
		return err
	}

	*o = AggEthernetArpInner(varAggEthernetArpInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hw-address")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAggEthernetArpInner struct {
	value *AggEthernetArpInner
	isSet bool
}

func (v NullableAggEthernetArpInner) Get() *AggEthernetArpInner {
	return v.value
}

func (v *NullableAggEthernetArpInner) Set(val *AggEthernetArpInner) {
	v.value = val
	v.isSet = true
}

func (v NullableAggEthernetArpInner) IsSet() bool {
	return v.isSet
}

func (v *NullableAggEthernetArpInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggEthernetArpInner(val *AggEthernetArpInner) *NullableAggEthernetArpInner {
	return &NullableAggEthernetArpInner{value: val, isSet: true}
}

func (v NullableAggEthernetArpInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggEthernetArpInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
