/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the RoutePathAccessLists type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePathAccessLists{}

// RoutePathAccessLists struct for RoutePathAccessLists
type RoutePathAccessLists struct {
	// AS paths
	AspathEntry []RoutePathAccessListsAspathEntryInner `json:"aspath_entry,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// AS path access list name
	Name string `json:"name"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _RoutePathAccessLists RoutePathAccessLists

// NewRoutePathAccessLists instantiates a new RoutePathAccessLists object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePathAccessLists(name string) *RoutePathAccessLists {
	this := RoutePathAccessLists{}
	this.Name = name
	return &this
}

// NewRoutePathAccessListsWithDefaults instantiates a new RoutePathAccessLists object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePathAccessListsWithDefaults() *RoutePathAccessLists {
	this := RoutePathAccessLists{}
	return &this
}

// GetAspathEntry returns the AspathEntry field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetAspathEntry() []RoutePathAccessListsAspathEntryInner {
	if o == nil || IsNil(o.AspathEntry) {
		var ret []RoutePathAccessListsAspathEntryInner
		return ret
	}
	return o.AspathEntry
}

// GetAspathEntryOk returns a tuple with the AspathEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetAspathEntryOk() ([]RoutePathAccessListsAspathEntryInner, bool) {
	if o == nil || IsNil(o.AspathEntry) {
		return nil, false
	}
	return o.AspathEntry, true
}

// HasAspathEntry returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasAspathEntry() bool {
	if o != nil && !IsNil(o.AspathEntry) {
		return true
	}

	return false
}

// SetAspathEntry gets a reference to the given []RoutePathAccessListsAspathEntryInner and assigns it to the AspathEntry field.
func (o *RoutePathAccessLists) SetAspathEntry(v []RoutePathAccessListsAspathEntryInner) {
	o.AspathEntry = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *RoutePathAccessLists) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *RoutePathAccessLists) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *RoutePathAccessLists) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoutePathAccessLists) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *RoutePathAccessLists) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *RoutePathAccessLists) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *RoutePathAccessLists) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePathAccessLists) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *RoutePathAccessLists) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *RoutePathAccessLists) SetSnippet(v string) {
	o.Snippet = &v
}

func (o RoutePathAccessLists) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePathAccessLists) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AspathEntry) {
		toSerialize["aspath_entry"] = o.AspathEntry
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutePathAccessLists) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutePathAccessLists := _RoutePathAccessLists{}

	err = json.Unmarshal(data, &varRoutePathAccessLists)

	if err != nil {
		return err
	}

	*o = RoutePathAccessLists(varRoutePathAccessLists)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aspath_entry")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutePathAccessLists struct {
	value *RoutePathAccessLists
	isSet bool
}

func (v NullableRoutePathAccessLists) Get() *RoutePathAccessLists {
	return v.value
}

func (v *NullableRoutePathAccessLists) Set(val *RoutePathAccessLists) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePathAccessLists) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePathAccessLists) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePathAccessLists(val *RoutePathAccessLists) *NullableRoutePathAccessLists {
	return &NullableRoutePathAccessLists{value: val, isSet: true}
}

func (v NullableRoutePathAccessLists) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePathAccessLists) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
