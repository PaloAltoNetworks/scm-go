/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the DhcpInterfacesServer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfacesServer{}

// DhcpInterfacesServer struct for DhcpInterfacesServer
type DhcpInterfacesServer struct {
	// List of IP address pools
	IpPool []string `json:"ip_pool,omitempty"`
	// DHCP server mode
	Mode   *string                     `json:"mode,omitempty"`
	Option *DhcpInterfacesServerOption `json:"option,omitempty"`
	// Ping IP before allocating?
	ProbeIp *bool `json:"probe_ip,omitempty"`
	// List of IP reservations
	Reserved             []DhcpInterfacesServerReservedInner `json:"reserved,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfacesServer DhcpInterfacesServer

// NewDhcpInterfacesServer instantiates a new DhcpInterfacesServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfacesServer() *DhcpInterfacesServer {
	this := DhcpInterfacesServer{}
	return &this
}

// NewDhcpInterfacesServerWithDefaults instantiates a new DhcpInterfacesServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesServerWithDefaults() *DhcpInterfacesServer {
	this := DhcpInterfacesServer{}
	return &this
}

// GetIpPool returns the IpPool field value if set, zero value otherwise.
func (o *DhcpInterfacesServer) GetIpPool() []string {
	if o == nil || IsNil(o.IpPool) {
		var ret []string
		return ret
	}
	return o.IpPool
}

// GetIpPoolOk returns a tuple with the IpPool field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServer) GetIpPoolOk() ([]string, bool) {
	if o == nil || IsNil(o.IpPool) {
		return nil, false
	}
	return o.IpPool, true
}

// HasIpPool returns a boolean if a field has been set.
func (o *DhcpInterfacesServer) HasIpPool() bool {
	if o != nil && !IsNil(o.IpPool) {
		return true
	}

	return false
}

// SetIpPool gets a reference to the given []string and assigns it to the IpPool field.
func (o *DhcpInterfacesServer) SetIpPool(v []string) {
	o.IpPool = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *DhcpInterfacesServer) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServer) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *DhcpInterfacesServer) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *DhcpInterfacesServer) SetMode(v string) {
	o.Mode = &v
}

// GetOption returns the Option field value if set, zero value otherwise.
func (o *DhcpInterfacesServer) GetOption() DhcpInterfacesServerOption {
	if o == nil || IsNil(o.Option) {
		var ret DhcpInterfacesServerOption
		return ret
	}
	return *o.Option
}

// GetOptionOk returns a tuple with the Option field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServer) GetOptionOk() (*DhcpInterfacesServerOption, bool) {
	if o == nil || IsNil(o.Option) {
		return nil, false
	}
	return o.Option, true
}

// HasOption returns a boolean if a field has been set.
func (o *DhcpInterfacesServer) HasOption() bool {
	if o != nil && !IsNil(o.Option) {
		return true
	}

	return false
}

// SetOption gets a reference to the given DhcpInterfacesServerOption and assigns it to the Option field.
func (o *DhcpInterfacesServer) SetOption(v DhcpInterfacesServerOption) {
	o.Option = &v
}

// GetProbeIp returns the ProbeIp field value if set, zero value otherwise.
func (o *DhcpInterfacesServer) GetProbeIp() bool {
	if o == nil || IsNil(o.ProbeIp) {
		var ret bool
		return ret
	}
	return *o.ProbeIp
}

// GetProbeIpOk returns a tuple with the ProbeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServer) GetProbeIpOk() (*bool, bool) {
	if o == nil || IsNil(o.ProbeIp) {
		return nil, false
	}
	return o.ProbeIp, true
}

// HasProbeIp returns a boolean if a field has been set.
func (o *DhcpInterfacesServer) HasProbeIp() bool {
	if o != nil && !IsNil(o.ProbeIp) {
		return true
	}

	return false
}

// SetProbeIp gets a reference to the given bool and assigns it to the ProbeIp field.
func (o *DhcpInterfacesServer) SetProbeIp(v bool) {
	o.ProbeIp = &v
}

// GetReserved returns the Reserved field value if set, zero value otherwise.
func (o *DhcpInterfacesServer) GetReserved() []DhcpInterfacesServerReservedInner {
	if o == nil || IsNil(o.Reserved) {
		var ret []DhcpInterfacesServerReservedInner
		return ret
	}
	return o.Reserved
}

// GetReservedOk returns a tuple with the Reserved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServer) GetReservedOk() ([]DhcpInterfacesServerReservedInner, bool) {
	if o == nil || IsNil(o.Reserved) {
		return nil, false
	}
	return o.Reserved, true
}

// HasReserved returns a boolean if a field has been set.
func (o *DhcpInterfacesServer) HasReserved() bool {
	if o != nil && !IsNil(o.Reserved) {
		return true
	}

	return false
}

// SetReserved gets a reference to the given []DhcpInterfacesServerReservedInner and assigns it to the Reserved field.
func (o *DhcpInterfacesServer) SetReserved(v []DhcpInterfacesServerReservedInner) {
	o.Reserved = v
}

func (o DhcpInterfacesServer) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfacesServer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpPool) {
		toSerialize["ip_pool"] = o.IpPool
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.Option) {
		toSerialize["option"] = o.Option
	}
	if !IsNil(o.ProbeIp) {
		toSerialize["probe_ip"] = o.ProbeIp
	}
	if !IsNil(o.Reserved) {
		toSerialize["reserved"] = o.Reserved
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfacesServer) UnmarshalJSON(data []byte) (err error) {
	varDhcpInterfacesServer := _DhcpInterfacesServer{}

	err = json.Unmarshal(data, &varDhcpInterfacesServer)

	if err != nil {
		return err
	}

	*o = DhcpInterfacesServer(varDhcpInterfacesServer)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip_pool")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "option")
		delete(additionalProperties, "probe_ip")
		delete(additionalProperties, "reserved")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfacesServer struct {
	value *DhcpInterfacesServer
	isSet bool
}

func (v NullableDhcpInterfacesServer) Get() *DhcpInterfacesServer {
	return v.value
}

func (v *NullableDhcpInterfacesServer) Set(val *DhcpInterfacesServer) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfacesServer) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfacesServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfacesServer(val *DhcpInterfacesServer) *NullableDhcpInterfacesServer {
	return &NullableDhcpInterfacesServer{value: val, isSet: true}
}

func (v NullableDhcpInterfacesServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfacesServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
