/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysAuthentication type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysAuthentication{}

// IkeGatewaysAuthentication struct for IkeGatewaysAuthentication
type IkeGatewaysAuthentication struct {
	Certificate          *IkeGatewaysAuthenticationCertificate  `json:"certificate,omitempty"`
	PreSharedKey         *IkeGatewaysAuthenticationPreSharedKey `json:"pre_shared_key,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysAuthentication IkeGatewaysAuthentication

// NewIkeGatewaysAuthentication instantiates a new IkeGatewaysAuthentication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysAuthentication() *IkeGatewaysAuthentication {
	this := IkeGatewaysAuthentication{}
	return &this
}

// NewIkeGatewaysAuthenticationWithDefaults instantiates a new IkeGatewaysAuthentication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysAuthenticationWithDefaults() *IkeGatewaysAuthentication {
	this := IkeGatewaysAuthentication{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise.
func (o *IkeGatewaysAuthentication) GetCertificate() IkeGatewaysAuthenticationCertificate {
	if o == nil || IsNil(o.Certificate) {
		var ret IkeGatewaysAuthenticationCertificate
		return ret
	}
	return *o.Certificate
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthentication) GetCertificateOk() (*IkeGatewaysAuthenticationCertificate, bool) {
	if o == nil || IsNil(o.Certificate) {
		return nil, false
	}
	return o.Certificate, true
}

// HasCertificate returns a boolean if a field has been set.
func (o *IkeGatewaysAuthentication) HasCertificate() bool {
	if o != nil && !IsNil(o.Certificate) {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given IkeGatewaysAuthenticationCertificate and assigns it to the Certificate field.
func (o *IkeGatewaysAuthentication) SetCertificate(v IkeGatewaysAuthenticationCertificate) {
	o.Certificate = &v
}

// GetPreSharedKey returns the PreSharedKey field value if set, zero value otherwise.
func (o *IkeGatewaysAuthentication) GetPreSharedKey() IkeGatewaysAuthenticationPreSharedKey {
	if o == nil || IsNil(o.PreSharedKey) {
		var ret IkeGatewaysAuthenticationPreSharedKey
		return ret
	}
	return *o.PreSharedKey
}

// GetPreSharedKeyOk returns a tuple with the PreSharedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthentication) GetPreSharedKeyOk() (*IkeGatewaysAuthenticationPreSharedKey, bool) {
	if o == nil || IsNil(o.PreSharedKey) {
		return nil, false
	}
	return o.PreSharedKey, true
}

// HasPreSharedKey returns a boolean if a field has been set.
func (o *IkeGatewaysAuthentication) HasPreSharedKey() bool {
	if o != nil && !IsNil(o.PreSharedKey) {
		return true
	}

	return false
}

// SetPreSharedKey gets a reference to the given IkeGatewaysAuthenticationPreSharedKey and assigns it to the PreSharedKey field.
func (o *IkeGatewaysAuthentication) SetPreSharedKey(v IkeGatewaysAuthenticationPreSharedKey) {
	o.PreSharedKey = &v
}

func (o IkeGatewaysAuthentication) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysAuthentication) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificate) {
		toSerialize["certificate"] = o.Certificate
	}
	if !IsNil(o.PreSharedKey) {
		toSerialize["pre_shared_key"] = o.PreSharedKey
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysAuthentication) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysAuthentication := _IkeGatewaysAuthentication{}

	err = json.Unmarshal(data, &varIkeGatewaysAuthentication)

	if err != nil {
		return err
	}

	*o = IkeGatewaysAuthentication(varIkeGatewaysAuthentication)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "certificate")
		delete(additionalProperties, "pre_shared_key")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysAuthentication struct {
	value *IkeGatewaysAuthentication
	isSet bool
}

func (v NullableIkeGatewaysAuthentication) Get() *IkeGatewaysAuthentication {
	return v.value
}

func (v *NullableIkeGatewaysAuthentication) Set(val *IkeGatewaysAuthentication) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysAuthentication) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysAuthentication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysAuthentication(val *IkeGatewaysAuthentication) *NullableIkeGatewaysAuthentication {
	return &NullableIkeGatewaysAuthentication{value: val, isSet: true}
}

func (v NullableIkeGatewaysAuthentication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysAuthentication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
