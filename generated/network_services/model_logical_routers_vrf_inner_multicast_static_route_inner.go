/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the LogicalRoutersVrfInnerMulticastStaticRouteInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerMulticastStaticRouteInner{}

// LogicalRoutersVrfInnerMulticastStaticRouteInner struct for LogicalRoutersVrfInnerMulticastStaticRouteInner
type LogicalRoutersVrfInnerMulticastStaticRouteInner struct {
	Destination          *string                                                 `json:"destination,omitempty"`
	Interface            *string                                                 `json:"interface,omitempty"`
	Name                 string                                                  `json:"name"`
	Nexthop              *LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop `json:"nexthop,omitempty"`
	Preference           *float32                                                `json:"preference,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerMulticastStaticRouteInner LogicalRoutersVrfInnerMulticastStaticRouteInner

// NewLogicalRoutersVrfInnerMulticastStaticRouteInner instantiates a new LogicalRoutersVrfInnerMulticastStaticRouteInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerMulticastStaticRouteInner(name string) *LogicalRoutersVrfInnerMulticastStaticRouteInner {
	this := LogicalRoutersVrfInnerMulticastStaticRouteInner{}
	this.Name = name
	return &this
}

// NewLogicalRoutersVrfInnerMulticastStaticRouteInnerWithDefaults instantiates a new LogicalRoutersVrfInnerMulticastStaticRouteInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerMulticastStaticRouteInnerWithDefaults() *LogicalRoutersVrfInnerMulticastStaticRouteInner {
	this := LogicalRoutersVrfInnerMulticastStaticRouteInner{}
	return &this
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetDestination() string {
	if o == nil || IsNil(o.Destination) {
		var ret string
		return ret
	}
	return *o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetDestinationOk() (*string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given string and assigns it to the Destination field.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) SetDestination(v string) {
	o.Destination = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) SetInterface(v string) {
	o.Interface = &v
}

// GetName returns the Name field value
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) SetName(v string) {
	o.Name = v
}

// GetNexthop returns the Nexthop field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetNexthop() LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop {
	if o == nil || IsNil(o.Nexthop) {
		var ret LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop
		return ret
	}
	return *o.Nexthop
}

// GetNexthopOk returns a tuple with the Nexthop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetNexthopOk() (*LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop, bool) {
	if o == nil || IsNil(o.Nexthop) {
		return nil, false
	}
	return o.Nexthop, true
}

// HasNexthop returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) HasNexthop() bool {
	if o != nil && !IsNil(o.Nexthop) {
		return true
	}

	return false
}

// SetNexthop gets a reference to the given LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop and assigns it to the Nexthop field.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) SetNexthop(v LogicalRoutersVrfInnerMulticastStaticRouteInnerNexthop) {
	o.Nexthop = &v
}

// GetPreference returns the Preference field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetPreference() float32 {
	if o == nil || IsNil(o.Preference) {
		var ret float32
		return ret
	}
	return *o.Preference
}

// GetPreferenceOk returns a tuple with the Preference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) GetPreferenceOk() (*float32, bool) {
	if o == nil || IsNil(o.Preference) {
		return nil, false
	}
	return o.Preference, true
}

// HasPreference returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) HasPreference() bool {
	if o != nil && !IsNil(o.Preference) {
		return true
	}

	return false
}

// SetPreference gets a reference to the given float32 and assigns it to the Preference field.
func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) SetPreference(v float32) {
	o.Preference = &v
}

func (o LogicalRoutersVrfInnerMulticastStaticRouteInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerMulticastStaticRouteInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Nexthop) {
		toSerialize["nexthop"] = o.Nexthop
	}
	if !IsNil(o.Preference) {
		toSerialize["preference"] = o.Preference
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerMulticastStaticRouteInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalRoutersVrfInnerMulticastStaticRouteInner := _LogicalRoutersVrfInnerMulticastStaticRouteInner{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerMulticastStaticRouteInner)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerMulticastStaticRouteInner(varLogicalRoutersVrfInnerMulticastStaticRouteInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "destination")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nexthop")
		delete(additionalProperties, "preference")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerMulticastStaticRouteInner struct {
	value *LogicalRoutersVrfInnerMulticastStaticRouteInner
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) Get() *LogicalRoutersVrfInnerMulticastStaticRouteInner {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) Set(val *LogicalRoutersVrfInnerMulticastStaticRouteInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerMulticastStaticRouteInner(val *LogicalRoutersVrfInnerMulticastStaticRouteInner) *NullableLogicalRoutersVrfInnerMulticastStaticRouteInner {
	return &NullableLogicalRoutersVrfInnerMulticastStaticRouteInner{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerMulticastStaticRouteInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
