/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsProxiesCache type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsProxiesCache{}

// DnsProxiesCache struct for DnsProxiesCache
type DnsProxiesCache struct {
	// Cache EDNS UDP response
	CacheEdns *bool `json:"cache-edns,omitempty"`
	// Turn on caching for this DNS object
	Enabled              bool                   `json:"enabled"`
	MaxTtl               *DnsProxiesCacheMaxTtl `json:"max-ttl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsProxiesCache DnsProxiesCache

// NewDnsProxiesCache instantiates a new DnsProxiesCache object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsProxiesCache(enabled bool) *DnsProxiesCache {
	this := DnsProxiesCache{}
	var cacheEdns bool = true
	this.CacheEdns = &cacheEdns
	this.Enabled = enabled
	return &this
}

// NewDnsProxiesCacheWithDefaults instantiates a new DnsProxiesCache object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsProxiesCacheWithDefaults() *DnsProxiesCache {
	this := DnsProxiesCache{}
	var cacheEdns bool = true
	this.CacheEdns = &cacheEdns
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetCacheEdns returns the CacheEdns field value if set, zero value otherwise.
func (o *DnsProxiesCache) GetCacheEdns() bool {
	if o == nil || IsNil(o.CacheEdns) {
		var ret bool
		return ret
	}
	return *o.CacheEdns
}

// GetCacheEdnsOk returns a tuple with the CacheEdns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxiesCache) GetCacheEdnsOk() (*bool, bool) {
	if o == nil || IsNil(o.CacheEdns) {
		return nil, false
	}
	return o.CacheEdns, true
}

// HasCacheEdns returns a boolean if a field has been set.
func (o *DnsProxiesCache) HasCacheEdns() bool {
	if o != nil && !IsNil(o.CacheEdns) {
		return true
	}

	return false
}

// SetCacheEdns gets a reference to the given bool and assigns it to the CacheEdns field.
func (o *DnsProxiesCache) SetCacheEdns(v bool) {
	o.CacheEdns = &v
}

// GetEnabled returns the Enabled field value
func (o *DnsProxiesCache) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DnsProxiesCache) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DnsProxiesCache) SetEnabled(v bool) {
	o.Enabled = v
}

// GetMaxTtl returns the MaxTtl field value if set, zero value otherwise.
func (o *DnsProxiesCache) GetMaxTtl() DnsProxiesCacheMaxTtl {
	if o == nil || IsNil(o.MaxTtl) {
		var ret DnsProxiesCacheMaxTtl
		return ret
	}
	return *o.MaxTtl
}

// GetMaxTtlOk returns a tuple with the MaxTtl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxiesCache) GetMaxTtlOk() (*DnsProxiesCacheMaxTtl, bool) {
	if o == nil || IsNil(o.MaxTtl) {
		return nil, false
	}
	return o.MaxTtl, true
}

// HasMaxTtl returns a boolean if a field has been set.
func (o *DnsProxiesCache) HasMaxTtl() bool {
	if o != nil && !IsNil(o.MaxTtl) {
		return true
	}

	return false
}

// SetMaxTtl gets a reference to the given DnsProxiesCacheMaxTtl and assigns it to the MaxTtl field.
func (o *DnsProxiesCache) SetMaxTtl(v DnsProxiesCacheMaxTtl) {
	o.MaxTtl = &v
}

func (o DnsProxiesCache) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsProxiesCache) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CacheEdns) {
		toSerialize["cache-edns"] = o.CacheEdns
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.MaxTtl) {
		toSerialize["max-ttl"] = o.MaxTtl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsProxiesCache) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsProxiesCache := _DnsProxiesCache{}

	err = json.Unmarshal(data, &varDnsProxiesCache)

	if err != nil {
		return err
	}

	*o = DnsProxiesCache(varDnsProxiesCache)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache-edns")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "max-ttl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsProxiesCache struct {
	value *DnsProxiesCache
	isSet bool
}

func (v NullableDnsProxiesCache) Get() *DnsProxiesCache {
	return v.value
}

func (v *NullableDnsProxiesCache) Set(val *DnsProxiesCache) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsProxiesCache) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsProxiesCache) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsProxiesCache(val *DnsProxiesCache) *NullableDnsProxiesCache {
	return &NullableDnsProxiesCache{value: val, isSet: true}
}

func (v NullableDnsProxiesCache) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsProxiesCache) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
