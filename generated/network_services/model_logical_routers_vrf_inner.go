/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the LogicalRoutersVrfInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInner{}

// LogicalRoutersVrfInner struct for LogicalRoutersVrfInner
type LogicalRoutersVrfInner struct {
	AdminDists           *LogicalRoutersVrfInnerAdminDists   `json:"admin_dists,omitempty"`
	Bgp                  *LogicalRoutersVrfInnerBgp          `json:"bgp,omitempty"`
	Ecmp                 *LogicalRoutersVrfInnerEcmp         `json:"ecmp,omitempty"`
	GlobalVrid           *int32                              `json:"global_vrid,omitempty"`
	Interface            []string                            `json:"interface,omitempty"`
	Multicast            *LogicalRoutersVrfInnerMulticast    `json:"multicast,omitempty"`
	Name                 string                              `json:"name"`
	Ospf                 *LogicalRoutersVrfInnerOspf         `json:"ospf,omitempty"`
	Ospfv3               *LogicalRoutersVrfInnerOspfv3       `json:"ospfv3,omitempty"`
	RibFilter            *LogicalRoutersVrfInnerRibFilter    `json:"rib_filter,omitempty"`
	Rip                  *LogicalRoutersVrfInnerRip          `json:"rip,omitempty"`
	RoutingTable         *LogicalRoutersVrfInnerRoutingTable `json:"routing_table,omitempty"`
	SdwanType            *string                             `json:"sdwan_type,omitempty"`
	VrAdminDists         *LogicalRoutersVrfInnerVrAdminDists `json:"vr_admin_dists,omitempty"`
	ZoneName             *string                             `json:"zone_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInner LogicalRoutersVrfInner

// NewLogicalRoutersVrfInner instantiates a new LogicalRoutersVrfInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInner(name string) *LogicalRoutersVrfInner {
	this := LogicalRoutersVrfInner{}
	this.Name = name
	return &this
}

// NewLogicalRoutersVrfInnerWithDefaults instantiates a new LogicalRoutersVrfInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerWithDefaults() *LogicalRoutersVrfInner {
	this := LogicalRoutersVrfInner{}
	return &this
}

// GetAdminDists returns the AdminDists field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetAdminDists() LogicalRoutersVrfInnerAdminDists {
	if o == nil || IsNil(o.AdminDists) {
		var ret LogicalRoutersVrfInnerAdminDists
		return ret
	}
	return *o.AdminDists
}

// GetAdminDistsOk returns a tuple with the AdminDists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetAdminDistsOk() (*LogicalRoutersVrfInnerAdminDists, bool) {
	if o == nil || IsNil(o.AdminDists) {
		return nil, false
	}
	return o.AdminDists, true
}

// HasAdminDists returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasAdminDists() bool {
	if o != nil && !IsNil(o.AdminDists) {
		return true
	}

	return false
}

// SetAdminDists gets a reference to the given LogicalRoutersVrfInnerAdminDists and assigns it to the AdminDists field.
func (o *LogicalRoutersVrfInner) SetAdminDists(v LogicalRoutersVrfInnerAdminDists) {
	o.AdminDists = &v
}

// GetBgp returns the Bgp field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetBgp() LogicalRoutersVrfInnerBgp {
	if o == nil || IsNil(o.Bgp) {
		var ret LogicalRoutersVrfInnerBgp
		return ret
	}
	return *o.Bgp
}

// GetBgpOk returns a tuple with the Bgp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetBgpOk() (*LogicalRoutersVrfInnerBgp, bool) {
	if o == nil || IsNil(o.Bgp) {
		return nil, false
	}
	return o.Bgp, true
}

// HasBgp returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasBgp() bool {
	if o != nil && !IsNil(o.Bgp) {
		return true
	}

	return false
}

// SetBgp gets a reference to the given LogicalRoutersVrfInnerBgp and assigns it to the Bgp field.
func (o *LogicalRoutersVrfInner) SetBgp(v LogicalRoutersVrfInnerBgp) {
	o.Bgp = &v
}

// GetEcmp returns the Ecmp field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetEcmp() LogicalRoutersVrfInnerEcmp {
	if o == nil || IsNil(o.Ecmp) {
		var ret LogicalRoutersVrfInnerEcmp
		return ret
	}
	return *o.Ecmp
}

// GetEcmpOk returns a tuple with the Ecmp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetEcmpOk() (*LogicalRoutersVrfInnerEcmp, bool) {
	if o == nil || IsNil(o.Ecmp) {
		return nil, false
	}
	return o.Ecmp, true
}

// HasEcmp returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasEcmp() bool {
	if o != nil && !IsNil(o.Ecmp) {
		return true
	}

	return false
}

// SetEcmp gets a reference to the given LogicalRoutersVrfInnerEcmp and assigns it to the Ecmp field.
func (o *LogicalRoutersVrfInner) SetEcmp(v LogicalRoutersVrfInnerEcmp) {
	o.Ecmp = &v
}

// GetGlobalVrid returns the GlobalVrid field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetGlobalVrid() int32 {
	if o == nil || IsNil(o.GlobalVrid) {
		var ret int32
		return ret
	}
	return *o.GlobalVrid
}

// GetGlobalVridOk returns a tuple with the GlobalVrid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetGlobalVridOk() (*int32, bool) {
	if o == nil || IsNil(o.GlobalVrid) {
		return nil, false
	}
	return o.GlobalVrid, true
}

// HasGlobalVrid returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasGlobalVrid() bool {
	if o != nil && !IsNil(o.GlobalVrid) {
		return true
	}

	return false
}

// SetGlobalVrid gets a reference to the given int32 and assigns it to the GlobalVrid field.
func (o *LogicalRoutersVrfInner) SetGlobalVrid(v int32) {
	o.GlobalVrid = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetInterface() []string {
	if o == nil || IsNil(o.Interface) {
		var ret []string
		return ret
	}
	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetInterfaceOk() ([]string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given []string and assigns it to the Interface field.
func (o *LogicalRoutersVrfInner) SetInterface(v []string) {
	o.Interface = v
}

// GetMulticast returns the Multicast field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetMulticast() LogicalRoutersVrfInnerMulticast {
	if o == nil || IsNil(o.Multicast) {
		var ret LogicalRoutersVrfInnerMulticast
		return ret
	}
	return *o.Multicast
}

// GetMulticastOk returns a tuple with the Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetMulticastOk() (*LogicalRoutersVrfInnerMulticast, bool) {
	if o == nil || IsNil(o.Multicast) {
		return nil, false
	}
	return o.Multicast, true
}

// HasMulticast returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasMulticast() bool {
	if o != nil && !IsNil(o.Multicast) {
		return true
	}

	return false
}

// SetMulticast gets a reference to the given LogicalRoutersVrfInnerMulticast and assigns it to the Multicast field.
func (o *LogicalRoutersVrfInner) SetMulticast(v LogicalRoutersVrfInnerMulticast) {
	o.Multicast = &v
}

// GetName returns the Name field value
func (o *LogicalRoutersVrfInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogicalRoutersVrfInner) SetName(v string) {
	o.Name = v
}

// GetOspf returns the Ospf field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetOspf() LogicalRoutersVrfInnerOspf {
	if o == nil || IsNil(o.Ospf) {
		var ret LogicalRoutersVrfInnerOspf
		return ret
	}
	return *o.Ospf
}

// GetOspfOk returns a tuple with the Ospf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetOspfOk() (*LogicalRoutersVrfInnerOspf, bool) {
	if o == nil || IsNil(o.Ospf) {
		return nil, false
	}
	return o.Ospf, true
}

// HasOspf returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasOspf() bool {
	if o != nil && !IsNil(o.Ospf) {
		return true
	}

	return false
}

// SetOspf gets a reference to the given LogicalRoutersVrfInnerOspf and assigns it to the Ospf field.
func (o *LogicalRoutersVrfInner) SetOspf(v LogicalRoutersVrfInnerOspf) {
	o.Ospf = &v
}

// GetOspfv3 returns the Ospfv3 field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetOspfv3() LogicalRoutersVrfInnerOspfv3 {
	if o == nil || IsNil(o.Ospfv3) {
		var ret LogicalRoutersVrfInnerOspfv3
		return ret
	}
	return *o.Ospfv3
}

// GetOspfv3Ok returns a tuple with the Ospfv3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetOspfv3Ok() (*LogicalRoutersVrfInnerOspfv3, bool) {
	if o == nil || IsNil(o.Ospfv3) {
		return nil, false
	}
	return o.Ospfv3, true
}

// HasOspfv3 returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasOspfv3() bool {
	if o != nil && !IsNil(o.Ospfv3) {
		return true
	}

	return false
}

// SetOspfv3 gets a reference to the given LogicalRoutersVrfInnerOspfv3 and assigns it to the Ospfv3 field.
func (o *LogicalRoutersVrfInner) SetOspfv3(v LogicalRoutersVrfInnerOspfv3) {
	o.Ospfv3 = &v
}

// GetRibFilter returns the RibFilter field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetRibFilter() LogicalRoutersVrfInnerRibFilter {
	if o == nil || IsNil(o.RibFilter) {
		var ret LogicalRoutersVrfInnerRibFilter
		return ret
	}
	return *o.RibFilter
}

// GetRibFilterOk returns a tuple with the RibFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetRibFilterOk() (*LogicalRoutersVrfInnerRibFilter, bool) {
	if o == nil || IsNil(o.RibFilter) {
		return nil, false
	}
	return o.RibFilter, true
}

// HasRibFilter returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasRibFilter() bool {
	if o != nil && !IsNil(o.RibFilter) {
		return true
	}

	return false
}

// SetRibFilter gets a reference to the given LogicalRoutersVrfInnerRibFilter and assigns it to the RibFilter field.
func (o *LogicalRoutersVrfInner) SetRibFilter(v LogicalRoutersVrfInnerRibFilter) {
	o.RibFilter = &v
}

// GetRip returns the Rip field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetRip() LogicalRoutersVrfInnerRip {
	if o == nil || IsNil(o.Rip) {
		var ret LogicalRoutersVrfInnerRip
		return ret
	}
	return *o.Rip
}

// GetRipOk returns a tuple with the Rip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetRipOk() (*LogicalRoutersVrfInnerRip, bool) {
	if o == nil || IsNil(o.Rip) {
		return nil, false
	}
	return o.Rip, true
}

// HasRip returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasRip() bool {
	if o != nil && !IsNil(o.Rip) {
		return true
	}

	return false
}

// SetRip gets a reference to the given LogicalRoutersVrfInnerRip and assigns it to the Rip field.
func (o *LogicalRoutersVrfInner) SetRip(v LogicalRoutersVrfInnerRip) {
	o.Rip = &v
}

// GetRoutingTable returns the RoutingTable field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetRoutingTable() LogicalRoutersVrfInnerRoutingTable {
	if o == nil || IsNil(o.RoutingTable) {
		var ret LogicalRoutersVrfInnerRoutingTable
		return ret
	}
	return *o.RoutingTable
}

// GetRoutingTableOk returns a tuple with the RoutingTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetRoutingTableOk() (*LogicalRoutersVrfInnerRoutingTable, bool) {
	if o == nil || IsNil(o.RoutingTable) {
		return nil, false
	}
	return o.RoutingTable, true
}

// HasRoutingTable returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasRoutingTable() bool {
	if o != nil && !IsNil(o.RoutingTable) {
		return true
	}

	return false
}

// SetRoutingTable gets a reference to the given LogicalRoutersVrfInnerRoutingTable and assigns it to the RoutingTable field.
func (o *LogicalRoutersVrfInner) SetRoutingTable(v LogicalRoutersVrfInnerRoutingTable) {
	o.RoutingTable = &v
}

// GetSdwanType returns the SdwanType field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetSdwanType() string {
	if o == nil || IsNil(o.SdwanType) {
		var ret string
		return ret
	}
	return *o.SdwanType
}

// GetSdwanTypeOk returns a tuple with the SdwanType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetSdwanTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SdwanType) {
		return nil, false
	}
	return o.SdwanType, true
}

// HasSdwanType returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasSdwanType() bool {
	if o != nil && !IsNil(o.SdwanType) {
		return true
	}

	return false
}

// SetSdwanType gets a reference to the given string and assigns it to the SdwanType field.
func (o *LogicalRoutersVrfInner) SetSdwanType(v string) {
	o.SdwanType = &v
}

// GetVrAdminDists returns the VrAdminDists field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetVrAdminDists() LogicalRoutersVrfInnerVrAdminDists {
	if o == nil || IsNil(o.VrAdminDists) {
		var ret LogicalRoutersVrfInnerVrAdminDists
		return ret
	}
	return *o.VrAdminDists
}

// GetVrAdminDistsOk returns a tuple with the VrAdminDists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetVrAdminDistsOk() (*LogicalRoutersVrfInnerVrAdminDists, bool) {
	if o == nil || IsNil(o.VrAdminDists) {
		return nil, false
	}
	return o.VrAdminDists, true
}

// HasVrAdminDists returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasVrAdminDists() bool {
	if o != nil && !IsNil(o.VrAdminDists) {
		return true
	}

	return false
}

// SetVrAdminDists gets a reference to the given LogicalRoutersVrfInnerVrAdminDists and assigns it to the VrAdminDists field.
func (o *LogicalRoutersVrfInner) SetVrAdminDists(v LogicalRoutersVrfInnerVrAdminDists) {
	o.VrAdminDists = &v
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInner) GetZoneName() string {
	if o == nil || IsNil(o.ZoneName) {
		var ret string
		return ret
	}
	return *o.ZoneName
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInner) GetZoneNameOk() (*string, bool) {
	if o == nil || IsNil(o.ZoneName) {
		return nil, false
	}
	return o.ZoneName, true
}

// HasZoneName returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInner) HasZoneName() bool {
	if o != nil && !IsNil(o.ZoneName) {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given string and assigns it to the ZoneName field.
func (o *LogicalRoutersVrfInner) SetZoneName(v string) {
	o.ZoneName = &v
}

func (o LogicalRoutersVrfInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdminDists) {
		toSerialize["admin_dists"] = o.AdminDists
	}
	if !IsNil(o.Bgp) {
		toSerialize["bgp"] = o.Bgp
	}
	if !IsNil(o.Ecmp) {
		toSerialize["ecmp"] = o.Ecmp
	}
	if !IsNil(o.GlobalVrid) {
		toSerialize["global_vrid"] = o.GlobalVrid
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.Multicast) {
		toSerialize["multicast"] = o.Multicast
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Ospf) {
		toSerialize["ospf"] = o.Ospf
	}
	if !IsNil(o.Ospfv3) {
		toSerialize["ospfv3"] = o.Ospfv3
	}
	if !IsNil(o.RibFilter) {
		toSerialize["rib_filter"] = o.RibFilter
	}
	if !IsNil(o.Rip) {
		toSerialize["rip"] = o.Rip
	}
	if !IsNil(o.RoutingTable) {
		toSerialize["routing_table"] = o.RoutingTable
	}
	if !IsNil(o.SdwanType) {
		toSerialize["sdwan_type"] = o.SdwanType
	}
	if !IsNil(o.VrAdminDists) {
		toSerialize["vr_admin_dists"] = o.VrAdminDists
	}
	if !IsNil(o.ZoneName) {
		toSerialize["zone_name"] = o.ZoneName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalRoutersVrfInner := _LogicalRoutersVrfInner{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInner)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInner(varLogicalRoutersVrfInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "admin_dists")
		delete(additionalProperties, "bgp")
		delete(additionalProperties, "ecmp")
		delete(additionalProperties, "global_vrid")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "multicast")
		delete(additionalProperties, "name")
		delete(additionalProperties, "ospf")
		delete(additionalProperties, "ospfv3")
		delete(additionalProperties, "rib_filter")
		delete(additionalProperties, "rip")
		delete(additionalProperties, "routing_table")
		delete(additionalProperties, "sdwan_type")
		delete(additionalProperties, "vr_admin_dists")
		delete(additionalProperties, "zone_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInner struct {
	value *LogicalRoutersVrfInner
	isSet bool
}

func (v NullableLogicalRoutersVrfInner) Get() *LogicalRoutersVrfInner {
	return v.value
}

func (v *NullableLogicalRoutersVrfInner) Set(val *LogicalRoutersVrfInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInner(val *LogicalRoutersVrfInner) *NullableLogicalRoutersVrfInner {
	return &NullableLogicalRoutersVrfInner{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
