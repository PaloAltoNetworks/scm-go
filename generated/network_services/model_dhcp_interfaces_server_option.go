/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the DhcpInterfacesServerOption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfacesServerOption{}

// DhcpInterfacesServerOption struct for DhcpInterfacesServerOption
type DhcpInterfacesServerOption struct {
	Dns *DhcpInterfacesServerOptionDns `json:"dns,omitempty"`
	// DNS suffix
	DnsSuffix *string `json:"dns_suffix,omitempty"`
	// Default gateway
	Gateway     *string                                `json:"gateway,omitempty"`
	Inheritance *DhcpInterfacesServerOptionInheritance `json:"inheritance,omitempty"`
	Lease       *DhcpInterfacesServerOptionLease       `json:"lease,omitempty"`
	Nis         *DhcpInterfacesServerOptionNis         `json:"nis,omitempty"`
	Ntp         *DhcpInterfacesServerOptionNtp         `json:"ntp,omitempty"`
	// POP3 server
	Pop3Server *string `json:"pop3_server,omitempty"`
	// SMTP server
	SmtpServer *string `json:"smtp_server,omitempty"`
	// Subnet mask
	SubnetMask *string `json:"subnet_mask,omitempty"`
	// Custom DHCP options
	UserDefined          []DhcpInterfacesServerOptionUserDefinedInner `json:"user_defined,omitempty"`
	Wins                 *DhcpInterfacesServerOptionWins              `json:"wins,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfacesServerOption DhcpInterfacesServerOption

// NewDhcpInterfacesServerOption instantiates a new DhcpInterfacesServerOption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfacesServerOption() *DhcpInterfacesServerOption {
	this := DhcpInterfacesServerOption{}
	return &this
}

// NewDhcpInterfacesServerOptionWithDefaults instantiates a new DhcpInterfacesServerOption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesServerOptionWithDefaults() *DhcpInterfacesServerOption {
	this := DhcpInterfacesServerOption{}
	return &this
}

// GetDns returns the Dns field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetDns() DhcpInterfacesServerOptionDns {
	if o == nil || IsNil(o.Dns) {
		var ret DhcpInterfacesServerOptionDns
		return ret
	}
	return *o.Dns
}

// GetDnsOk returns a tuple with the Dns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetDnsOk() (*DhcpInterfacesServerOptionDns, bool) {
	if o == nil || IsNil(o.Dns) {
		return nil, false
	}
	return o.Dns, true
}

// HasDns returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasDns() bool {
	if o != nil && !IsNil(o.Dns) {
		return true
	}

	return false
}

// SetDns gets a reference to the given DhcpInterfacesServerOptionDns and assigns it to the Dns field.
func (o *DhcpInterfacesServerOption) SetDns(v DhcpInterfacesServerOptionDns) {
	o.Dns = &v
}

// GetDnsSuffix returns the DnsSuffix field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetDnsSuffix() string {
	if o == nil || IsNil(o.DnsSuffix) {
		var ret string
		return ret
	}
	return *o.DnsSuffix
}

// GetDnsSuffixOk returns a tuple with the DnsSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetDnsSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.DnsSuffix) {
		return nil, false
	}
	return o.DnsSuffix, true
}

// HasDnsSuffix returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasDnsSuffix() bool {
	if o != nil && !IsNil(o.DnsSuffix) {
		return true
	}

	return false
}

// SetDnsSuffix gets a reference to the given string and assigns it to the DnsSuffix field.
func (o *DhcpInterfacesServerOption) SetDnsSuffix(v string) {
	o.DnsSuffix = &v
}

// GetGateway returns the Gateway field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetGateway() string {
	if o == nil || IsNil(o.Gateway) {
		var ret string
		return ret
	}
	return *o.Gateway
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetGatewayOk() (*string, bool) {
	if o == nil || IsNil(o.Gateway) {
		return nil, false
	}
	return o.Gateway, true
}

// HasGateway returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasGateway() bool {
	if o != nil && !IsNil(o.Gateway) {
		return true
	}

	return false
}

// SetGateway gets a reference to the given string and assigns it to the Gateway field.
func (o *DhcpInterfacesServerOption) SetGateway(v string) {
	o.Gateway = &v
}

// GetInheritance returns the Inheritance field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetInheritance() DhcpInterfacesServerOptionInheritance {
	if o == nil || IsNil(o.Inheritance) {
		var ret DhcpInterfacesServerOptionInheritance
		return ret
	}
	return *o.Inheritance
}

// GetInheritanceOk returns a tuple with the Inheritance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetInheritanceOk() (*DhcpInterfacesServerOptionInheritance, bool) {
	if o == nil || IsNil(o.Inheritance) {
		return nil, false
	}
	return o.Inheritance, true
}

// HasInheritance returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasInheritance() bool {
	if o != nil && !IsNil(o.Inheritance) {
		return true
	}

	return false
}

// SetInheritance gets a reference to the given DhcpInterfacesServerOptionInheritance and assigns it to the Inheritance field.
func (o *DhcpInterfacesServerOption) SetInheritance(v DhcpInterfacesServerOptionInheritance) {
	o.Inheritance = &v
}

// GetLease returns the Lease field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetLease() DhcpInterfacesServerOptionLease {
	if o == nil || IsNil(o.Lease) {
		var ret DhcpInterfacesServerOptionLease
		return ret
	}
	return *o.Lease
}

// GetLeaseOk returns a tuple with the Lease field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetLeaseOk() (*DhcpInterfacesServerOptionLease, bool) {
	if o == nil || IsNil(o.Lease) {
		return nil, false
	}
	return o.Lease, true
}

// HasLease returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasLease() bool {
	if o != nil && !IsNil(o.Lease) {
		return true
	}

	return false
}

// SetLease gets a reference to the given DhcpInterfacesServerOptionLease and assigns it to the Lease field.
func (o *DhcpInterfacesServerOption) SetLease(v DhcpInterfacesServerOptionLease) {
	o.Lease = &v
}

// GetNis returns the Nis field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetNis() DhcpInterfacesServerOptionNis {
	if o == nil || IsNil(o.Nis) {
		var ret DhcpInterfacesServerOptionNis
		return ret
	}
	return *o.Nis
}

// GetNisOk returns a tuple with the Nis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetNisOk() (*DhcpInterfacesServerOptionNis, bool) {
	if o == nil || IsNil(o.Nis) {
		return nil, false
	}
	return o.Nis, true
}

// HasNis returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasNis() bool {
	if o != nil && !IsNil(o.Nis) {
		return true
	}

	return false
}

// SetNis gets a reference to the given DhcpInterfacesServerOptionNis and assigns it to the Nis field.
func (o *DhcpInterfacesServerOption) SetNis(v DhcpInterfacesServerOptionNis) {
	o.Nis = &v
}

// GetNtp returns the Ntp field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetNtp() DhcpInterfacesServerOptionNtp {
	if o == nil || IsNil(o.Ntp) {
		var ret DhcpInterfacesServerOptionNtp
		return ret
	}
	return *o.Ntp
}

// GetNtpOk returns a tuple with the Ntp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetNtpOk() (*DhcpInterfacesServerOptionNtp, bool) {
	if o == nil || IsNil(o.Ntp) {
		return nil, false
	}
	return o.Ntp, true
}

// HasNtp returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasNtp() bool {
	if o != nil && !IsNil(o.Ntp) {
		return true
	}

	return false
}

// SetNtp gets a reference to the given DhcpInterfacesServerOptionNtp and assigns it to the Ntp field.
func (o *DhcpInterfacesServerOption) SetNtp(v DhcpInterfacesServerOptionNtp) {
	o.Ntp = &v
}

// GetPop3Server returns the Pop3Server field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetPop3Server() string {
	if o == nil || IsNil(o.Pop3Server) {
		var ret string
		return ret
	}
	return *o.Pop3Server
}

// GetPop3ServerOk returns a tuple with the Pop3Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetPop3ServerOk() (*string, bool) {
	if o == nil || IsNil(o.Pop3Server) {
		return nil, false
	}
	return o.Pop3Server, true
}

// HasPop3Server returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasPop3Server() bool {
	if o != nil && !IsNil(o.Pop3Server) {
		return true
	}

	return false
}

// SetPop3Server gets a reference to the given string and assigns it to the Pop3Server field.
func (o *DhcpInterfacesServerOption) SetPop3Server(v string) {
	o.Pop3Server = &v
}

// GetSmtpServer returns the SmtpServer field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetSmtpServer() string {
	if o == nil || IsNil(o.SmtpServer) {
		var ret string
		return ret
	}
	return *o.SmtpServer
}

// GetSmtpServerOk returns a tuple with the SmtpServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetSmtpServerOk() (*string, bool) {
	if o == nil || IsNil(o.SmtpServer) {
		return nil, false
	}
	return o.SmtpServer, true
}

// HasSmtpServer returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasSmtpServer() bool {
	if o != nil && !IsNil(o.SmtpServer) {
		return true
	}

	return false
}

// SetSmtpServer gets a reference to the given string and assigns it to the SmtpServer field.
func (o *DhcpInterfacesServerOption) SetSmtpServer(v string) {
	o.SmtpServer = &v
}

// GetSubnetMask returns the SubnetMask field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetSubnetMask() string {
	if o == nil || IsNil(o.SubnetMask) {
		var ret string
		return ret
	}
	return *o.SubnetMask
}

// GetSubnetMaskOk returns a tuple with the SubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetSubnetMaskOk() (*string, bool) {
	if o == nil || IsNil(o.SubnetMask) {
		return nil, false
	}
	return o.SubnetMask, true
}

// HasSubnetMask returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasSubnetMask() bool {
	if o != nil && !IsNil(o.SubnetMask) {
		return true
	}

	return false
}

// SetSubnetMask gets a reference to the given string and assigns it to the SubnetMask field.
func (o *DhcpInterfacesServerOption) SetSubnetMask(v string) {
	o.SubnetMask = &v
}

// GetUserDefined returns the UserDefined field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetUserDefined() []DhcpInterfacesServerOptionUserDefinedInner {
	if o == nil || IsNil(o.UserDefined) {
		var ret []DhcpInterfacesServerOptionUserDefinedInner
		return ret
	}
	return o.UserDefined
}

// GetUserDefinedOk returns a tuple with the UserDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetUserDefinedOk() ([]DhcpInterfacesServerOptionUserDefinedInner, bool) {
	if o == nil || IsNil(o.UserDefined) {
		return nil, false
	}
	return o.UserDefined, true
}

// HasUserDefined returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasUserDefined() bool {
	if o != nil && !IsNil(o.UserDefined) {
		return true
	}

	return false
}

// SetUserDefined gets a reference to the given []DhcpInterfacesServerOptionUserDefinedInner and assigns it to the UserDefined field.
func (o *DhcpInterfacesServerOption) SetUserDefined(v []DhcpInterfacesServerOptionUserDefinedInner) {
	o.UserDefined = v
}

// GetWins returns the Wins field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOption) GetWins() DhcpInterfacesServerOptionWins {
	if o == nil || IsNil(o.Wins) {
		var ret DhcpInterfacesServerOptionWins
		return ret
	}
	return *o.Wins
}

// GetWinsOk returns a tuple with the Wins field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOption) GetWinsOk() (*DhcpInterfacesServerOptionWins, bool) {
	if o == nil || IsNil(o.Wins) {
		return nil, false
	}
	return o.Wins, true
}

// HasWins returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOption) HasWins() bool {
	if o != nil && !IsNil(o.Wins) {
		return true
	}

	return false
}

// SetWins gets a reference to the given DhcpInterfacesServerOptionWins and assigns it to the Wins field.
func (o *DhcpInterfacesServerOption) SetWins(v DhcpInterfacesServerOptionWins) {
	o.Wins = &v
}

func (o DhcpInterfacesServerOption) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfacesServerOption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dns) {
		toSerialize["dns"] = o.Dns
	}
	if !IsNil(o.DnsSuffix) {
		toSerialize["dns_suffix"] = o.DnsSuffix
	}
	if !IsNil(o.Gateway) {
		toSerialize["gateway"] = o.Gateway
	}
	if !IsNil(o.Inheritance) {
		toSerialize["inheritance"] = o.Inheritance
	}
	if !IsNil(o.Lease) {
		toSerialize["lease"] = o.Lease
	}
	if !IsNil(o.Nis) {
		toSerialize["nis"] = o.Nis
	}
	if !IsNil(o.Ntp) {
		toSerialize["ntp"] = o.Ntp
	}
	if !IsNil(o.Pop3Server) {
		toSerialize["pop3_server"] = o.Pop3Server
	}
	if !IsNil(o.SmtpServer) {
		toSerialize["smtp_server"] = o.SmtpServer
	}
	if !IsNil(o.SubnetMask) {
		toSerialize["subnet_mask"] = o.SubnetMask
	}
	if !IsNil(o.UserDefined) {
		toSerialize["user_defined"] = o.UserDefined
	}
	if !IsNil(o.Wins) {
		toSerialize["wins"] = o.Wins
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfacesServerOption) UnmarshalJSON(data []byte) (err error) {
	varDhcpInterfacesServerOption := _DhcpInterfacesServerOption{}

	err = json.Unmarshal(data, &varDhcpInterfacesServerOption)

	if err != nil {
		return err
	}

	*o = DhcpInterfacesServerOption(varDhcpInterfacesServerOption)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dns")
		delete(additionalProperties, "dns_suffix")
		delete(additionalProperties, "gateway")
		delete(additionalProperties, "inheritance")
		delete(additionalProperties, "lease")
		delete(additionalProperties, "nis")
		delete(additionalProperties, "ntp")
		delete(additionalProperties, "pop3_server")
		delete(additionalProperties, "smtp_server")
		delete(additionalProperties, "subnet_mask")
		delete(additionalProperties, "user_defined")
		delete(additionalProperties, "wins")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfacesServerOption struct {
	value *DhcpInterfacesServerOption
	isSet bool
}

func (v NullableDhcpInterfacesServerOption) Get() *DhcpInterfacesServerOption {
	return v.value
}

func (v *NullableDhcpInterfacesServerOption) Set(val *DhcpInterfacesServerOption) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfacesServerOption) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfacesServerOption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfacesServerOption(val *DhcpInterfacesServerOption) *NullableDhcpInterfacesServerOption {
	return &NullableDhcpInterfacesServerOption{value: val, isSet: true}
}

func (v NullableDhcpInterfacesServerOption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfacesServerOption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
