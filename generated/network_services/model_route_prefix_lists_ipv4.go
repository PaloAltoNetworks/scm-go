/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RoutePrefixListsIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePrefixListsIpv4{}

// RoutePrefixListsIpv4 struct for RoutePrefixListsIpv4
type RoutePrefixListsIpv4 struct {
	// IPv4 prefix lists
	Ipv4Entry            []RoutePrefixListsIpv4Ipv4EntryInner `json:"ipv4_entry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutePrefixListsIpv4 RoutePrefixListsIpv4

// NewRoutePrefixListsIpv4 instantiates a new RoutePrefixListsIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePrefixListsIpv4() *RoutePrefixListsIpv4 {
	this := RoutePrefixListsIpv4{}
	return &this
}

// NewRoutePrefixListsIpv4WithDefaults instantiates a new RoutePrefixListsIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePrefixListsIpv4WithDefaults() *RoutePrefixListsIpv4 {
	this := RoutePrefixListsIpv4{}
	return &this
}

// GetIpv4Entry returns the Ipv4Entry field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4) GetIpv4Entry() []RoutePrefixListsIpv4Ipv4EntryInner {
	if o == nil || IsNil(o.Ipv4Entry) {
		var ret []RoutePrefixListsIpv4Ipv4EntryInner
		return ret
	}
	return o.Ipv4Entry
}

// GetIpv4EntryOk returns a tuple with the Ipv4Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4) GetIpv4EntryOk() ([]RoutePrefixListsIpv4Ipv4EntryInner, bool) {
	if o == nil || IsNil(o.Ipv4Entry) {
		return nil, false
	}
	return o.Ipv4Entry, true
}

// HasIpv4Entry returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4) HasIpv4Entry() bool {
	if o != nil && !IsNil(o.Ipv4Entry) {
		return true
	}

	return false
}

// SetIpv4Entry gets a reference to the given []RoutePrefixListsIpv4Ipv4EntryInner and assigns it to the Ipv4Entry field.
func (o *RoutePrefixListsIpv4) SetIpv4Entry(v []RoutePrefixListsIpv4Ipv4EntryInner) {
	o.Ipv4Entry = v
}

func (o RoutePrefixListsIpv4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePrefixListsIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4Entry) {
		toSerialize["ipv4_entry"] = o.Ipv4Entry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutePrefixListsIpv4) UnmarshalJSON(data []byte) (err error) {
	varRoutePrefixListsIpv4 := _RoutePrefixListsIpv4{}

	err = json.Unmarshal(data, &varRoutePrefixListsIpv4)

	if err != nil {
		return err
	}

	*o = RoutePrefixListsIpv4(varRoutePrefixListsIpv4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4_entry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutePrefixListsIpv4 struct {
	value *RoutePrefixListsIpv4
	isSet bool
}

func (v NullableRoutePrefixListsIpv4) Get() *RoutePrefixListsIpv4 {
	return v.value
}

func (v *NullableRoutePrefixListsIpv4) Set(val *RoutePrefixListsIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePrefixListsIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePrefixListsIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePrefixListsIpv4(val *RoutePrefixListsIpv4) *NullableRoutePrefixListsIpv4 {
	return &NullableRoutePrefixListsIpv4{value: val, isSet: true}
}

func (v NullableRoutePrefixListsIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePrefixListsIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
