/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry{}

// RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry struct for RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry
type RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry struct {
	// Greater than or equal to
	GreaterThanOrEqual *int32 `json:"greater_than_or_equal,omitempty"`
	// Less than or equal to
	LessThanOrEqual *int32 `json:"less_than_or_equal,omitempty"`
	// Network
	Network              *string `json:"network,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry

// NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry instantiates a new RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry() *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry {
	this := RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry{}
	return &this
}

// NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntryWithDefaults instantiates a new RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntryWithDefaults() *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry {
	this := RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry{}
	return &this
}

// GetGreaterThanOrEqual returns the GreaterThanOrEqual field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetGreaterThanOrEqual() int32 {
	if o == nil || IsNil(o.GreaterThanOrEqual) {
		var ret int32
		return ret
	}
	return *o.GreaterThanOrEqual
}

// GetGreaterThanOrEqualOk returns a tuple with the GreaterThanOrEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetGreaterThanOrEqualOk() (*int32, bool) {
	if o == nil || IsNil(o.GreaterThanOrEqual) {
		return nil, false
	}
	return o.GreaterThanOrEqual, true
}

// HasGreaterThanOrEqual returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) HasGreaterThanOrEqual() bool {
	if o != nil && !IsNil(o.GreaterThanOrEqual) {
		return true
	}

	return false
}

// SetGreaterThanOrEqual gets a reference to the given int32 and assigns it to the GreaterThanOrEqual field.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) SetGreaterThanOrEqual(v int32) {
	o.GreaterThanOrEqual = &v
}

// GetLessThanOrEqual returns the LessThanOrEqual field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetLessThanOrEqual() int32 {
	if o == nil || IsNil(o.LessThanOrEqual) {
		var ret int32
		return ret
	}
	return *o.LessThanOrEqual
}

// GetLessThanOrEqualOk returns a tuple with the LessThanOrEqual field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetLessThanOrEqualOk() (*int32, bool) {
	if o == nil || IsNil(o.LessThanOrEqual) {
		return nil, false
	}
	return o.LessThanOrEqual, true
}

// HasLessThanOrEqual returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) HasLessThanOrEqual() bool {
	if o != nil && !IsNil(o.LessThanOrEqual) {
		return true
	}

	return false
}

// SetLessThanOrEqual gets a reference to the given int32 and assigns it to the LessThanOrEqual field.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) SetLessThanOrEqual(v int32) {
	o.LessThanOrEqual = &v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetNetwork() string {
	if o == nil || IsNil(o.Network) {
		var ret string
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) GetNetworkOk() (*string, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given string and assigns it to the Network field.
func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) SetNetwork(v string) {
	o.Network = &v
}

func (o RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GreaterThanOrEqual) {
		toSerialize["greater_than_or_equal"] = o.GreaterThanOrEqual
	}
	if !IsNil(o.LessThanOrEqual) {
		toSerialize["less_than_or_equal"] = o.LessThanOrEqual
	}
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) UnmarshalJSON(data []byte) (err error) {
	varRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry := _RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry{}

	err = json.Unmarshal(data, &varRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry)

	if err != nil {
		return err
	}

	*o = RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry(varRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "greater_than_or_equal")
		delete(additionalProperties, "less_than_or_equal")
		delete(additionalProperties, "network")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry struct {
	value *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry
	isSet bool
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) Get() *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry {
	return v.value
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) Set(val *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry(val *RoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry {
	return &NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry{value: val, isSet: true}
}

func (v NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutePrefixListsIpv4Ipv4EntryInnerPrefixEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
