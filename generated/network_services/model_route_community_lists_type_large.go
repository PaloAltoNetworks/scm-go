/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RouteCommunityListsTypeLarge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteCommunityListsTypeLarge{}

// RouteCommunityListsTypeLarge struct for RouteCommunityListsTypeLarge
type RouteCommunityListsTypeLarge struct {
	// Large community lists
	LargeEntry           []RouteCommunityListsTypeLargeLargeEntryInner `json:"large_entry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteCommunityListsTypeLarge RouteCommunityListsTypeLarge

// NewRouteCommunityListsTypeLarge instantiates a new RouteCommunityListsTypeLarge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteCommunityListsTypeLarge() *RouteCommunityListsTypeLarge {
	this := RouteCommunityListsTypeLarge{}
	return &this
}

// NewRouteCommunityListsTypeLargeWithDefaults instantiates a new RouteCommunityListsTypeLarge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteCommunityListsTypeLargeWithDefaults() *RouteCommunityListsTypeLarge {
	this := RouteCommunityListsTypeLarge{}
	return &this
}

// GetLargeEntry returns the LargeEntry field value if set, zero value otherwise.
func (o *RouteCommunityListsTypeLarge) GetLargeEntry() []RouteCommunityListsTypeLargeLargeEntryInner {
	if o == nil || IsNil(o.LargeEntry) {
		var ret []RouteCommunityListsTypeLargeLargeEntryInner
		return ret
	}
	return o.LargeEntry
}

// GetLargeEntryOk returns a tuple with the LargeEntry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCommunityListsTypeLarge) GetLargeEntryOk() ([]RouteCommunityListsTypeLargeLargeEntryInner, bool) {
	if o == nil || IsNil(o.LargeEntry) {
		return nil, false
	}
	return o.LargeEntry, true
}

// HasLargeEntry returns a boolean if a field has been set.
func (o *RouteCommunityListsTypeLarge) HasLargeEntry() bool {
	if o != nil && !IsNil(o.LargeEntry) {
		return true
	}

	return false
}

// SetLargeEntry gets a reference to the given []RouteCommunityListsTypeLargeLargeEntryInner and assigns it to the LargeEntry field.
func (o *RouteCommunityListsTypeLarge) SetLargeEntry(v []RouteCommunityListsTypeLargeLargeEntryInner) {
	o.LargeEntry = v
}

func (o RouteCommunityListsTypeLarge) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteCommunityListsTypeLarge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LargeEntry) {
		toSerialize["large_entry"] = o.LargeEntry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteCommunityListsTypeLarge) UnmarshalJSON(data []byte) (err error) {
	varRouteCommunityListsTypeLarge := _RouteCommunityListsTypeLarge{}

	err = json.Unmarshal(data, &varRouteCommunityListsTypeLarge)

	if err != nil {
		return err
	}

	*o = RouteCommunityListsTypeLarge(varRouteCommunityListsTypeLarge)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "large_entry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteCommunityListsTypeLarge struct {
	value *RouteCommunityListsTypeLarge
	isSet bool
}

func (v NullableRouteCommunityListsTypeLarge) Get() *RouteCommunityListsTypeLarge {
	return v.value
}

func (v *NullableRouteCommunityListsTypeLarge) Set(val *RouteCommunityListsTypeLarge) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteCommunityListsTypeLarge) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteCommunityListsTypeLarge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteCommunityListsTypeLarge(val *RouteCommunityListsTypeLarge) *NullableRouteCommunityListsTypeLarge {
	return &NullableRouteCommunityListsTypeLarge{value: val, isSet: true}
}

func (v NullableRouteCommunityListsTypeLarge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteCommunityListsTypeLarge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
