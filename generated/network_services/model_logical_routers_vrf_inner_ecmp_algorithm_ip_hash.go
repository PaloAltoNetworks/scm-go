/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerEcmpAlgorithmIpHash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}

// LogicalRoutersVrfInnerEcmpAlgorithmIpHash struct for LogicalRoutersVrfInnerEcmpAlgorithmIpHash
type LogicalRoutersVrfInnerEcmpAlgorithmIpHash struct {
	HashSeed             *float32 `json:"hash_seed,omitempty"`
	SrcOnly              *bool    `json:"src_only,omitempty"`
	UsePort              *bool    `json:"use_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerEcmpAlgorithmIpHash LogicalRoutersVrfInnerEcmpAlgorithmIpHash

// NewLogicalRoutersVrfInnerEcmpAlgorithmIpHash instantiates a new LogicalRoutersVrfInnerEcmpAlgorithmIpHash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerEcmpAlgorithmIpHash() *LogicalRoutersVrfInnerEcmpAlgorithmIpHash {
	this := LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}
	return &this
}

// NewLogicalRoutersVrfInnerEcmpAlgorithmIpHashWithDefaults instantiates a new LogicalRoutersVrfInnerEcmpAlgorithmIpHash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerEcmpAlgorithmIpHashWithDefaults() *LogicalRoutersVrfInnerEcmpAlgorithmIpHash {
	this := LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}
	return &this
}

// GetHashSeed returns the HashSeed field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetHashSeed() float32 {
	if o == nil || IsNil(o.HashSeed) {
		var ret float32
		return ret
	}
	return *o.HashSeed
}

// GetHashSeedOk returns a tuple with the HashSeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetHashSeedOk() (*float32, bool) {
	if o == nil || IsNil(o.HashSeed) {
		return nil, false
	}
	return o.HashSeed, true
}

// HasHashSeed returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) HasHashSeed() bool {
	if o != nil && !IsNil(o.HashSeed) {
		return true
	}

	return false
}

// SetHashSeed gets a reference to the given float32 and assigns it to the HashSeed field.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) SetHashSeed(v float32) {
	o.HashSeed = &v
}

// GetSrcOnly returns the SrcOnly field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetSrcOnly() bool {
	if o == nil || IsNil(o.SrcOnly) {
		var ret bool
		return ret
	}
	return *o.SrcOnly
}

// GetSrcOnlyOk returns a tuple with the SrcOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetSrcOnlyOk() (*bool, bool) {
	if o == nil || IsNil(o.SrcOnly) {
		return nil, false
	}
	return o.SrcOnly, true
}

// HasSrcOnly returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) HasSrcOnly() bool {
	if o != nil && !IsNil(o.SrcOnly) {
		return true
	}

	return false
}

// SetSrcOnly gets a reference to the given bool and assigns it to the SrcOnly field.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) SetSrcOnly(v bool) {
	o.SrcOnly = &v
}

// GetUsePort returns the UsePort field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetUsePort() bool {
	if o == nil || IsNil(o.UsePort) {
		var ret bool
		return ret
	}
	return *o.UsePort
}

// GetUsePortOk returns a tuple with the UsePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) GetUsePortOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePort) {
		return nil, false
	}
	return o.UsePort, true
}

// HasUsePort returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) HasUsePort() bool {
	if o != nil && !IsNil(o.UsePort) {
		return true
	}

	return false
}

// SetUsePort gets a reference to the given bool and assigns it to the UsePort field.
func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) SetUsePort(v bool) {
	o.UsePort = &v
}

func (o LogicalRoutersVrfInnerEcmpAlgorithmIpHash) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerEcmpAlgorithmIpHash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HashSeed) {
		toSerialize["hash_seed"] = o.HashSeed
	}
	if !IsNil(o.SrcOnly) {
		toSerialize["src_only"] = o.SrcOnly
	}
	if !IsNil(o.UsePort) {
		toSerialize["use_port"] = o.UsePort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerEcmpAlgorithmIpHash := _LogicalRoutersVrfInnerEcmpAlgorithmIpHash{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerEcmpAlgorithmIpHash)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerEcmpAlgorithmIpHash(varLogicalRoutersVrfInnerEcmpAlgorithmIpHash)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "hash_seed")
		delete(additionalProperties, "src_only")
		delete(additionalProperties, "use_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash struct {
	value *LogicalRoutersVrfInnerEcmpAlgorithmIpHash
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) Get() *LogicalRoutersVrfInnerEcmpAlgorithmIpHash {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) Set(val *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash(val *LogicalRoutersVrfInnerEcmpAlgorithmIpHash) *NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash {
	return &NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerEcmpAlgorithmIpHash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
