/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the LogicalRoutersVrfInnerBgpPeerGroupInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerBgpPeerGroupInner{}

// LogicalRoutersVrfInnerBgpPeerGroupInner struct for LogicalRoutersVrfInnerBgpPeerGroupInner
type LogicalRoutersVrfInnerBgpPeerGroupInner struct {
	AddressFamily           *LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily     `json:"address_family,omitempty"`
	AggregatedConfedAsPath  *bool                                                     `json:"aggregated_confed_as_path,omitempty"`
	ConnectionOptions       *LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions `json:"connection_options,omitempty"`
	Enable                  *bool                                                     `json:"enable,omitempty"`
	FilteringProfile        *LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily     `json:"filtering_profile,omitempty"`
	Name                    string                                                    `json:"name"`
	Peer                    []LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner        `json:"peer,omitempty"`
	SoftResetWithStoredInfo *bool                                                     `json:"soft_reset_with_stored_info,omitempty"`
	Type                    *LogicalRoutersVrfInnerBgpPeerGroupInnerType              `json:"type,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _LogicalRoutersVrfInnerBgpPeerGroupInner LogicalRoutersVrfInnerBgpPeerGroupInner

// NewLogicalRoutersVrfInnerBgpPeerGroupInner instantiates a new LogicalRoutersVrfInnerBgpPeerGroupInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerBgpPeerGroupInner(name string) *LogicalRoutersVrfInnerBgpPeerGroupInner {
	this := LogicalRoutersVrfInnerBgpPeerGroupInner{}
	this.Name = name
	return &this
}

// NewLogicalRoutersVrfInnerBgpPeerGroupInnerWithDefaults instantiates a new LogicalRoutersVrfInnerBgpPeerGroupInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerBgpPeerGroupInnerWithDefaults() *LogicalRoutersVrfInnerBgpPeerGroupInner {
	this := LogicalRoutersVrfInnerBgpPeerGroupInner{}
	return &this
}

// GetAddressFamily returns the AddressFamily field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetAddressFamily() LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily {
	if o == nil || IsNil(o.AddressFamily) {
		var ret LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
		return ret
	}
	return *o.AddressFamily
}

// GetAddressFamilyOk returns a tuple with the AddressFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetAddressFamilyOk() (*LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily, bool) {
	if o == nil || IsNil(o.AddressFamily) {
		return nil, false
	}
	return o.AddressFamily, true
}

// HasAddressFamily returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasAddressFamily() bool {
	if o != nil && !IsNil(o.AddressFamily) {
		return true
	}

	return false
}

// SetAddressFamily gets a reference to the given LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily and assigns it to the AddressFamily field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetAddressFamily(v LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily) {
	o.AddressFamily = &v
}

// GetAggregatedConfedAsPath returns the AggregatedConfedAsPath field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetAggregatedConfedAsPath() bool {
	if o == nil || IsNil(o.AggregatedConfedAsPath) {
		var ret bool
		return ret
	}
	return *o.AggregatedConfedAsPath
}

// GetAggregatedConfedAsPathOk returns a tuple with the AggregatedConfedAsPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetAggregatedConfedAsPathOk() (*bool, bool) {
	if o == nil || IsNil(o.AggregatedConfedAsPath) {
		return nil, false
	}
	return o.AggregatedConfedAsPath, true
}

// HasAggregatedConfedAsPath returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasAggregatedConfedAsPath() bool {
	if o != nil && !IsNil(o.AggregatedConfedAsPath) {
		return true
	}

	return false
}

// SetAggregatedConfedAsPath gets a reference to the given bool and assigns it to the AggregatedConfedAsPath field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetAggregatedConfedAsPath(v bool) {
	o.AggregatedConfedAsPath = &v
}

// GetConnectionOptions returns the ConnectionOptions field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetConnectionOptions() LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions {
	if o == nil || IsNil(o.ConnectionOptions) {
		var ret LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions
		return ret
	}
	return *o.ConnectionOptions
}

// GetConnectionOptionsOk returns a tuple with the ConnectionOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetConnectionOptionsOk() (*LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions, bool) {
	if o == nil || IsNil(o.ConnectionOptions) {
		return nil, false
	}
	return o.ConnectionOptions, true
}

// HasConnectionOptions returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasConnectionOptions() bool {
	if o != nil && !IsNil(o.ConnectionOptions) {
		return true
	}

	return false
}

// SetConnectionOptions gets a reference to the given LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions and assigns it to the ConnectionOptions field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetConnectionOptions(v LogicalRoutersVrfInnerBgpPeerGroupInnerConnectionOptions) {
	o.ConnectionOptions = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetEnable(v bool) {
	o.Enable = &v
}

// GetFilteringProfile returns the FilteringProfile field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetFilteringProfile() LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily {
	if o == nil || IsNil(o.FilteringProfile) {
		var ret LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily
		return ret
	}
	return *o.FilteringProfile
}

// GetFilteringProfileOk returns a tuple with the FilteringProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetFilteringProfileOk() (*LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily, bool) {
	if o == nil || IsNil(o.FilteringProfile) {
		return nil, false
	}
	return o.FilteringProfile, true
}

// HasFilteringProfile returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasFilteringProfile() bool {
	if o != nil && !IsNil(o.FilteringProfile) {
		return true
	}

	return false
}

// SetFilteringProfile gets a reference to the given LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily and assigns it to the FilteringProfile field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetFilteringProfile(v LogicalRoutersVrfInnerBgpPeerGroupInnerAddressFamily) {
	o.FilteringProfile = &v
}

// GetName returns the Name field value
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetName(v string) {
	o.Name = v
}

// GetPeer returns the Peer field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetPeer() []LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner {
	if o == nil || IsNil(o.Peer) {
		var ret []LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner
		return ret
	}
	return o.Peer
}

// GetPeerOk returns a tuple with the Peer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetPeerOk() ([]LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner, bool) {
	if o == nil || IsNil(o.Peer) {
		return nil, false
	}
	return o.Peer, true
}

// HasPeer returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasPeer() bool {
	if o != nil && !IsNil(o.Peer) {
		return true
	}

	return false
}

// SetPeer gets a reference to the given []LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner and assigns it to the Peer field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetPeer(v []LogicalRoutersVrfInnerBgpPeerGroupInnerPeerInner) {
	o.Peer = v
}

// GetSoftResetWithStoredInfo returns the SoftResetWithStoredInfo field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetSoftResetWithStoredInfo() bool {
	if o == nil || IsNil(o.SoftResetWithStoredInfo) {
		var ret bool
		return ret
	}
	return *o.SoftResetWithStoredInfo
}

// GetSoftResetWithStoredInfoOk returns a tuple with the SoftResetWithStoredInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetSoftResetWithStoredInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftResetWithStoredInfo) {
		return nil, false
	}
	return o.SoftResetWithStoredInfo, true
}

// HasSoftResetWithStoredInfo returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasSoftResetWithStoredInfo() bool {
	if o != nil && !IsNil(o.SoftResetWithStoredInfo) {
		return true
	}

	return false
}

// SetSoftResetWithStoredInfo gets a reference to the given bool and assigns it to the SoftResetWithStoredInfo field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetSoftResetWithStoredInfo(v bool) {
	o.SoftResetWithStoredInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetType() LogicalRoutersVrfInnerBgpPeerGroupInnerType {
	if o == nil || IsNil(o.Type) {
		var ret LogicalRoutersVrfInnerBgpPeerGroupInnerType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) GetTypeOk() (*LogicalRoutersVrfInnerBgpPeerGroupInnerType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LogicalRoutersVrfInnerBgpPeerGroupInnerType and assigns it to the Type field.
func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) SetType(v LogicalRoutersVrfInnerBgpPeerGroupInnerType) {
	o.Type = &v
}

func (o LogicalRoutersVrfInnerBgpPeerGroupInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerBgpPeerGroupInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddressFamily) {
		toSerialize["address_family"] = o.AddressFamily
	}
	if !IsNil(o.AggregatedConfedAsPath) {
		toSerialize["aggregated_confed_as_path"] = o.AggregatedConfedAsPath
	}
	if !IsNil(o.ConnectionOptions) {
		toSerialize["connection_options"] = o.ConnectionOptions
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.FilteringProfile) {
		toSerialize["filtering_profile"] = o.FilteringProfile
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Peer) {
		toSerialize["peer"] = o.Peer
	}
	if !IsNil(o.SoftResetWithStoredInfo) {
		toSerialize["soft_reset_with_stored_info"] = o.SoftResetWithStoredInfo
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerBgpPeerGroupInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogicalRoutersVrfInnerBgpPeerGroupInner := _LogicalRoutersVrfInnerBgpPeerGroupInner{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerBgpPeerGroupInner)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerBgpPeerGroupInner(varLogicalRoutersVrfInnerBgpPeerGroupInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "address_family")
		delete(additionalProperties, "aggregated_confed_as_path")
		delete(additionalProperties, "connection_options")
		delete(additionalProperties, "enable")
		delete(additionalProperties, "filtering_profile")
		delete(additionalProperties, "name")
		delete(additionalProperties, "peer")
		delete(additionalProperties, "soft_reset_with_stored_info")
		delete(additionalProperties, "type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerBgpPeerGroupInner struct {
	value *LogicalRoutersVrfInnerBgpPeerGroupInner
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerBgpPeerGroupInner) Get() *LogicalRoutersVrfInnerBgpPeerGroupInner {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerBgpPeerGroupInner) Set(val *LogicalRoutersVrfInnerBgpPeerGroupInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerBgpPeerGroupInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerBgpPeerGroupInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerBgpPeerGroupInner(val *LogicalRoutersVrfInnerBgpPeerGroupInner) *NullableLogicalRoutersVrfInnerBgpPeerGroupInner {
	return &NullableLogicalRoutersVrfInnerBgpPeerGroupInner{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerBgpPeerGroupInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerBgpPeerGroupInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
