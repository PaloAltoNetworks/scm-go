/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the VlanInterfacesDdnsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VlanInterfacesDdnsConfig{}

// VlanInterfacesDdnsConfig Dynamic DNS configuration specific to the Vlan Interfaces.
type VlanInterfacesDdnsConfig struct {
	// Certificate profile
	DdnsCertProfile string `json:"ddns-cert-profile"`
	// Enable DDNS?
	DdnsEnabled  *bool  `json:"ddns-enabled,omitempty"`
	DdnsHostname string `json:"ddns-hostname" validate:"regexp=^[a-zA-Z0-9_\\\\.\\\\-]+$"`
	// IP to register (static only)
	DdnsIp *string `json:"ddns-ip,omitempty"`
	// Update interval (days)
	DdnsUpdateInterval *int32 `json:"ddns-update-interval,omitempty"`
	// DDNS vendor
	DdnsVendor string `json:"ddns-vendor"`
	// DDNS vendor
	DdnsVendorConfig     string `json:"ddns-vendor-config"`
	AdditionalProperties map[string]interface{}
}

type _VlanInterfacesDdnsConfig VlanInterfacesDdnsConfig

// NewVlanInterfacesDdnsConfig instantiates a new VlanInterfacesDdnsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanInterfacesDdnsConfig(ddnsCertProfile string, ddnsHostname string, ddnsVendor string, ddnsVendorConfig string) *VlanInterfacesDdnsConfig {
	this := VlanInterfacesDdnsConfig{}
	this.DdnsCertProfile = ddnsCertProfile
	var ddnsEnabled bool = false
	this.DdnsEnabled = &ddnsEnabled
	this.DdnsHostname = ddnsHostname
	var ddnsUpdateInterval int32 = 1
	this.DdnsUpdateInterval = &ddnsUpdateInterval
	this.DdnsVendor = ddnsVendor
	this.DdnsVendorConfig = ddnsVendorConfig
	return &this
}

// NewVlanInterfacesDdnsConfigWithDefaults instantiates a new VlanInterfacesDdnsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanInterfacesDdnsConfigWithDefaults() *VlanInterfacesDdnsConfig {
	this := VlanInterfacesDdnsConfig{}
	var ddnsEnabled bool = false
	this.DdnsEnabled = &ddnsEnabled
	var ddnsUpdateInterval int32 = 1
	this.DdnsUpdateInterval = &ddnsUpdateInterval
	return &this
}

// GetDdnsCertProfile returns the DdnsCertProfile field value
func (o *VlanInterfacesDdnsConfig) GetDdnsCertProfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsCertProfile
}

// GetDdnsCertProfileOk returns a tuple with the DdnsCertProfile field value
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsCertProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsCertProfile, true
}

// SetDdnsCertProfile sets field value
func (o *VlanInterfacesDdnsConfig) SetDdnsCertProfile(v string) {
	o.DdnsCertProfile = v
}

// GetDdnsEnabled returns the DdnsEnabled field value if set, zero value otherwise.
func (o *VlanInterfacesDdnsConfig) GetDdnsEnabled() bool {
	if o == nil || IsNil(o.DdnsEnabled) {
		var ret bool
		return ret
	}
	return *o.DdnsEnabled
}

// GetDdnsEnabledOk returns a tuple with the DdnsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnabled) {
		return nil, false
	}
	return o.DdnsEnabled, true
}

// HasDdnsEnabled returns a boolean if a field has been set.
func (o *VlanInterfacesDdnsConfig) HasDdnsEnabled() bool {
	if o != nil && !IsNil(o.DdnsEnabled) {
		return true
	}

	return false
}

// SetDdnsEnabled gets a reference to the given bool and assigns it to the DdnsEnabled field.
func (o *VlanInterfacesDdnsConfig) SetDdnsEnabled(v bool) {
	o.DdnsEnabled = &v
}

// GetDdnsHostname returns the DdnsHostname field value
func (o *VlanInterfacesDdnsConfig) GetDdnsHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsHostname
}

// GetDdnsHostnameOk returns a tuple with the DdnsHostname field value
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsHostname, true
}

// SetDdnsHostname sets field value
func (o *VlanInterfacesDdnsConfig) SetDdnsHostname(v string) {
	o.DdnsHostname = v
}

// GetDdnsIp returns the DdnsIp field value if set, zero value otherwise.
func (o *VlanInterfacesDdnsConfig) GetDdnsIp() string {
	if o == nil || IsNil(o.DdnsIp) {
		var ret string
		return ret
	}
	return *o.DdnsIp
}

// GetDdnsIpOk returns a tuple with the DdnsIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsIpOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsIp) {
		return nil, false
	}
	return o.DdnsIp, true
}

// HasDdnsIp returns a boolean if a field has been set.
func (o *VlanInterfacesDdnsConfig) HasDdnsIp() bool {
	if o != nil && !IsNil(o.DdnsIp) {
		return true
	}

	return false
}

// SetDdnsIp gets a reference to the given string and assigns it to the DdnsIp field.
func (o *VlanInterfacesDdnsConfig) SetDdnsIp(v string) {
	o.DdnsIp = &v
}

// GetDdnsUpdateInterval returns the DdnsUpdateInterval field value if set, zero value otherwise.
func (o *VlanInterfacesDdnsConfig) GetDdnsUpdateInterval() int32 {
	if o == nil || IsNil(o.DdnsUpdateInterval) {
		var ret int32
		return ret
	}
	return *o.DdnsUpdateInterval
}

// GetDdnsUpdateIntervalOk returns a tuple with the DdnsUpdateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsUpdateIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.DdnsUpdateInterval) {
		return nil, false
	}
	return o.DdnsUpdateInterval, true
}

// HasDdnsUpdateInterval returns a boolean if a field has been set.
func (o *VlanInterfacesDdnsConfig) HasDdnsUpdateInterval() bool {
	if o != nil && !IsNil(o.DdnsUpdateInterval) {
		return true
	}

	return false
}

// SetDdnsUpdateInterval gets a reference to the given int32 and assigns it to the DdnsUpdateInterval field.
func (o *VlanInterfacesDdnsConfig) SetDdnsUpdateInterval(v int32) {
	o.DdnsUpdateInterval = &v
}

// GetDdnsVendor returns the DdnsVendor field value
func (o *VlanInterfacesDdnsConfig) GetDdnsVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsVendor
}

// GetDdnsVendorOk returns a tuple with the DdnsVendor field value
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsVendor, true
}

// SetDdnsVendor sets field value
func (o *VlanInterfacesDdnsConfig) SetDdnsVendor(v string) {
	o.DdnsVendor = v
}

// GetDdnsVendorConfig returns the DdnsVendorConfig field value
func (o *VlanInterfacesDdnsConfig) GetDdnsVendorConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsVendorConfig
}

// GetDdnsVendorConfigOk returns a tuple with the DdnsVendorConfig field value
// and a boolean to check if the value has been set.
func (o *VlanInterfacesDdnsConfig) GetDdnsVendorConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsVendorConfig, true
}

// SetDdnsVendorConfig sets field value
func (o *VlanInterfacesDdnsConfig) SetDdnsVendorConfig(v string) {
	o.DdnsVendorConfig = v
}

func (o VlanInterfacesDdnsConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VlanInterfacesDdnsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ddns-cert-profile"] = o.DdnsCertProfile
	if !IsNil(o.DdnsEnabled) {
		toSerialize["ddns-enabled"] = o.DdnsEnabled
	}
	toSerialize["ddns-hostname"] = o.DdnsHostname
	if !IsNil(o.DdnsIp) {
		toSerialize["ddns-ip"] = o.DdnsIp
	}
	if !IsNil(o.DdnsUpdateInterval) {
		toSerialize["ddns-update-interval"] = o.DdnsUpdateInterval
	}
	toSerialize["ddns-vendor"] = o.DdnsVendor
	toSerialize["ddns-vendor-config"] = o.DdnsVendorConfig

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *VlanInterfacesDdnsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ddns-cert-profile",
		"ddns-hostname",
		"ddns-vendor",
		"ddns-vendor-config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVlanInterfacesDdnsConfig := _VlanInterfacesDdnsConfig{}

	err = json.Unmarshal(data, &varVlanInterfacesDdnsConfig)

	if err != nil {
		return err
	}

	*o = VlanInterfacesDdnsConfig(varVlanInterfacesDdnsConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ddns-cert-profile")
		delete(additionalProperties, "ddns-enabled")
		delete(additionalProperties, "ddns-hostname")
		delete(additionalProperties, "ddns-ip")
		delete(additionalProperties, "ddns-update-interval")
		delete(additionalProperties, "ddns-vendor")
		delete(additionalProperties, "ddns-vendor-config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableVlanInterfacesDdnsConfig struct {
	value *VlanInterfacesDdnsConfig
	isSet bool
}

func (v NullableVlanInterfacesDdnsConfig) Get() *VlanInterfacesDdnsConfig {
	return v.value
}

func (v *NullableVlanInterfacesDdnsConfig) Set(val *VlanInterfacesDdnsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanInterfacesDdnsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanInterfacesDdnsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanInterfacesDdnsConfig(val *VlanInterfacesDdnsConfig) *NullableVlanInterfacesDdnsConfig {
	return &NullableVlanInterfacesDdnsConfig{value: val, isSet: true}
}

func (v NullableVlanInterfacesDdnsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanInterfacesDdnsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
