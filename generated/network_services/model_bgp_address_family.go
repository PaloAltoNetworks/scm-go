/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the BgpAddressFamily type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpAddressFamily{}

// BgpAddressFamily struct for BgpAddressFamily
type BgpAddressFamily struct {
	AddPath   *BgpAddressFamilyAddPath   `json:"add_path,omitempty"`
	AllowasIn *BgpAddressFamilyAllowasIn `json:"allowas_in,omitempty"`
	// Override ASNs in outbound updates if AS-Path equals Remote-AS?
	AsOverride *bool `json:"as_override,omitempty"`
	// Originate default route?
	DefaultOriginate *bool `json:"default_originate,omitempty"`
	// Default originate route map
	DefaultOriginateMap *string `json:"default_originate_map,omitempty"`
	// Enable?
	Enable          *bool                            `json:"enable,omitempty"`
	MaximumPrefix   *BgpAddressFamilyMaximumPrefix   `json:"maximum_prefix,omitempty"`
	NextHop         *BgpAddressFamilyNextHop         `json:"next_hop,omitempty"`
	Orf             *BgpAddressFamilyOrf             `json:"orf,omitempty"`
	RemovePrivateAS *BgpAddressFamilyRemovePrivateAS `json:"remove_private_AS,omitempty"`
	// Route reflector client?
	RouteReflectorClient *bool                          `json:"route_reflector_client,omitempty"`
	SendCommunity        *BgpAddressFamilySendCommunity `json:"send_community,omitempty"`
	// Soft reconfiguration of peer with stored routes?
	SoftReconfigWithStoredInfo *bool `json:"soft_reconfig_with_stored_info,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _BgpAddressFamily BgpAddressFamily

// NewBgpAddressFamily instantiates a new BgpAddressFamily object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpAddressFamily() *BgpAddressFamily {
	this := BgpAddressFamily{}
	return &this
}

// NewBgpAddressFamilyWithDefaults instantiates a new BgpAddressFamily object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpAddressFamilyWithDefaults() *BgpAddressFamily {
	this := BgpAddressFamily{}
	return &this
}

// GetAddPath returns the AddPath field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetAddPath() BgpAddressFamilyAddPath {
	if o == nil || IsNil(o.AddPath) {
		var ret BgpAddressFamilyAddPath
		return ret
	}
	return *o.AddPath
}

// GetAddPathOk returns a tuple with the AddPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetAddPathOk() (*BgpAddressFamilyAddPath, bool) {
	if o == nil || IsNil(o.AddPath) {
		return nil, false
	}
	return o.AddPath, true
}

// HasAddPath returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasAddPath() bool {
	if o != nil && !IsNil(o.AddPath) {
		return true
	}

	return false
}

// SetAddPath gets a reference to the given BgpAddressFamilyAddPath and assigns it to the AddPath field.
func (o *BgpAddressFamily) SetAddPath(v BgpAddressFamilyAddPath) {
	o.AddPath = &v
}

// GetAllowasIn returns the AllowasIn field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetAllowasIn() BgpAddressFamilyAllowasIn {
	if o == nil || IsNil(o.AllowasIn) {
		var ret BgpAddressFamilyAllowasIn
		return ret
	}
	return *o.AllowasIn
}

// GetAllowasInOk returns a tuple with the AllowasIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetAllowasInOk() (*BgpAddressFamilyAllowasIn, bool) {
	if o == nil || IsNil(o.AllowasIn) {
		return nil, false
	}
	return o.AllowasIn, true
}

// HasAllowasIn returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasAllowasIn() bool {
	if o != nil && !IsNil(o.AllowasIn) {
		return true
	}

	return false
}

// SetAllowasIn gets a reference to the given BgpAddressFamilyAllowasIn and assigns it to the AllowasIn field.
func (o *BgpAddressFamily) SetAllowasIn(v BgpAddressFamilyAllowasIn) {
	o.AllowasIn = &v
}

// GetAsOverride returns the AsOverride field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetAsOverride() bool {
	if o == nil || IsNil(o.AsOverride) {
		var ret bool
		return ret
	}
	return *o.AsOverride
}

// GetAsOverrideOk returns a tuple with the AsOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetAsOverrideOk() (*bool, bool) {
	if o == nil || IsNil(o.AsOverride) {
		return nil, false
	}
	return o.AsOverride, true
}

// HasAsOverride returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasAsOverride() bool {
	if o != nil && !IsNil(o.AsOverride) {
		return true
	}

	return false
}

// SetAsOverride gets a reference to the given bool and assigns it to the AsOverride field.
func (o *BgpAddressFamily) SetAsOverride(v bool) {
	o.AsOverride = &v
}

// GetDefaultOriginate returns the DefaultOriginate field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetDefaultOriginate() bool {
	if o == nil || IsNil(o.DefaultOriginate) {
		var ret bool
		return ret
	}
	return *o.DefaultOriginate
}

// GetDefaultOriginateOk returns a tuple with the DefaultOriginate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetDefaultOriginateOk() (*bool, bool) {
	if o == nil || IsNil(o.DefaultOriginate) {
		return nil, false
	}
	return o.DefaultOriginate, true
}

// HasDefaultOriginate returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasDefaultOriginate() bool {
	if o != nil && !IsNil(o.DefaultOriginate) {
		return true
	}

	return false
}

// SetDefaultOriginate gets a reference to the given bool and assigns it to the DefaultOriginate field.
func (o *BgpAddressFamily) SetDefaultOriginate(v bool) {
	o.DefaultOriginate = &v
}

// GetDefaultOriginateMap returns the DefaultOriginateMap field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetDefaultOriginateMap() string {
	if o == nil || IsNil(o.DefaultOriginateMap) {
		var ret string
		return ret
	}
	return *o.DefaultOriginateMap
}

// GetDefaultOriginateMapOk returns a tuple with the DefaultOriginateMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetDefaultOriginateMapOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultOriginateMap) {
		return nil, false
	}
	return o.DefaultOriginateMap, true
}

// HasDefaultOriginateMap returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasDefaultOriginateMap() bool {
	if o != nil && !IsNil(o.DefaultOriginateMap) {
		return true
	}

	return false
}

// SetDefaultOriginateMap gets a reference to the given string and assigns it to the DefaultOriginateMap field.
func (o *BgpAddressFamily) SetDefaultOriginateMap(v string) {
	o.DefaultOriginateMap = &v
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *BgpAddressFamily) SetEnable(v bool) {
	o.Enable = &v
}

// GetMaximumPrefix returns the MaximumPrefix field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetMaximumPrefix() BgpAddressFamilyMaximumPrefix {
	if o == nil || IsNil(o.MaximumPrefix) {
		var ret BgpAddressFamilyMaximumPrefix
		return ret
	}
	return *o.MaximumPrefix
}

// GetMaximumPrefixOk returns a tuple with the MaximumPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetMaximumPrefixOk() (*BgpAddressFamilyMaximumPrefix, bool) {
	if o == nil || IsNil(o.MaximumPrefix) {
		return nil, false
	}
	return o.MaximumPrefix, true
}

// HasMaximumPrefix returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasMaximumPrefix() bool {
	if o != nil && !IsNil(o.MaximumPrefix) {
		return true
	}

	return false
}

// SetMaximumPrefix gets a reference to the given BgpAddressFamilyMaximumPrefix and assigns it to the MaximumPrefix field.
func (o *BgpAddressFamily) SetMaximumPrefix(v BgpAddressFamilyMaximumPrefix) {
	o.MaximumPrefix = &v
}

// GetNextHop returns the NextHop field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetNextHop() BgpAddressFamilyNextHop {
	if o == nil || IsNil(o.NextHop) {
		var ret BgpAddressFamilyNextHop
		return ret
	}
	return *o.NextHop
}

// GetNextHopOk returns a tuple with the NextHop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetNextHopOk() (*BgpAddressFamilyNextHop, bool) {
	if o == nil || IsNil(o.NextHop) {
		return nil, false
	}
	return o.NextHop, true
}

// HasNextHop returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasNextHop() bool {
	if o != nil && !IsNil(o.NextHop) {
		return true
	}

	return false
}

// SetNextHop gets a reference to the given BgpAddressFamilyNextHop and assigns it to the NextHop field.
func (o *BgpAddressFamily) SetNextHop(v BgpAddressFamilyNextHop) {
	o.NextHop = &v
}

// GetOrf returns the Orf field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetOrf() BgpAddressFamilyOrf {
	if o == nil || IsNil(o.Orf) {
		var ret BgpAddressFamilyOrf
		return ret
	}
	return *o.Orf
}

// GetOrfOk returns a tuple with the Orf field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetOrfOk() (*BgpAddressFamilyOrf, bool) {
	if o == nil || IsNil(o.Orf) {
		return nil, false
	}
	return o.Orf, true
}

// HasOrf returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasOrf() bool {
	if o != nil && !IsNil(o.Orf) {
		return true
	}

	return false
}

// SetOrf gets a reference to the given BgpAddressFamilyOrf and assigns it to the Orf field.
func (o *BgpAddressFamily) SetOrf(v BgpAddressFamilyOrf) {
	o.Orf = &v
}

// GetRemovePrivateAS returns the RemovePrivateAS field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetRemovePrivateAS() BgpAddressFamilyRemovePrivateAS {
	if o == nil || IsNil(o.RemovePrivateAS) {
		var ret BgpAddressFamilyRemovePrivateAS
		return ret
	}
	return *o.RemovePrivateAS
}

// GetRemovePrivateASOk returns a tuple with the RemovePrivateAS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetRemovePrivateASOk() (*BgpAddressFamilyRemovePrivateAS, bool) {
	if o == nil || IsNil(o.RemovePrivateAS) {
		return nil, false
	}
	return o.RemovePrivateAS, true
}

// HasRemovePrivateAS returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasRemovePrivateAS() bool {
	if o != nil && !IsNil(o.RemovePrivateAS) {
		return true
	}

	return false
}

// SetRemovePrivateAS gets a reference to the given BgpAddressFamilyRemovePrivateAS and assigns it to the RemovePrivateAS field.
func (o *BgpAddressFamily) SetRemovePrivateAS(v BgpAddressFamilyRemovePrivateAS) {
	o.RemovePrivateAS = &v
}

// GetRouteReflectorClient returns the RouteReflectorClient field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetRouteReflectorClient() bool {
	if o == nil || IsNil(o.RouteReflectorClient) {
		var ret bool
		return ret
	}
	return *o.RouteReflectorClient
}

// GetRouteReflectorClientOk returns a tuple with the RouteReflectorClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetRouteReflectorClientOk() (*bool, bool) {
	if o == nil || IsNil(o.RouteReflectorClient) {
		return nil, false
	}
	return o.RouteReflectorClient, true
}

// HasRouteReflectorClient returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasRouteReflectorClient() bool {
	if o != nil && !IsNil(o.RouteReflectorClient) {
		return true
	}

	return false
}

// SetRouteReflectorClient gets a reference to the given bool and assigns it to the RouteReflectorClient field.
func (o *BgpAddressFamily) SetRouteReflectorClient(v bool) {
	o.RouteReflectorClient = &v
}

// GetSendCommunity returns the SendCommunity field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetSendCommunity() BgpAddressFamilySendCommunity {
	if o == nil || IsNil(o.SendCommunity) {
		var ret BgpAddressFamilySendCommunity
		return ret
	}
	return *o.SendCommunity
}

// GetSendCommunityOk returns a tuple with the SendCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetSendCommunityOk() (*BgpAddressFamilySendCommunity, bool) {
	if o == nil || IsNil(o.SendCommunity) {
		return nil, false
	}
	return o.SendCommunity, true
}

// HasSendCommunity returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasSendCommunity() bool {
	if o != nil && !IsNil(o.SendCommunity) {
		return true
	}

	return false
}

// SetSendCommunity gets a reference to the given BgpAddressFamilySendCommunity and assigns it to the SendCommunity field.
func (o *BgpAddressFamily) SetSendCommunity(v BgpAddressFamilySendCommunity) {
	o.SendCommunity = &v
}

// GetSoftReconfigWithStoredInfo returns the SoftReconfigWithStoredInfo field value if set, zero value otherwise.
func (o *BgpAddressFamily) GetSoftReconfigWithStoredInfo() bool {
	if o == nil || IsNil(o.SoftReconfigWithStoredInfo) {
		var ret bool
		return ret
	}
	return *o.SoftReconfigWithStoredInfo
}

// GetSoftReconfigWithStoredInfoOk returns a tuple with the SoftReconfigWithStoredInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamily) GetSoftReconfigWithStoredInfoOk() (*bool, bool) {
	if o == nil || IsNil(o.SoftReconfigWithStoredInfo) {
		return nil, false
	}
	return o.SoftReconfigWithStoredInfo, true
}

// HasSoftReconfigWithStoredInfo returns a boolean if a field has been set.
func (o *BgpAddressFamily) HasSoftReconfigWithStoredInfo() bool {
	if o != nil && !IsNil(o.SoftReconfigWithStoredInfo) {
		return true
	}

	return false
}

// SetSoftReconfigWithStoredInfo gets a reference to the given bool and assigns it to the SoftReconfigWithStoredInfo field.
func (o *BgpAddressFamily) SetSoftReconfigWithStoredInfo(v bool) {
	o.SoftReconfigWithStoredInfo = &v
}

func (o BgpAddressFamily) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpAddressFamily) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AddPath) {
		toSerialize["add_path"] = o.AddPath
	}
	if !IsNil(o.AllowasIn) {
		toSerialize["allowas_in"] = o.AllowasIn
	}
	if !IsNil(o.AsOverride) {
		toSerialize["as_override"] = o.AsOverride
	}
	if !IsNil(o.DefaultOriginate) {
		toSerialize["default_originate"] = o.DefaultOriginate
	}
	if !IsNil(o.DefaultOriginateMap) {
		toSerialize["default_originate_map"] = o.DefaultOriginateMap
	}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.MaximumPrefix) {
		toSerialize["maximum_prefix"] = o.MaximumPrefix
	}
	if !IsNil(o.NextHop) {
		toSerialize["next_hop"] = o.NextHop
	}
	if !IsNil(o.Orf) {
		toSerialize["orf"] = o.Orf
	}
	if !IsNil(o.RemovePrivateAS) {
		toSerialize["remove_private_AS"] = o.RemovePrivateAS
	}
	if !IsNil(o.RouteReflectorClient) {
		toSerialize["route_reflector_client"] = o.RouteReflectorClient
	}
	if !IsNil(o.SendCommunity) {
		toSerialize["send_community"] = o.SendCommunity
	}
	if !IsNil(o.SoftReconfigWithStoredInfo) {
		toSerialize["soft_reconfig_with_stored_info"] = o.SoftReconfigWithStoredInfo
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpAddressFamily) UnmarshalJSON(data []byte) (err error) {
	varBgpAddressFamily := _BgpAddressFamily{}

	err = json.Unmarshal(data, &varBgpAddressFamily)

	if err != nil {
		return err
	}

	*o = BgpAddressFamily(varBgpAddressFamily)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "add_path")
		delete(additionalProperties, "allowas_in")
		delete(additionalProperties, "as_override")
		delete(additionalProperties, "default_originate")
		delete(additionalProperties, "default_originate_map")
		delete(additionalProperties, "enable")
		delete(additionalProperties, "maximum_prefix")
		delete(additionalProperties, "next_hop")
		delete(additionalProperties, "orf")
		delete(additionalProperties, "remove_private_AS")
		delete(additionalProperties, "route_reflector_client")
		delete(additionalProperties, "send_community")
		delete(additionalProperties, "soft_reconfig_with_stored_info")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpAddressFamily struct {
	value *BgpAddressFamily
	isSet bool
}

func (v NullableBgpAddressFamily) Get() *BgpAddressFamily {
	return v.value
}

func (v *NullableBgpAddressFamily) Set(val *BgpAddressFamily) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpAddressFamily) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpAddressFamily) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpAddressFamily(val *BgpAddressFamily) *NullableBgpAddressFamily {
	return &NullableBgpAddressFamily{value: val, isSet: true}
}

func (v NullableBgpAddressFamily) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpAddressFamily) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
