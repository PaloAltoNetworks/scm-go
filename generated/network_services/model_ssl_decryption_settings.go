/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the SslDecryptionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslDecryptionSettings{}

// SslDecryptionSettings struct for SslDecryptionSettings
type SslDecryptionSettings struct {
	DisabledSslExcludeCertFromPredefined []map[string]interface{}                      `json:"disabled_ssl_exclude_cert_from_predefined,omitempty"`
	ForwardTrustCertificate              *SslDecryptionSettingsForwardTrustCertificate `json:"forward_trust_certificate,omitempty"`
	ForwardUntrustCertificate            *SslDecryptionSettingsForwardTrustCertificate `json:"forward_untrust_certificate,omitempty"`
	RootCaExcludeList                    []map[string]interface{}                      `json:"root_ca_exclude_list,omitempty"`
	SslExcludeCert                       []SslDecryptionSettingsSslExcludeCertInner    `json:"ssl_exclude_cert,omitempty"`
	TrustedRootCA                        []map[string]interface{}                      `json:"trusted_root_CA,omitempty"`
	AdditionalProperties                 map[string]interface{}
}

type _SslDecryptionSettings SslDecryptionSettings

// NewSslDecryptionSettings instantiates a new SslDecryptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslDecryptionSettings() *SslDecryptionSettings {
	this := SslDecryptionSettings{}
	return &this
}

// NewSslDecryptionSettingsWithDefaults instantiates a new SslDecryptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslDecryptionSettingsWithDefaults() *SslDecryptionSettings {
	this := SslDecryptionSettings{}
	return &this
}

// GetDisabledSslExcludeCertFromPredefined returns the DisabledSslExcludeCertFromPredefined field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetDisabledSslExcludeCertFromPredefined() []map[string]interface{} {
	if o == nil || IsNil(o.DisabledSslExcludeCertFromPredefined) {
		var ret []map[string]interface{}
		return ret
	}
	return o.DisabledSslExcludeCertFromPredefined
}

// GetDisabledSslExcludeCertFromPredefinedOk returns a tuple with the DisabledSslExcludeCertFromPredefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetDisabledSslExcludeCertFromPredefinedOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.DisabledSslExcludeCertFromPredefined) {
		return nil, false
	}
	return o.DisabledSslExcludeCertFromPredefined, true
}

// HasDisabledSslExcludeCertFromPredefined returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasDisabledSslExcludeCertFromPredefined() bool {
	if o != nil && !IsNil(o.DisabledSslExcludeCertFromPredefined) {
		return true
	}

	return false
}

// SetDisabledSslExcludeCertFromPredefined gets a reference to the given []map[string]interface{} and assigns it to the DisabledSslExcludeCertFromPredefined field.
func (o *SslDecryptionSettings) SetDisabledSslExcludeCertFromPredefined(v []map[string]interface{}) {
	o.DisabledSslExcludeCertFromPredefined = v
}

// GetForwardTrustCertificate returns the ForwardTrustCertificate field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetForwardTrustCertificate() SslDecryptionSettingsForwardTrustCertificate {
	if o == nil || IsNil(o.ForwardTrustCertificate) {
		var ret SslDecryptionSettingsForwardTrustCertificate
		return ret
	}
	return *o.ForwardTrustCertificate
}

// GetForwardTrustCertificateOk returns a tuple with the ForwardTrustCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetForwardTrustCertificateOk() (*SslDecryptionSettingsForwardTrustCertificate, bool) {
	if o == nil || IsNil(o.ForwardTrustCertificate) {
		return nil, false
	}
	return o.ForwardTrustCertificate, true
}

// HasForwardTrustCertificate returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasForwardTrustCertificate() bool {
	if o != nil && !IsNil(o.ForwardTrustCertificate) {
		return true
	}

	return false
}

// SetForwardTrustCertificate gets a reference to the given SslDecryptionSettingsForwardTrustCertificate and assigns it to the ForwardTrustCertificate field.
func (o *SslDecryptionSettings) SetForwardTrustCertificate(v SslDecryptionSettingsForwardTrustCertificate) {
	o.ForwardTrustCertificate = &v
}

// GetForwardUntrustCertificate returns the ForwardUntrustCertificate field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetForwardUntrustCertificate() SslDecryptionSettingsForwardTrustCertificate {
	if o == nil || IsNil(o.ForwardUntrustCertificate) {
		var ret SslDecryptionSettingsForwardTrustCertificate
		return ret
	}
	return *o.ForwardUntrustCertificate
}

// GetForwardUntrustCertificateOk returns a tuple with the ForwardUntrustCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetForwardUntrustCertificateOk() (*SslDecryptionSettingsForwardTrustCertificate, bool) {
	if o == nil || IsNil(o.ForwardUntrustCertificate) {
		return nil, false
	}
	return o.ForwardUntrustCertificate, true
}

// HasForwardUntrustCertificate returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasForwardUntrustCertificate() bool {
	if o != nil && !IsNil(o.ForwardUntrustCertificate) {
		return true
	}

	return false
}

// SetForwardUntrustCertificate gets a reference to the given SslDecryptionSettingsForwardTrustCertificate and assigns it to the ForwardUntrustCertificate field.
func (o *SslDecryptionSettings) SetForwardUntrustCertificate(v SslDecryptionSettingsForwardTrustCertificate) {
	o.ForwardUntrustCertificate = &v
}

// GetRootCaExcludeList returns the RootCaExcludeList field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetRootCaExcludeList() []map[string]interface{} {
	if o == nil || IsNil(o.RootCaExcludeList) {
		var ret []map[string]interface{}
		return ret
	}
	return o.RootCaExcludeList
}

// GetRootCaExcludeListOk returns a tuple with the RootCaExcludeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetRootCaExcludeListOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.RootCaExcludeList) {
		return nil, false
	}
	return o.RootCaExcludeList, true
}

// HasRootCaExcludeList returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasRootCaExcludeList() bool {
	if o != nil && !IsNil(o.RootCaExcludeList) {
		return true
	}

	return false
}

// SetRootCaExcludeList gets a reference to the given []map[string]interface{} and assigns it to the RootCaExcludeList field.
func (o *SslDecryptionSettings) SetRootCaExcludeList(v []map[string]interface{}) {
	o.RootCaExcludeList = v
}

// GetSslExcludeCert returns the SslExcludeCert field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetSslExcludeCert() []SslDecryptionSettingsSslExcludeCertInner {
	if o == nil || IsNil(o.SslExcludeCert) {
		var ret []SslDecryptionSettingsSslExcludeCertInner
		return ret
	}
	return o.SslExcludeCert
}

// GetSslExcludeCertOk returns a tuple with the SslExcludeCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetSslExcludeCertOk() ([]SslDecryptionSettingsSslExcludeCertInner, bool) {
	if o == nil || IsNil(o.SslExcludeCert) {
		return nil, false
	}
	return o.SslExcludeCert, true
}

// HasSslExcludeCert returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasSslExcludeCert() bool {
	if o != nil && !IsNil(o.SslExcludeCert) {
		return true
	}

	return false
}

// SetSslExcludeCert gets a reference to the given []SslDecryptionSettingsSslExcludeCertInner and assigns it to the SslExcludeCert field.
func (o *SslDecryptionSettings) SetSslExcludeCert(v []SslDecryptionSettingsSslExcludeCertInner) {
	o.SslExcludeCert = v
}

// GetTrustedRootCA returns the TrustedRootCA field value if set, zero value otherwise.
func (o *SslDecryptionSettings) GetTrustedRootCA() []map[string]interface{} {
	if o == nil || IsNil(o.TrustedRootCA) {
		var ret []map[string]interface{}
		return ret
	}
	return o.TrustedRootCA
}

// GetTrustedRootCAOk returns a tuple with the TrustedRootCA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettings) GetTrustedRootCAOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.TrustedRootCA) {
		return nil, false
	}
	return o.TrustedRootCA, true
}

// HasTrustedRootCA returns a boolean if a field has been set.
func (o *SslDecryptionSettings) HasTrustedRootCA() bool {
	if o != nil && !IsNil(o.TrustedRootCA) {
		return true
	}

	return false
}

// SetTrustedRootCA gets a reference to the given []map[string]interface{} and assigns it to the TrustedRootCA field.
func (o *SslDecryptionSettings) SetTrustedRootCA(v []map[string]interface{}) {
	o.TrustedRootCA = v
}

func (o SslDecryptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslDecryptionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DisabledSslExcludeCertFromPredefined) {
		toSerialize["disabled_ssl_exclude_cert_from_predefined"] = o.DisabledSslExcludeCertFromPredefined
	}
	if !IsNil(o.ForwardTrustCertificate) {
		toSerialize["forward_trust_certificate"] = o.ForwardTrustCertificate
	}
	if !IsNil(o.ForwardUntrustCertificate) {
		toSerialize["forward_untrust_certificate"] = o.ForwardUntrustCertificate
	}
	if !IsNil(o.RootCaExcludeList) {
		toSerialize["root_ca_exclude_list"] = o.RootCaExcludeList
	}
	if !IsNil(o.SslExcludeCert) {
		toSerialize["ssl_exclude_cert"] = o.SslExcludeCert
	}
	if !IsNil(o.TrustedRootCA) {
		toSerialize["trusted_root_CA"] = o.TrustedRootCA
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SslDecryptionSettings) UnmarshalJSON(data []byte) (err error) {
	varSslDecryptionSettings := _SslDecryptionSettings{}

	err = json.Unmarshal(data, &varSslDecryptionSettings)

	if err != nil {
		return err
	}

	*o = SslDecryptionSettings(varSslDecryptionSettings)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "disabled_ssl_exclude_cert_from_predefined")
		delete(additionalProperties, "forward_trust_certificate")
		delete(additionalProperties, "forward_untrust_certificate")
		delete(additionalProperties, "root_ca_exclude_list")
		delete(additionalProperties, "ssl_exclude_cert")
		delete(additionalProperties, "trusted_root_CA")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSslDecryptionSettings struct {
	value *SslDecryptionSettings
	isSet bool
}

func (v NullableSslDecryptionSettings) Get() *SslDecryptionSettings {
	return v.value
}

func (v *NullableSslDecryptionSettings) Set(val *SslDecryptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableSslDecryptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableSslDecryptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslDecryptionSettings(val *SslDecryptionSettings) *NullableSslDecryptionSettings {
	return &NullableSslDecryptionSettings{value: val, isSet: true}
}

func (v NullableSslDecryptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslDecryptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
