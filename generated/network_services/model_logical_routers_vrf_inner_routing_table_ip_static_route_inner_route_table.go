/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}

// LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable struct for LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
type LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable struct {
	Both                 map[string]interface{} `json:"both,omitempty"`
	Multicast            map[string]interface{} `json:"multicast,omitempty"`
	NoInstall            map[string]interface{} `json:"no_install,omitempty"`
	Unicast              map[string]interface{} `json:"unicast,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable

// NewLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable instantiates a new LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable() *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable {
	this := LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}
	return &this
}

// NewLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableWithDefaults instantiates a new LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTableWithDefaults() *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable {
	this := LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}
	return &this
}

// GetBoth returns the Both field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetBoth() map[string]interface{} {
	if o == nil || IsNil(o.Both) {
		var ret map[string]interface{}
		return ret
	}
	return o.Both
}

// GetBothOk returns a tuple with the Both field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetBothOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Both) {
		return map[string]interface{}{}, false
	}
	return o.Both, true
}

// HasBoth returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) HasBoth() bool {
	if o != nil && !IsNil(o.Both) {
		return true
	}

	return false
}

// SetBoth gets a reference to the given map[string]interface{} and assigns it to the Both field.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) SetBoth(v map[string]interface{}) {
	o.Both = v
}

// GetMulticast returns the Multicast field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetMulticast() map[string]interface{} {
	if o == nil || IsNil(o.Multicast) {
		var ret map[string]interface{}
		return ret
	}
	return o.Multicast
}

// GetMulticastOk returns a tuple with the Multicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetMulticastOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Multicast) {
		return map[string]interface{}{}, false
	}
	return o.Multicast, true
}

// HasMulticast returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) HasMulticast() bool {
	if o != nil && !IsNil(o.Multicast) {
		return true
	}

	return false
}

// SetMulticast gets a reference to the given map[string]interface{} and assigns it to the Multicast field.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) SetMulticast(v map[string]interface{}) {
	o.Multicast = v
}

// GetNoInstall returns the NoInstall field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetNoInstall() map[string]interface{} {
	if o == nil || IsNil(o.NoInstall) {
		var ret map[string]interface{}
		return ret
	}
	return o.NoInstall
}

// GetNoInstallOk returns a tuple with the NoInstall field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetNoInstallOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NoInstall) {
		return map[string]interface{}{}, false
	}
	return o.NoInstall, true
}

// HasNoInstall returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) HasNoInstall() bool {
	if o != nil && !IsNil(o.NoInstall) {
		return true
	}

	return false
}

// SetNoInstall gets a reference to the given map[string]interface{} and assigns it to the NoInstall field.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) SetNoInstall(v map[string]interface{}) {
	o.NoInstall = v
}

// GetUnicast returns the Unicast field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetUnicast() map[string]interface{} {
	if o == nil || IsNil(o.Unicast) {
		var ret map[string]interface{}
		return ret
	}
	return o.Unicast
}

// GetUnicastOk returns a tuple with the Unicast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) GetUnicastOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Unicast) {
		return map[string]interface{}{}, false
	}
	return o.Unicast, true
}

// HasUnicast returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) HasUnicast() bool {
	if o != nil && !IsNil(o.Unicast) {
		return true
	}

	return false
}

// SetUnicast gets a reference to the given map[string]interface{} and assigns it to the Unicast field.
func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) SetUnicast(v map[string]interface{}) {
	o.Unicast = v
}

func (o LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Both) {
		toSerialize["both"] = o.Both
	}
	if !IsNil(o.Multicast) {
		toSerialize["multicast"] = o.Multicast
	}
	if !IsNil(o.NoInstall) {
		toSerialize["no_install"] = o.NoInstall
	}
	if !IsNil(o.Unicast) {
		toSerialize["unicast"] = o.Unicast
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable := _LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable(varLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "both")
		delete(additionalProperties, "multicast")
		delete(additionalProperties, "no_install")
		delete(additionalProperties, "unicast")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable struct {
	value *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) Get() *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) Set(val *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable(val *LogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) *NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable {
	return &NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerRoutingTableIpStaticRouteInnerRouteTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
