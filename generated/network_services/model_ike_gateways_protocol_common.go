/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysProtocolCommon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysProtocolCommon{}

// IkeGatewaysProtocolCommon struct for IkeGatewaysProtocolCommon
type IkeGatewaysProtocolCommon struct {
	Fragmentation        *IkeGatewaysProtocolCommonFragmentation `json:"fragmentation,omitempty"`
	NatTraversal         *IkeGatewaysProtocolCommonNatTraversal  `json:"nat_traversal,omitempty"`
	PassiveMode          *bool                                   `json:"passive_mode,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysProtocolCommon IkeGatewaysProtocolCommon

// NewIkeGatewaysProtocolCommon instantiates a new IkeGatewaysProtocolCommon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysProtocolCommon() *IkeGatewaysProtocolCommon {
	this := IkeGatewaysProtocolCommon{}
	return &this
}

// NewIkeGatewaysProtocolCommonWithDefaults instantiates a new IkeGatewaysProtocolCommon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysProtocolCommonWithDefaults() *IkeGatewaysProtocolCommon {
	this := IkeGatewaysProtocolCommon{}
	return &this
}

// GetFragmentation returns the Fragmentation field value if set, zero value otherwise.
func (o *IkeGatewaysProtocolCommon) GetFragmentation() IkeGatewaysProtocolCommonFragmentation {
	if o == nil || IsNil(o.Fragmentation) {
		var ret IkeGatewaysProtocolCommonFragmentation
		return ret
	}
	return *o.Fragmentation
}

// GetFragmentationOk returns a tuple with the Fragmentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocolCommon) GetFragmentationOk() (*IkeGatewaysProtocolCommonFragmentation, bool) {
	if o == nil || IsNil(o.Fragmentation) {
		return nil, false
	}
	return o.Fragmentation, true
}

// HasFragmentation returns a boolean if a field has been set.
func (o *IkeGatewaysProtocolCommon) HasFragmentation() bool {
	if o != nil && !IsNil(o.Fragmentation) {
		return true
	}

	return false
}

// SetFragmentation gets a reference to the given IkeGatewaysProtocolCommonFragmentation and assigns it to the Fragmentation field.
func (o *IkeGatewaysProtocolCommon) SetFragmentation(v IkeGatewaysProtocolCommonFragmentation) {
	o.Fragmentation = &v
}

// GetNatTraversal returns the NatTraversal field value if set, zero value otherwise.
func (o *IkeGatewaysProtocolCommon) GetNatTraversal() IkeGatewaysProtocolCommonNatTraversal {
	if o == nil || IsNil(o.NatTraversal) {
		var ret IkeGatewaysProtocolCommonNatTraversal
		return ret
	}
	return *o.NatTraversal
}

// GetNatTraversalOk returns a tuple with the NatTraversal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocolCommon) GetNatTraversalOk() (*IkeGatewaysProtocolCommonNatTraversal, bool) {
	if o == nil || IsNil(o.NatTraversal) {
		return nil, false
	}
	return o.NatTraversal, true
}

// HasNatTraversal returns a boolean if a field has been set.
func (o *IkeGatewaysProtocolCommon) HasNatTraversal() bool {
	if o != nil && !IsNil(o.NatTraversal) {
		return true
	}

	return false
}

// SetNatTraversal gets a reference to the given IkeGatewaysProtocolCommonNatTraversal and assigns it to the NatTraversal field.
func (o *IkeGatewaysProtocolCommon) SetNatTraversal(v IkeGatewaysProtocolCommonNatTraversal) {
	o.NatTraversal = &v
}

// GetPassiveMode returns the PassiveMode field value if set, zero value otherwise.
func (o *IkeGatewaysProtocolCommon) GetPassiveMode() bool {
	if o == nil || IsNil(o.PassiveMode) {
		var ret bool
		return ret
	}
	return *o.PassiveMode
}

// GetPassiveModeOk returns a tuple with the PassiveMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocolCommon) GetPassiveModeOk() (*bool, bool) {
	if o == nil || IsNil(o.PassiveMode) {
		return nil, false
	}
	return o.PassiveMode, true
}

// HasPassiveMode returns a boolean if a field has been set.
func (o *IkeGatewaysProtocolCommon) HasPassiveMode() bool {
	if o != nil && !IsNil(o.PassiveMode) {
		return true
	}

	return false
}

// SetPassiveMode gets a reference to the given bool and assigns it to the PassiveMode field.
func (o *IkeGatewaysProtocolCommon) SetPassiveMode(v bool) {
	o.PassiveMode = &v
}

func (o IkeGatewaysProtocolCommon) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysProtocolCommon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fragmentation) {
		toSerialize["fragmentation"] = o.Fragmentation
	}
	if !IsNil(o.NatTraversal) {
		toSerialize["nat_traversal"] = o.NatTraversal
	}
	if !IsNil(o.PassiveMode) {
		toSerialize["passive_mode"] = o.PassiveMode
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysProtocolCommon) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysProtocolCommon := _IkeGatewaysProtocolCommon{}

	err = json.Unmarshal(data, &varIkeGatewaysProtocolCommon)

	if err != nil {
		return err
	}

	*o = IkeGatewaysProtocolCommon(varIkeGatewaysProtocolCommon)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "fragmentation")
		delete(additionalProperties, "nat_traversal")
		delete(additionalProperties, "passive_mode")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysProtocolCommon struct {
	value *IkeGatewaysProtocolCommon
	isSet bool
}

func (v NullableIkeGatewaysProtocolCommon) Get() *IkeGatewaysProtocolCommon {
	return v.value
}

func (v *NullableIkeGatewaysProtocolCommon) Set(val *IkeGatewaysProtocolCommon) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysProtocolCommon) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysProtocolCommon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysProtocolCommon(val *IkeGatewaysProtocolCommon) *NullableIkeGatewaysProtocolCommon {
	return &NullableIkeGatewaysProtocolCommon{value: val, isSet: true}
}

func (v NullableIkeGatewaysProtocolCommon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysProtocolCommon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
