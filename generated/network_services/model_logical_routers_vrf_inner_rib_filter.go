/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerRibFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerRibFilter{}

// LogicalRoutersVrfInnerRibFilter struct for LogicalRoutersVrfInnerRibFilter
type LogicalRoutersVrfInnerRibFilter struct {
	Ipv4                 *LogicalRoutersVrfInnerRibFilterIpv4 `json:"ipv4,omitempty"`
	Ipv6                 *LogicalRoutersVrfInnerRibFilterIpv6 `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerRibFilter LogicalRoutersVrfInnerRibFilter

// NewLogicalRoutersVrfInnerRibFilter instantiates a new LogicalRoutersVrfInnerRibFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerRibFilter() *LogicalRoutersVrfInnerRibFilter {
	this := LogicalRoutersVrfInnerRibFilter{}
	return &this
}

// NewLogicalRoutersVrfInnerRibFilterWithDefaults instantiates a new LogicalRoutersVrfInnerRibFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerRibFilterWithDefaults() *LogicalRoutersVrfInnerRibFilter {
	this := LogicalRoutersVrfInnerRibFilter{}
	return &this
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRibFilter) GetIpv4() LogicalRoutersVrfInnerRibFilterIpv4 {
	if o == nil || IsNil(o.Ipv4) {
		var ret LogicalRoutersVrfInnerRibFilterIpv4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRibFilter) GetIpv4Ok() (*LogicalRoutersVrfInnerRibFilterIpv4, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRibFilter) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given LogicalRoutersVrfInnerRibFilterIpv4 and assigns it to the Ipv4 field.
func (o *LogicalRoutersVrfInnerRibFilter) SetIpv4(v LogicalRoutersVrfInnerRibFilterIpv4) {
	o.Ipv4 = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRibFilter) GetIpv6() LogicalRoutersVrfInnerRibFilterIpv6 {
	if o == nil || IsNil(o.Ipv6) {
		var ret LogicalRoutersVrfInnerRibFilterIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRibFilter) GetIpv6Ok() (*LogicalRoutersVrfInnerRibFilterIpv6, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRibFilter) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LogicalRoutersVrfInnerRibFilterIpv6 and assigns it to the Ipv6 field.
func (o *LogicalRoutersVrfInnerRibFilter) SetIpv6(v LogicalRoutersVrfInnerRibFilterIpv6) {
	o.Ipv6 = &v
}

func (o LogicalRoutersVrfInnerRibFilter) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerRibFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerRibFilter) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerRibFilter := _LogicalRoutersVrfInnerRibFilter{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerRibFilter)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerRibFilter(varLogicalRoutersVrfInnerRibFilter)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerRibFilter struct {
	value *LogicalRoutersVrfInnerRibFilter
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerRibFilter) Get() *LogicalRoutersVrfInnerRibFilter {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerRibFilter) Set(val *LogicalRoutersVrfInnerRibFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerRibFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerRibFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerRibFilter(val *LogicalRoutersVrfInnerRibFilter) *NullableLogicalRoutersVrfInnerRibFilter {
	return &NullableLogicalRoutersVrfInnerRibFilter{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerRibFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerRibFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
