/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the NatRulesDestinationTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRulesDestinationTranslation{}

// NatRulesDestinationTranslation Destination translation configuration (Static/P-D-N-T).
type NatRulesDestinationTranslation struct {
	DnsRewrite           *NatRulesDestinationTranslationDnsRewrite `json:"dns_rewrite,omitempty"`
	TranslatedAddress    *string                                   `json:"translated_address,omitempty"`
	TranslatedPort       *int32                                    `json:"translated_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NatRulesDestinationTranslation NatRulesDestinationTranslation

// NewNatRulesDestinationTranslation instantiates a new NatRulesDestinationTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRulesDestinationTranslation() *NatRulesDestinationTranslation {
	this := NatRulesDestinationTranslation{}
	return &this
}

// NewNatRulesDestinationTranslationWithDefaults instantiates a new NatRulesDestinationTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesDestinationTranslationWithDefaults() *NatRulesDestinationTranslation {
	this := NatRulesDestinationTranslation{}
	return &this
}

// GetDnsRewrite returns the DnsRewrite field value if set, zero value otherwise.
func (o *NatRulesDestinationTranslation) GetDnsRewrite() NatRulesDestinationTranslationDnsRewrite {
	if o == nil || IsNil(o.DnsRewrite) {
		var ret NatRulesDestinationTranslationDnsRewrite
		return ret
	}
	return *o.DnsRewrite
}

// GetDnsRewriteOk returns a tuple with the DnsRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesDestinationTranslation) GetDnsRewriteOk() (*NatRulesDestinationTranslationDnsRewrite, bool) {
	if o == nil || IsNil(o.DnsRewrite) {
		return nil, false
	}
	return o.DnsRewrite, true
}

// HasDnsRewrite returns a boolean if a field has been set.
func (o *NatRulesDestinationTranslation) HasDnsRewrite() bool {
	if o != nil && !IsNil(o.DnsRewrite) {
		return true
	}

	return false
}

// SetDnsRewrite gets a reference to the given NatRulesDestinationTranslationDnsRewrite and assigns it to the DnsRewrite field.
func (o *NatRulesDestinationTranslation) SetDnsRewrite(v NatRulesDestinationTranslationDnsRewrite) {
	o.DnsRewrite = &v
}

// GetTranslatedAddress returns the TranslatedAddress field value if set, zero value otherwise.
func (o *NatRulesDestinationTranslation) GetTranslatedAddress() string {
	if o == nil || IsNil(o.TranslatedAddress) {
		var ret string
		return ret
	}
	return *o.TranslatedAddress
}

// GetTranslatedAddressOk returns a tuple with the TranslatedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesDestinationTranslation) GetTranslatedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TranslatedAddress) {
		return nil, false
	}
	return o.TranslatedAddress, true
}

// HasTranslatedAddress returns a boolean if a field has been set.
func (o *NatRulesDestinationTranslation) HasTranslatedAddress() bool {
	if o != nil && !IsNil(o.TranslatedAddress) {
		return true
	}

	return false
}

// SetTranslatedAddress gets a reference to the given string and assigns it to the TranslatedAddress field.
func (o *NatRulesDestinationTranslation) SetTranslatedAddress(v string) {
	o.TranslatedAddress = &v
}

// GetTranslatedPort returns the TranslatedPort field value if set, zero value otherwise.
func (o *NatRulesDestinationTranslation) GetTranslatedPort() int32 {
	if o == nil || IsNil(o.TranslatedPort) {
		var ret int32
		return ret
	}
	return *o.TranslatedPort
}

// GetTranslatedPortOk returns a tuple with the TranslatedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesDestinationTranslation) GetTranslatedPortOk() (*int32, bool) {
	if o == nil || IsNil(o.TranslatedPort) {
		return nil, false
	}
	return o.TranslatedPort, true
}

// HasTranslatedPort returns a boolean if a field has been set.
func (o *NatRulesDestinationTranslation) HasTranslatedPort() bool {
	if o != nil && !IsNil(o.TranslatedPort) {
		return true
	}

	return false
}

// SetTranslatedPort gets a reference to the given int32 and assigns it to the TranslatedPort field.
func (o *NatRulesDestinationTranslation) SetTranslatedPort(v int32) {
	o.TranslatedPort = &v
}

func (o NatRulesDestinationTranslation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRulesDestinationTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DnsRewrite) {
		toSerialize["dns_rewrite"] = o.DnsRewrite
	}
	if !IsNil(o.TranslatedAddress) {
		toSerialize["translated_address"] = o.TranslatedAddress
	}
	if !IsNil(o.TranslatedPort) {
		toSerialize["translated_port"] = o.TranslatedPort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRulesDestinationTranslation) UnmarshalJSON(data []byte) (err error) {
	varNatRulesDestinationTranslation := _NatRulesDestinationTranslation{}

	err = json.Unmarshal(data, &varNatRulesDestinationTranslation)

	if err != nil {
		return err
	}

	*o = NatRulesDestinationTranslation(varNatRulesDestinationTranslation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dns_rewrite")
		delete(additionalProperties, "translated_address")
		delete(additionalProperties, "translated_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRulesDestinationTranslation struct {
	value *NatRulesDestinationTranslation
	isSet bool
}

func (v NullableNatRulesDestinationTranslation) Get() *NatRulesDestinationTranslation {
	return v.value
}

func (v *NullableNatRulesDestinationTranslation) Set(val *NatRulesDestinationTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRulesDestinationTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRulesDestinationTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRulesDestinationTranslation(val *NatRulesDestinationTranslation) *NullableNatRulesDestinationTranslation {
	return &NullableNatRulesDestinationTranslation{value: val, isSet: true}
}

func (v NullableNatRulesDestinationTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRulesDestinationTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
