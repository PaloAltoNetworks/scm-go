/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the Lacp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Lacp{}

// Lacp struct for Lacp
type Lacp struct {
	// Enable LACP?
	Enable *bool `json:"enable,omitempty"`
	// Fast failover
	FastFailover *bool `json:"fast-failover,omitempty"`
	// Maximum number of physical ports bundled in the LAG
	MaxPorts *int32 `json:"max-ports,omitempty"`
	// Mode
	Mode *string `json:"mode,omitempty"`
	// LACP system priority in system ID
	SystemPriority *int32 `json:"system-priority,omitempty"`
	// Transmission mode
	TransmissionRate     *string `json:"transmission-rate,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Lacp Lacp

// NewLacp instantiates a new Lacp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLacp() *Lacp {
	this := Lacp{}
	var enable bool = false
	this.Enable = &enable
	var fastFailover bool = false
	this.FastFailover = &fastFailover
	var maxPorts int32 = 8
	this.MaxPorts = &maxPorts
	var mode string = "passive"
	this.Mode = &mode
	var systemPriority int32 = 32768
	this.SystemPriority = &systemPriority
	var transmissionRate string = "slow"
	this.TransmissionRate = &transmissionRate
	return &this
}

// NewLacpWithDefaults instantiates a new Lacp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLacpWithDefaults() *Lacp {
	this := Lacp{}
	var enable bool = false
	this.Enable = &enable
	var fastFailover bool = false
	this.FastFailover = &fastFailover
	var maxPorts int32 = 8
	this.MaxPorts = &maxPorts
	var mode string = "passive"
	this.Mode = &mode
	var systemPriority int32 = 32768
	this.SystemPriority = &systemPriority
	var transmissionRate string = "slow"
	this.TransmissionRate = &transmissionRate
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *Lacp) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *Lacp) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *Lacp) SetEnable(v bool) {
	o.Enable = &v
}

// GetFastFailover returns the FastFailover field value if set, zero value otherwise.
func (o *Lacp) GetFastFailover() bool {
	if o == nil || IsNil(o.FastFailover) {
		var ret bool
		return ret
	}
	return *o.FastFailover
}

// GetFastFailoverOk returns a tuple with the FastFailover field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetFastFailoverOk() (*bool, bool) {
	if o == nil || IsNil(o.FastFailover) {
		return nil, false
	}
	return o.FastFailover, true
}

// HasFastFailover returns a boolean if a field has been set.
func (o *Lacp) HasFastFailover() bool {
	if o != nil && !IsNil(o.FastFailover) {
		return true
	}

	return false
}

// SetFastFailover gets a reference to the given bool and assigns it to the FastFailover field.
func (o *Lacp) SetFastFailover(v bool) {
	o.FastFailover = &v
}

// GetMaxPorts returns the MaxPorts field value if set, zero value otherwise.
func (o *Lacp) GetMaxPorts() int32 {
	if o == nil || IsNil(o.MaxPorts) {
		var ret int32
		return ret
	}
	return *o.MaxPorts
}

// GetMaxPortsOk returns a tuple with the MaxPorts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetMaxPortsOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxPorts) {
		return nil, false
	}
	return o.MaxPorts, true
}

// HasMaxPorts returns a boolean if a field has been set.
func (o *Lacp) HasMaxPorts() bool {
	if o != nil && !IsNil(o.MaxPorts) {
		return true
	}

	return false
}

// SetMaxPorts gets a reference to the given int32 and assigns it to the MaxPorts field.
func (o *Lacp) SetMaxPorts(v int32) {
	o.MaxPorts = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Lacp) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Lacp) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *Lacp) SetMode(v string) {
	o.Mode = &v
}

// GetSystemPriority returns the SystemPriority field value if set, zero value otherwise.
func (o *Lacp) GetSystemPriority() int32 {
	if o == nil || IsNil(o.SystemPriority) {
		var ret int32
		return ret
	}
	return *o.SystemPriority
}

// GetSystemPriorityOk returns a tuple with the SystemPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetSystemPriorityOk() (*int32, bool) {
	if o == nil || IsNil(o.SystemPriority) {
		return nil, false
	}
	return o.SystemPriority, true
}

// HasSystemPriority returns a boolean if a field has been set.
func (o *Lacp) HasSystemPriority() bool {
	if o != nil && !IsNil(o.SystemPriority) {
		return true
	}

	return false
}

// SetSystemPriority gets a reference to the given int32 and assigns it to the SystemPriority field.
func (o *Lacp) SetSystemPriority(v int32) {
	o.SystemPriority = &v
}

// GetTransmissionRate returns the TransmissionRate field value if set, zero value otherwise.
func (o *Lacp) GetTransmissionRate() string {
	if o == nil || IsNil(o.TransmissionRate) {
		var ret string
		return ret
	}
	return *o.TransmissionRate
}

// GetTransmissionRateOk returns a tuple with the TransmissionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Lacp) GetTransmissionRateOk() (*string, bool) {
	if o == nil || IsNil(o.TransmissionRate) {
		return nil, false
	}
	return o.TransmissionRate, true
}

// HasTransmissionRate returns a boolean if a field has been set.
func (o *Lacp) HasTransmissionRate() bool {
	if o != nil && !IsNil(o.TransmissionRate) {
		return true
	}

	return false
}

// SetTransmissionRate gets a reference to the given string and assigns it to the TransmissionRate field.
func (o *Lacp) SetTransmissionRate(v string) {
	o.TransmissionRate = &v
}

func (o Lacp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Lacp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	if !IsNil(o.FastFailover) {
		toSerialize["fast-failover"] = o.FastFailover
	}
	if !IsNil(o.MaxPorts) {
		toSerialize["max-ports"] = o.MaxPorts
	}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	if !IsNil(o.SystemPriority) {
		toSerialize["system-priority"] = o.SystemPriority
	}
	if !IsNil(o.TransmissionRate) {
		toSerialize["transmission-rate"] = o.TransmissionRate
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Lacp) UnmarshalJSON(data []byte) (err error) {
	varLacp := _Lacp{}

	err = json.Unmarshal(data, &varLacp)

	if err != nil {
		return err
	}

	*o = Lacp(varLacp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable")
		delete(additionalProperties, "fast-failover")
		delete(additionalProperties, "max-ports")
		delete(additionalProperties, "mode")
		delete(additionalProperties, "system-priority")
		delete(additionalProperties, "transmission-rate")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLacp struct {
	value *Lacp
	isSet bool
}

func (v NullableLacp) Get() *Lacp {
	return v.value
}

func (v *NullableLacp) Set(val *Lacp) {
	v.value = val
	v.isSet = true
}

func (v NullableLacp) IsSet() bool {
	return v.isSet
}

func (v *NullableLacp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLacp(val *Lacp) *NullableLacp {
	return &NullableLacp{value: val, isSet: true}
}

func (v NullableLacp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLacp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
