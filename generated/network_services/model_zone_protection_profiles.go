/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ZoneProtectionProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneProtectionProfiles{}

// ZoneProtectionProfiles struct for ZoneProtectionProfiles
type ZoneProtectionProfiles struct {
	// Determine whether to drop or bypass packets that contain out-of-sync ACKs or out-of-window sequence numbers: * `global` — Use system-wide setting that is assigned through TCP Settings or the CLI. * `drop` — Drop packets that contain an asymmetric path. * `bypass` — Bypass scanning on packets that contain an asymmetric path.
	AsymmetricPath *string `json:"asymmetric_path,omitempty"`
	// The description of the profile
	Description *string `json:"description,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Discard ICMP packets that are embedded with an error message.
	DiscardIcmpEmbeddedError *bool                        `json:"discard_icmp_embedded_error,omitempty"`
	Flood                    *ZoneProtectionProfilesFlood `json:"flood,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Discard fragmented IP packets.
	FragmentedTrafficDiscard *bool `json:"fragmented_traffic_discard,omitempty"`
	// Discard packets that consist of ICMP fragments.
	IcmpFragDiscard *bool `json:"icmp_frag_discard,omitempty"`
	// Discard ICMP packets that are larger than 1024 bytes.
	IcmpLargePacketDiscard *bool `json:"icmp_large_packet_discard,omitempty"`
	// Discard packets if the ICMP ping packet has an identifier value of 0.
	IcmpPingZeroIdDiscard *bool `json:"icmp_ping_zero_id_discard,omitempty"`
	// UUID of the resource
	Id                      *string                                        `json:"id,omitempty"`
	Ipv6                    *ZoneProtectionProfilesIpv6                    `json:"ipv6,omitempty"`
	L2SecGroupTagProtection *ZoneProtectionProfilesL2SecGroupTagProtection `json:"l2_sec_group_tag_protection,omitempty"`
	// Discard packets with the Loose Source Routing IP option set. Loose Source Routing is an option whereby a source of a datagram provides routing information and a gateway or host is allowed to choose any route of a number of intermediate gateways to get the datagram to the next address in the route.
	LooseSourceRoutingDiscard *bool `json:"loose_source_routing_discard,omitempty"`
	// Discard packets if they have incorrect combinations of class, number, and length based on RFCs 791, 1108, 1393, and 2113.
	MalformedOptionDiscard *bool `json:"malformed_option_discard,omitempty"`
	// Drop packets with mismatched overlapping TCP segments.
	MismatchedOverlappingTcpSegmentDiscard *bool `json:"mismatched_overlapping_tcp_segment_discard,omitempty"`
	// MPTCP is an extension of TCP that allows a client to maintain a connection by simultaneously using multiple paths to connect to the destination host. By default, MPTCP support is disabled, based on the global MPTCP setting.  Review or adjust the MPTCP settings for the security zones associated with this profile: * `no` — Enable MPTCP support (do not strip the MPTCP option). * `yes` — Disable MPTCP support (strip the MPTCP option). With this configured, MPTCP connections are converted to standard TCP connections, as MPTCP is backwards compatible with TCP. * `global` — Support MPTCP based on the global MPTCP setting. By default, the global MPTCP setting is set to yes so that MPTCP is disabled (the MPTCP option is stripped from the packet).
	MptcpOptionStrip *string `json:"mptcp_option_strip,omitempty"`
	// The profile name
	Name          string                               `json:"name"`
	NonIpProtocol *ZoneProtectionProfilesNonIpProtocol `json:"non_ip_protocol,omitempty"`
	// Discard packets with the Record Route IP option set. When a datagram has this option, each router that routes the datagram adds its own IP address to the header, thus providing the path to the recipient.
	RecordRouteDiscard *bool `json:"record_route_discard,omitempty"`
	// Determine whether to reject the packet if the first packet for the TCP session setup is not a SYN packet: * `global` — Use system-wide setting that is assigned through the CLI. * `yes` — Reject non-SYN TCP. * `no` — Accept non-SYN TCP.
	RejectNonSynTcp *string                                    `json:"reject_non_syn_tcp,omitempty"`
	Scan            []ZoneProtectionProfilesScanInner          `json:"scan,omitempty"`
	ScanWhiteList   []ZoneProtectionProfilesScanWhiteListInner `json:"scan_white_list,omitempty"`
	// Discard packets if the security option is defined.
	SecurityDiscard *bool `json:"security_discard,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Check that the source IP address of the ingress packet is routable and the routing interface is in the same zone as the ingress interface. If either condition is not true, discard the packet.
	SpoofedIpDiscard *bool `json:"spoofed_ip_discard,omitempty"`
	// Discard packets if the Stream ID option is defined.
	StreamIdDiscard *bool `json:"stream_id_discard,omitempty"`
	// Check that both conditions are true: * The source IP address is not the subnet broadcast IP address of the ingress interface. * The source IP address is routable over the exact ingress interface. If either condition is not true, discard the packet.
	StrictIpCheck *bool `json:"strict_ip_check,omitempty"`
	// Discard packets with the Strict Source Routing IP option set. Strict Source Routing is an option whereby a source of a datagram provides routing information through which a gateway or host must send the datagram.
	StrictSourceRoutingDiscard *bool `json:"strict_source_routing_discard,omitempty"`
	// Stop sending ICMP fragmentation needed messages in response to packets that exceed the interface MTU and have the do not fragment (DF) bit set. This setting will interfere with the PMTUD process performed by hosts behind the firewall.
	SuppressIcmpNeedfrag *bool `json:"suppress_icmp_needfrag,omitempty"`
	// Stop sending ICMP TTL expired messages.
	SuppressIcmpTimeexceeded *bool `json:"suppress_icmp_timeexceeded,omitempty"`
	// Strip the TCP Fast Open option (and data payload, if any) from the TCP SYN or SYN-ACK packet during a TCP three-way handshake.
	TcpFastOpenAndDataStrip *bool `json:"tcp_fast_open_and_data_strip,omitempty"`
	// Drop packets with split handshakes.
	TcpHandshakeDiscard *bool `json:"tcp_handshake_discard,omitempty"`
	// Prevent a TCP session from being established if the TCP SYN packet contains data during a three-way handshake.
	TcpSynWithDataDiscard *bool `json:"tcp_syn_with_data_discard,omitempty"`
	// Prevent a TCP session from being established if the TCP SYN-ACK packet contains data during a three-way handshake.
	TcpSynackWithDataDiscard *bool `json:"tcp_synack_with_data_discard,omitempty"`
	// Determine whether the packet has a TCP timestamp in the header and, if it does, strip the timestamp from the header.
	TcpTimestampStrip *bool `json:"tcp_timestamp_strip,omitempty"`
	// Discard packets with the Timestamp IP option set.
	TimestampDiscard *bool `json:"timestamp_discard,omitempty"`
	// Discard packets if the class and number are unknown.
	UnknownOptionDiscard *bool `json:"unknown_option_discard,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ZoneProtectionProfiles ZoneProtectionProfiles

// NewZoneProtectionProfiles instantiates a new ZoneProtectionProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneProtectionProfiles(name string) *ZoneProtectionProfiles {
	this := ZoneProtectionProfiles{}
	var mptcpOptionStrip string = "global"
	this.MptcpOptionStrip = &mptcpOptionStrip
	this.Name = name
	var tcpSynWithDataDiscard bool = true
	this.TcpSynWithDataDiscard = &tcpSynWithDataDiscard
	var tcpSynackWithDataDiscard bool = true
	this.TcpSynackWithDataDiscard = &tcpSynackWithDataDiscard
	return &this
}

// NewZoneProtectionProfilesWithDefaults instantiates a new ZoneProtectionProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneProtectionProfilesWithDefaults() *ZoneProtectionProfiles {
	this := ZoneProtectionProfiles{}
	var mptcpOptionStrip string = "global"
	this.MptcpOptionStrip = &mptcpOptionStrip
	var tcpSynWithDataDiscard bool = true
	this.TcpSynWithDataDiscard = &tcpSynWithDataDiscard
	var tcpSynackWithDataDiscard bool = true
	this.TcpSynackWithDataDiscard = &tcpSynackWithDataDiscard
	return &this
}

// GetAsymmetricPath returns the AsymmetricPath field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetAsymmetricPath() string {
	if o == nil || IsNil(o.AsymmetricPath) {
		var ret string
		return ret
	}
	return *o.AsymmetricPath
}

// GetAsymmetricPathOk returns a tuple with the AsymmetricPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetAsymmetricPathOk() (*string, bool) {
	if o == nil || IsNil(o.AsymmetricPath) {
		return nil, false
	}
	return o.AsymmetricPath, true
}

// HasAsymmetricPath returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasAsymmetricPath() bool {
	if o != nil && !IsNil(o.AsymmetricPath) {
		return true
	}

	return false
}

// SetAsymmetricPath gets a reference to the given string and assigns it to the AsymmetricPath field.
func (o *ZoneProtectionProfiles) SetAsymmetricPath(v string) {
	o.AsymmetricPath = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ZoneProtectionProfiles) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *ZoneProtectionProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetDiscardIcmpEmbeddedError returns the DiscardIcmpEmbeddedError field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetDiscardIcmpEmbeddedError() bool {
	if o == nil || IsNil(o.DiscardIcmpEmbeddedError) {
		var ret bool
		return ret
	}
	return *o.DiscardIcmpEmbeddedError
}

// GetDiscardIcmpEmbeddedErrorOk returns a tuple with the DiscardIcmpEmbeddedError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetDiscardIcmpEmbeddedErrorOk() (*bool, bool) {
	if o == nil || IsNil(o.DiscardIcmpEmbeddedError) {
		return nil, false
	}
	return o.DiscardIcmpEmbeddedError, true
}

// HasDiscardIcmpEmbeddedError returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasDiscardIcmpEmbeddedError() bool {
	if o != nil && !IsNil(o.DiscardIcmpEmbeddedError) {
		return true
	}

	return false
}

// SetDiscardIcmpEmbeddedError gets a reference to the given bool and assigns it to the DiscardIcmpEmbeddedError field.
func (o *ZoneProtectionProfiles) SetDiscardIcmpEmbeddedError(v bool) {
	o.DiscardIcmpEmbeddedError = &v
}

// GetFlood returns the Flood field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetFlood() ZoneProtectionProfilesFlood {
	if o == nil || IsNil(o.Flood) {
		var ret ZoneProtectionProfilesFlood
		return ret
	}
	return *o.Flood
}

// GetFloodOk returns a tuple with the Flood field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetFloodOk() (*ZoneProtectionProfilesFlood, bool) {
	if o == nil || IsNil(o.Flood) {
		return nil, false
	}
	return o.Flood, true
}

// HasFlood returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasFlood() bool {
	if o != nil && !IsNil(o.Flood) {
		return true
	}

	return false
}

// SetFlood gets a reference to the given ZoneProtectionProfilesFlood and assigns it to the Flood field.
func (o *ZoneProtectionProfiles) SetFlood(v ZoneProtectionProfilesFlood) {
	o.Flood = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *ZoneProtectionProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetFragmentedTrafficDiscard returns the FragmentedTrafficDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetFragmentedTrafficDiscard() bool {
	if o == nil || IsNil(o.FragmentedTrafficDiscard) {
		var ret bool
		return ret
	}
	return *o.FragmentedTrafficDiscard
}

// GetFragmentedTrafficDiscardOk returns a tuple with the FragmentedTrafficDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetFragmentedTrafficDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.FragmentedTrafficDiscard) {
		return nil, false
	}
	return o.FragmentedTrafficDiscard, true
}

// HasFragmentedTrafficDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasFragmentedTrafficDiscard() bool {
	if o != nil && !IsNil(o.FragmentedTrafficDiscard) {
		return true
	}

	return false
}

// SetFragmentedTrafficDiscard gets a reference to the given bool and assigns it to the FragmentedTrafficDiscard field.
func (o *ZoneProtectionProfiles) SetFragmentedTrafficDiscard(v bool) {
	o.FragmentedTrafficDiscard = &v
}

// GetIcmpFragDiscard returns the IcmpFragDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetIcmpFragDiscard() bool {
	if o == nil || IsNil(o.IcmpFragDiscard) {
		var ret bool
		return ret
	}
	return *o.IcmpFragDiscard
}

// GetIcmpFragDiscardOk returns a tuple with the IcmpFragDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetIcmpFragDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.IcmpFragDiscard) {
		return nil, false
	}
	return o.IcmpFragDiscard, true
}

// HasIcmpFragDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasIcmpFragDiscard() bool {
	if o != nil && !IsNil(o.IcmpFragDiscard) {
		return true
	}

	return false
}

// SetIcmpFragDiscard gets a reference to the given bool and assigns it to the IcmpFragDiscard field.
func (o *ZoneProtectionProfiles) SetIcmpFragDiscard(v bool) {
	o.IcmpFragDiscard = &v
}

// GetIcmpLargePacketDiscard returns the IcmpLargePacketDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetIcmpLargePacketDiscard() bool {
	if o == nil || IsNil(o.IcmpLargePacketDiscard) {
		var ret bool
		return ret
	}
	return *o.IcmpLargePacketDiscard
}

// GetIcmpLargePacketDiscardOk returns a tuple with the IcmpLargePacketDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetIcmpLargePacketDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.IcmpLargePacketDiscard) {
		return nil, false
	}
	return o.IcmpLargePacketDiscard, true
}

// HasIcmpLargePacketDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasIcmpLargePacketDiscard() bool {
	if o != nil && !IsNil(o.IcmpLargePacketDiscard) {
		return true
	}

	return false
}

// SetIcmpLargePacketDiscard gets a reference to the given bool and assigns it to the IcmpLargePacketDiscard field.
func (o *ZoneProtectionProfiles) SetIcmpLargePacketDiscard(v bool) {
	o.IcmpLargePacketDiscard = &v
}

// GetIcmpPingZeroIdDiscard returns the IcmpPingZeroIdDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetIcmpPingZeroIdDiscard() bool {
	if o == nil || IsNil(o.IcmpPingZeroIdDiscard) {
		var ret bool
		return ret
	}
	return *o.IcmpPingZeroIdDiscard
}

// GetIcmpPingZeroIdDiscardOk returns a tuple with the IcmpPingZeroIdDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetIcmpPingZeroIdDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.IcmpPingZeroIdDiscard) {
		return nil, false
	}
	return o.IcmpPingZeroIdDiscard, true
}

// HasIcmpPingZeroIdDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasIcmpPingZeroIdDiscard() bool {
	if o != nil && !IsNil(o.IcmpPingZeroIdDiscard) {
		return true
	}

	return false
}

// SetIcmpPingZeroIdDiscard gets a reference to the given bool and assigns it to the IcmpPingZeroIdDiscard field.
func (o *ZoneProtectionProfiles) SetIcmpPingZeroIdDiscard(v bool) {
	o.IcmpPingZeroIdDiscard = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ZoneProtectionProfiles) SetId(v string) {
	o.Id = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetIpv6() ZoneProtectionProfilesIpv6 {
	if o == nil || IsNil(o.Ipv6) {
		var ret ZoneProtectionProfilesIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetIpv6Ok() (*ZoneProtectionProfilesIpv6, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given ZoneProtectionProfilesIpv6 and assigns it to the Ipv6 field.
func (o *ZoneProtectionProfiles) SetIpv6(v ZoneProtectionProfilesIpv6) {
	o.Ipv6 = &v
}

// GetL2SecGroupTagProtection returns the L2SecGroupTagProtection field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetL2SecGroupTagProtection() ZoneProtectionProfilesL2SecGroupTagProtection {
	if o == nil || IsNil(o.L2SecGroupTagProtection) {
		var ret ZoneProtectionProfilesL2SecGroupTagProtection
		return ret
	}
	return *o.L2SecGroupTagProtection
}

// GetL2SecGroupTagProtectionOk returns a tuple with the L2SecGroupTagProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetL2SecGroupTagProtectionOk() (*ZoneProtectionProfilesL2SecGroupTagProtection, bool) {
	if o == nil || IsNil(o.L2SecGroupTagProtection) {
		return nil, false
	}
	return o.L2SecGroupTagProtection, true
}

// HasL2SecGroupTagProtection returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasL2SecGroupTagProtection() bool {
	if o != nil && !IsNil(o.L2SecGroupTagProtection) {
		return true
	}

	return false
}

// SetL2SecGroupTagProtection gets a reference to the given ZoneProtectionProfilesL2SecGroupTagProtection and assigns it to the L2SecGroupTagProtection field.
func (o *ZoneProtectionProfiles) SetL2SecGroupTagProtection(v ZoneProtectionProfilesL2SecGroupTagProtection) {
	o.L2SecGroupTagProtection = &v
}

// GetLooseSourceRoutingDiscard returns the LooseSourceRoutingDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetLooseSourceRoutingDiscard() bool {
	if o == nil || IsNil(o.LooseSourceRoutingDiscard) {
		var ret bool
		return ret
	}
	return *o.LooseSourceRoutingDiscard
}

// GetLooseSourceRoutingDiscardOk returns a tuple with the LooseSourceRoutingDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetLooseSourceRoutingDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.LooseSourceRoutingDiscard) {
		return nil, false
	}
	return o.LooseSourceRoutingDiscard, true
}

// HasLooseSourceRoutingDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasLooseSourceRoutingDiscard() bool {
	if o != nil && !IsNil(o.LooseSourceRoutingDiscard) {
		return true
	}

	return false
}

// SetLooseSourceRoutingDiscard gets a reference to the given bool and assigns it to the LooseSourceRoutingDiscard field.
func (o *ZoneProtectionProfiles) SetLooseSourceRoutingDiscard(v bool) {
	o.LooseSourceRoutingDiscard = &v
}

// GetMalformedOptionDiscard returns the MalformedOptionDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetMalformedOptionDiscard() bool {
	if o == nil || IsNil(o.MalformedOptionDiscard) {
		var ret bool
		return ret
	}
	return *o.MalformedOptionDiscard
}

// GetMalformedOptionDiscardOk returns a tuple with the MalformedOptionDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetMalformedOptionDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.MalformedOptionDiscard) {
		return nil, false
	}
	return o.MalformedOptionDiscard, true
}

// HasMalformedOptionDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasMalformedOptionDiscard() bool {
	if o != nil && !IsNil(o.MalformedOptionDiscard) {
		return true
	}

	return false
}

// SetMalformedOptionDiscard gets a reference to the given bool and assigns it to the MalformedOptionDiscard field.
func (o *ZoneProtectionProfiles) SetMalformedOptionDiscard(v bool) {
	o.MalformedOptionDiscard = &v
}

// GetMismatchedOverlappingTcpSegmentDiscard returns the MismatchedOverlappingTcpSegmentDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetMismatchedOverlappingTcpSegmentDiscard() bool {
	if o == nil || IsNil(o.MismatchedOverlappingTcpSegmentDiscard) {
		var ret bool
		return ret
	}
	return *o.MismatchedOverlappingTcpSegmentDiscard
}

// GetMismatchedOverlappingTcpSegmentDiscardOk returns a tuple with the MismatchedOverlappingTcpSegmentDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetMismatchedOverlappingTcpSegmentDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.MismatchedOverlappingTcpSegmentDiscard) {
		return nil, false
	}
	return o.MismatchedOverlappingTcpSegmentDiscard, true
}

// HasMismatchedOverlappingTcpSegmentDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasMismatchedOverlappingTcpSegmentDiscard() bool {
	if o != nil && !IsNil(o.MismatchedOverlappingTcpSegmentDiscard) {
		return true
	}

	return false
}

// SetMismatchedOverlappingTcpSegmentDiscard gets a reference to the given bool and assigns it to the MismatchedOverlappingTcpSegmentDiscard field.
func (o *ZoneProtectionProfiles) SetMismatchedOverlappingTcpSegmentDiscard(v bool) {
	o.MismatchedOverlappingTcpSegmentDiscard = &v
}

// GetMptcpOptionStrip returns the MptcpOptionStrip field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetMptcpOptionStrip() string {
	if o == nil || IsNil(o.MptcpOptionStrip) {
		var ret string
		return ret
	}
	return *o.MptcpOptionStrip
}

// GetMptcpOptionStripOk returns a tuple with the MptcpOptionStrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetMptcpOptionStripOk() (*string, bool) {
	if o == nil || IsNil(o.MptcpOptionStrip) {
		return nil, false
	}
	return o.MptcpOptionStrip, true
}

// HasMptcpOptionStrip returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasMptcpOptionStrip() bool {
	if o != nil && !IsNil(o.MptcpOptionStrip) {
		return true
	}

	return false
}

// SetMptcpOptionStrip gets a reference to the given string and assigns it to the MptcpOptionStrip field.
func (o *ZoneProtectionProfiles) SetMptcpOptionStrip(v string) {
	o.MptcpOptionStrip = &v
}

// GetName returns the Name field value
func (o *ZoneProtectionProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ZoneProtectionProfiles) SetName(v string) {
	o.Name = v
}

// GetNonIpProtocol returns the NonIpProtocol field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetNonIpProtocol() ZoneProtectionProfilesNonIpProtocol {
	if o == nil || IsNil(o.NonIpProtocol) {
		var ret ZoneProtectionProfilesNonIpProtocol
		return ret
	}
	return *o.NonIpProtocol
}

// GetNonIpProtocolOk returns a tuple with the NonIpProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetNonIpProtocolOk() (*ZoneProtectionProfilesNonIpProtocol, bool) {
	if o == nil || IsNil(o.NonIpProtocol) {
		return nil, false
	}
	return o.NonIpProtocol, true
}

// HasNonIpProtocol returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasNonIpProtocol() bool {
	if o != nil && !IsNil(o.NonIpProtocol) {
		return true
	}

	return false
}

// SetNonIpProtocol gets a reference to the given ZoneProtectionProfilesNonIpProtocol and assigns it to the NonIpProtocol field.
func (o *ZoneProtectionProfiles) SetNonIpProtocol(v ZoneProtectionProfilesNonIpProtocol) {
	o.NonIpProtocol = &v
}

// GetRecordRouteDiscard returns the RecordRouteDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetRecordRouteDiscard() bool {
	if o == nil || IsNil(o.RecordRouteDiscard) {
		var ret bool
		return ret
	}
	return *o.RecordRouteDiscard
}

// GetRecordRouteDiscardOk returns a tuple with the RecordRouteDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetRecordRouteDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.RecordRouteDiscard) {
		return nil, false
	}
	return o.RecordRouteDiscard, true
}

// HasRecordRouteDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasRecordRouteDiscard() bool {
	if o != nil && !IsNil(o.RecordRouteDiscard) {
		return true
	}

	return false
}

// SetRecordRouteDiscard gets a reference to the given bool and assigns it to the RecordRouteDiscard field.
func (o *ZoneProtectionProfiles) SetRecordRouteDiscard(v bool) {
	o.RecordRouteDiscard = &v
}

// GetRejectNonSynTcp returns the RejectNonSynTcp field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetRejectNonSynTcp() string {
	if o == nil || IsNil(o.RejectNonSynTcp) {
		var ret string
		return ret
	}
	return *o.RejectNonSynTcp
}

// GetRejectNonSynTcpOk returns a tuple with the RejectNonSynTcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetRejectNonSynTcpOk() (*string, bool) {
	if o == nil || IsNil(o.RejectNonSynTcp) {
		return nil, false
	}
	return o.RejectNonSynTcp, true
}

// HasRejectNonSynTcp returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasRejectNonSynTcp() bool {
	if o != nil && !IsNil(o.RejectNonSynTcp) {
		return true
	}

	return false
}

// SetRejectNonSynTcp gets a reference to the given string and assigns it to the RejectNonSynTcp field.
func (o *ZoneProtectionProfiles) SetRejectNonSynTcp(v string) {
	o.RejectNonSynTcp = &v
}

// GetScan returns the Scan field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetScan() []ZoneProtectionProfilesScanInner {
	if o == nil || IsNil(o.Scan) {
		var ret []ZoneProtectionProfilesScanInner
		return ret
	}
	return o.Scan
}

// GetScanOk returns a tuple with the Scan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetScanOk() ([]ZoneProtectionProfilesScanInner, bool) {
	if o == nil || IsNil(o.Scan) {
		return nil, false
	}
	return o.Scan, true
}

// HasScan returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasScan() bool {
	if o != nil && !IsNil(o.Scan) {
		return true
	}

	return false
}

// SetScan gets a reference to the given []ZoneProtectionProfilesScanInner and assigns it to the Scan field.
func (o *ZoneProtectionProfiles) SetScan(v []ZoneProtectionProfilesScanInner) {
	o.Scan = v
}

// GetScanWhiteList returns the ScanWhiteList field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetScanWhiteList() []ZoneProtectionProfilesScanWhiteListInner {
	if o == nil || IsNil(o.ScanWhiteList) {
		var ret []ZoneProtectionProfilesScanWhiteListInner
		return ret
	}
	return o.ScanWhiteList
}

// GetScanWhiteListOk returns a tuple with the ScanWhiteList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetScanWhiteListOk() ([]ZoneProtectionProfilesScanWhiteListInner, bool) {
	if o == nil || IsNil(o.ScanWhiteList) {
		return nil, false
	}
	return o.ScanWhiteList, true
}

// HasScanWhiteList returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasScanWhiteList() bool {
	if o != nil && !IsNil(o.ScanWhiteList) {
		return true
	}

	return false
}

// SetScanWhiteList gets a reference to the given []ZoneProtectionProfilesScanWhiteListInner and assigns it to the ScanWhiteList field.
func (o *ZoneProtectionProfiles) SetScanWhiteList(v []ZoneProtectionProfilesScanWhiteListInner) {
	o.ScanWhiteList = v
}

// GetSecurityDiscard returns the SecurityDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetSecurityDiscard() bool {
	if o == nil || IsNil(o.SecurityDiscard) {
		var ret bool
		return ret
	}
	return *o.SecurityDiscard
}

// GetSecurityDiscardOk returns a tuple with the SecurityDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetSecurityDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.SecurityDiscard) {
		return nil, false
	}
	return o.SecurityDiscard, true
}

// HasSecurityDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasSecurityDiscard() bool {
	if o != nil && !IsNil(o.SecurityDiscard) {
		return true
	}

	return false
}

// SetSecurityDiscard gets a reference to the given bool and assigns it to the SecurityDiscard field.
func (o *ZoneProtectionProfiles) SetSecurityDiscard(v bool) {
	o.SecurityDiscard = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *ZoneProtectionProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSpoofedIpDiscard returns the SpoofedIpDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetSpoofedIpDiscard() bool {
	if o == nil || IsNil(o.SpoofedIpDiscard) {
		var ret bool
		return ret
	}
	return *o.SpoofedIpDiscard
}

// GetSpoofedIpDiscardOk returns a tuple with the SpoofedIpDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetSpoofedIpDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.SpoofedIpDiscard) {
		return nil, false
	}
	return o.SpoofedIpDiscard, true
}

// HasSpoofedIpDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasSpoofedIpDiscard() bool {
	if o != nil && !IsNil(o.SpoofedIpDiscard) {
		return true
	}

	return false
}

// SetSpoofedIpDiscard gets a reference to the given bool and assigns it to the SpoofedIpDiscard field.
func (o *ZoneProtectionProfiles) SetSpoofedIpDiscard(v bool) {
	o.SpoofedIpDiscard = &v
}

// GetStreamIdDiscard returns the StreamIdDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetStreamIdDiscard() bool {
	if o == nil || IsNil(o.StreamIdDiscard) {
		var ret bool
		return ret
	}
	return *o.StreamIdDiscard
}

// GetStreamIdDiscardOk returns a tuple with the StreamIdDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetStreamIdDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.StreamIdDiscard) {
		return nil, false
	}
	return o.StreamIdDiscard, true
}

// HasStreamIdDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasStreamIdDiscard() bool {
	if o != nil && !IsNil(o.StreamIdDiscard) {
		return true
	}

	return false
}

// SetStreamIdDiscard gets a reference to the given bool and assigns it to the StreamIdDiscard field.
func (o *ZoneProtectionProfiles) SetStreamIdDiscard(v bool) {
	o.StreamIdDiscard = &v
}

// GetStrictIpCheck returns the StrictIpCheck field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetStrictIpCheck() bool {
	if o == nil || IsNil(o.StrictIpCheck) {
		var ret bool
		return ret
	}
	return *o.StrictIpCheck
}

// GetStrictIpCheckOk returns a tuple with the StrictIpCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetStrictIpCheckOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictIpCheck) {
		return nil, false
	}
	return o.StrictIpCheck, true
}

// HasStrictIpCheck returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasStrictIpCheck() bool {
	if o != nil && !IsNil(o.StrictIpCheck) {
		return true
	}

	return false
}

// SetStrictIpCheck gets a reference to the given bool and assigns it to the StrictIpCheck field.
func (o *ZoneProtectionProfiles) SetStrictIpCheck(v bool) {
	o.StrictIpCheck = &v
}

// GetStrictSourceRoutingDiscard returns the StrictSourceRoutingDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetStrictSourceRoutingDiscard() bool {
	if o == nil || IsNil(o.StrictSourceRoutingDiscard) {
		var ret bool
		return ret
	}
	return *o.StrictSourceRoutingDiscard
}

// GetStrictSourceRoutingDiscardOk returns a tuple with the StrictSourceRoutingDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetStrictSourceRoutingDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictSourceRoutingDiscard) {
		return nil, false
	}
	return o.StrictSourceRoutingDiscard, true
}

// HasStrictSourceRoutingDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasStrictSourceRoutingDiscard() bool {
	if o != nil && !IsNil(o.StrictSourceRoutingDiscard) {
		return true
	}

	return false
}

// SetStrictSourceRoutingDiscard gets a reference to the given bool and assigns it to the StrictSourceRoutingDiscard field.
func (o *ZoneProtectionProfiles) SetStrictSourceRoutingDiscard(v bool) {
	o.StrictSourceRoutingDiscard = &v
}

// GetSuppressIcmpNeedfrag returns the SuppressIcmpNeedfrag field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetSuppressIcmpNeedfrag() bool {
	if o == nil || IsNil(o.SuppressIcmpNeedfrag) {
		var ret bool
		return ret
	}
	return *o.SuppressIcmpNeedfrag
}

// GetSuppressIcmpNeedfragOk returns a tuple with the SuppressIcmpNeedfrag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetSuppressIcmpNeedfragOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressIcmpNeedfrag) {
		return nil, false
	}
	return o.SuppressIcmpNeedfrag, true
}

// HasSuppressIcmpNeedfrag returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasSuppressIcmpNeedfrag() bool {
	if o != nil && !IsNil(o.SuppressIcmpNeedfrag) {
		return true
	}

	return false
}

// SetSuppressIcmpNeedfrag gets a reference to the given bool and assigns it to the SuppressIcmpNeedfrag field.
func (o *ZoneProtectionProfiles) SetSuppressIcmpNeedfrag(v bool) {
	o.SuppressIcmpNeedfrag = &v
}

// GetSuppressIcmpTimeexceeded returns the SuppressIcmpTimeexceeded field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetSuppressIcmpTimeexceeded() bool {
	if o == nil || IsNil(o.SuppressIcmpTimeexceeded) {
		var ret bool
		return ret
	}
	return *o.SuppressIcmpTimeexceeded
}

// GetSuppressIcmpTimeexceededOk returns a tuple with the SuppressIcmpTimeexceeded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetSuppressIcmpTimeexceededOk() (*bool, bool) {
	if o == nil || IsNil(o.SuppressIcmpTimeexceeded) {
		return nil, false
	}
	return o.SuppressIcmpTimeexceeded, true
}

// HasSuppressIcmpTimeexceeded returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasSuppressIcmpTimeexceeded() bool {
	if o != nil && !IsNil(o.SuppressIcmpTimeexceeded) {
		return true
	}

	return false
}

// SetSuppressIcmpTimeexceeded gets a reference to the given bool and assigns it to the SuppressIcmpTimeexceeded field.
func (o *ZoneProtectionProfiles) SetSuppressIcmpTimeexceeded(v bool) {
	o.SuppressIcmpTimeexceeded = &v
}

// GetTcpFastOpenAndDataStrip returns the TcpFastOpenAndDataStrip field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTcpFastOpenAndDataStrip() bool {
	if o == nil || IsNil(o.TcpFastOpenAndDataStrip) {
		var ret bool
		return ret
	}
	return *o.TcpFastOpenAndDataStrip
}

// GetTcpFastOpenAndDataStripOk returns a tuple with the TcpFastOpenAndDataStrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTcpFastOpenAndDataStripOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpFastOpenAndDataStrip) {
		return nil, false
	}
	return o.TcpFastOpenAndDataStrip, true
}

// HasTcpFastOpenAndDataStrip returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTcpFastOpenAndDataStrip() bool {
	if o != nil && !IsNil(o.TcpFastOpenAndDataStrip) {
		return true
	}

	return false
}

// SetTcpFastOpenAndDataStrip gets a reference to the given bool and assigns it to the TcpFastOpenAndDataStrip field.
func (o *ZoneProtectionProfiles) SetTcpFastOpenAndDataStrip(v bool) {
	o.TcpFastOpenAndDataStrip = &v
}

// GetTcpHandshakeDiscard returns the TcpHandshakeDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTcpHandshakeDiscard() bool {
	if o == nil || IsNil(o.TcpHandshakeDiscard) {
		var ret bool
		return ret
	}
	return *o.TcpHandshakeDiscard
}

// GetTcpHandshakeDiscardOk returns a tuple with the TcpHandshakeDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTcpHandshakeDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpHandshakeDiscard) {
		return nil, false
	}
	return o.TcpHandshakeDiscard, true
}

// HasTcpHandshakeDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTcpHandshakeDiscard() bool {
	if o != nil && !IsNil(o.TcpHandshakeDiscard) {
		return true
	}

	return false
}

// SetTcpHandshakeDiscard gets a reference to the given bool and assigns it to the TcpHandshakeDiscard field.
func (o *ZoneProtectionProfiles) SetTcpHandshakeDiscard(v bool) {
	o.TcpHandshakeDiscard = &v
}

// GetTcpSynWithDataDiscard returns the TcpSynWithDataDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTcpSynWithDataDiscard() bool {
	if o == nil || IsNil(o.TcpSynWithDataDiscard) {
		var ret bool
		return ret
	}
	return *o.TcpSynWithDataDiscard
}

// GetTcpSynWithDataDiscardOk returns a tuple with the TcpSynWithDataDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTcpSynWithDataDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpSynWithDataDiscard) {
		return nil, false
	}
	return o.TcpSynWithDataDiscard, true
}

// HasTcpSynWithDataDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTcpSynWithDataDiscard() bool {
	if o != nil && !IsNil(o.TcpSynWithDataDiscard) {
		return true
	}

	return false
}

// SetTcpSynWithDataDiscard gets a reference to the given bool and assigns it to the TcpSynWithDataDiscard field.
func (o *ZoneProtectionProfiles) SetTcpSynWithDataDiscard(v bool) {
	o.TcpSynWithDataDiscard = &v
}

// GetTcpSynackWithDataDiscard returns the TcpSynackWithDataDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTcpSynackWithDataDiscard() bool {
	if o == nil || IsNil(o.TcpSynackWithDataDiscard) {
		var ret bool
		return ret
	}
	return *o.TcpSynackWithDataDiscard
}

// GetTcpSynackWithDataDiscardOk returns a tuple with the TcpSynackWithDataDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTcpSynackWithDataDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpSynackWithDataDiscard) {
		return nil, false
	}
	return o.TcpSynackWithDataDiscard, true
}

// HasTcpSynackWithDataDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTcpSynackWithDataDiscard() bool {
	if o != nil && !IsNil(o.TcpSynackWithDataDiscard) {
		return true
	}

	return false
}

// SetTcpSynackWithDataDiscard gets a reference to the given bool and assigns it to the TcpSynackWithDataDiscard field.
func (o *ZoneProtectionProfiles) SetTcpSynackWithDataDiscard(v bool) {
	o.TcpSynackWithDataDiscard = &v
}

// GetTcpTimestampStrip returns the TcpTimestampStrip field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTcpTimestampStrip() bool {
	if o == nil || IsNil(o.TcpTimestampStrip) {
		var ret bool
		return ret
	}
	return *o.TcpTimestampStrip
}

// GetTcpTimestampStripOk returns a tuple with the TcpTimestampStrip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTcpTimestampStripOk() (*bool, bool) {
	if o == nil || IsNil(o.TcpTimestampStrip) {
		return nil, false
	}
	return o.TcpTimestampStrip, true
}

// HasTcpTimestampStrip returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTcpTimestampStrip() bool {
	if o != nil && !IsNil(o.TcpTimestampStrip) {
		return true
	}

	return false
}

// SetTcpTimestampStrip gets a reference to the given bool and assigns it to the TcpTimestampStrip field.
func (o *ZoneProtectionProfiles) SetTcpTimestampStrip(v bool) {
	o.TcpTimestampStrip = &v
}

// GetTimestampDiscard returns the TimestampDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetTimestampDiscard() bool {
	if o == nil || IsNil(o.TimestampDiscard) {
		var ret bool
		return ret
	}
	return *o.TimestampDiscard
}

// GetTimestampDiscardOk returns a tuple with the TimestampDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetTimestampDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.TimestampDiscard) {
		return nil, false
	}
	return o.TimestampDiscard, true
}

// HasTimestampDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasTimestampDiscard() bool {
	if o != nil && !IsNil(o.TimestampDiscard) {
		return true
	}

	return false
}

// SetTimestampDiscard gets a reference to the given bool and assigns it to the TimestampDiscard field.
func (o *ZoneProtectionProfiles) SetTimestampDiscard(v bool) {
	o.TimestampDiscard = &v
}

// GetUnknownOptionDiscard returns the UnknownOptionDiscard field value if set, zero value otherwise.
func (o *ZoneProtectionProfiles) GetUnknownOptionDiscard() bool {
	if o == nil || IsNil(o.UnknownOptionDiscard) {
		var ret bool
		return ret
	}
	return *o.UnknownOptionDiscard
}

// GetUnknownOptionDiscardOk returns a tuple with the UnknownOptionDiscard field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfiles) GetUnknownOptionDiscardOk() (*bool, bool) {
	if o == nil || IsNil(o.UnknownOptionDiscard) {
		return nil, false
	}
	return o.UnknownOptionDiscard, true
}

// HasUnknownOptionDiscard returns a boolean if a field has been set.
func (o *ZoneProtectionProfiles) HasUnknownOptionDiscard() bool {
	if o != nil && !IsNil(o.UnknownOptionDiscard) {
		return true
	}

	return false
}

// SetUnknownOptionDiscard gets a reference to the given bool and assigns it to the UnknownOptionDiscard field.
func (o *ZoneProtectionProfiles) SetUnknownOptionDiscard(v bool) {
	o.UnknownOptionDiscard = &v
}

func (o ZoneProtectionProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneProtectionProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsymmetricPath) {
		toSerialize["asymmetric_path"] = o.AsymmetricPath
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DiscardIcmpEmbeddedError) {
		toSerialize["discard_icmp_embedded_error"] = o.DiscardIcmpEmbeddedError
	}
	if !IsNil(o.Flood) {
		toSerialize["flood"] = o.Flood
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.FragmentedTrafficDiscard) {
		toSerialize["fragmented_traffic_discard"] = o.FragmentedTrafficDiscard
	}
	if !IsNil(o.IcmpFragDiscard) {
		toSerialize["icmp_frag_discard"] = o.IcmpFragDiscard
	}
	if !IsNil(o.IcmpLargePacketDiscard) {
		toSerialize["icmp_large_packet_discard"] = o.IcmpLargePacketDiscard
	}
	if !IsNil(o.IcmpPingZeroIdDiscard) {
		toSerialize["icmp_ping_zero_id_discard"] = o.IcmpPingZeroIdDiscard
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}
	if !IsNil(o.L2SecGroupTagProtection) {
		toSerialize["l2_sec_group_tag_protection"] = o.L2SecGroupTagProtection
	}
	if !IsNil(o.LooseSourceRoutingDiscard) {
		toSerialize["loose_source_routing_discard"] = o.LooseSourceRoutingDiscard
	}
	if !IsNil(o.MalformedOptionDiscard) {
		toSerialize["malformed_option_discard"] = o.MalformedOptionDiscard
	}
	if !IsNil(o.MismatchedOverlappingTcpSegmentDiscard) {
		toSerialize["mismatched_overlapping_tcp_segment_discard"] = o.MismatchedOverlappingTcpSegmentDiscard
	}
	if !IsNil(o.MptcpOptionStrip) {
		toSerialize["mptcp_option_strip"] = o.MptcpOptionStrip
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NonIpProtocol) {
		toSerialize["non_ip_protocol"] = o.NonIpProtocol
	}
	if !IsNil(o.RecordRouteDiscard) {
		toSerialize["record_route_discard"] = o.RecordRouteDiscard
	}
	if !IsNil(o.RejectNonSynTcp) {
		toSerialize["reject_non_syn_tcp"] = o.RejectNonSynTcp
	}
	if !IsNil(o.Scan) {
		toSerialize["scan"] = o.Scan
	}
	if !IsNil(o.ScanWhiteList) {
		toSerialize["scan_white_list"] = o.ScanWhiteList
	}
	if !IsNil(o.SecurityDiscard) {
		toSerialize["security_discard"] = o.SecurityDiscard
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.SpoofedIpDiscard) {
		toSerialize["spoofed_ip_discard"] = o.SpoofedIpDiscard
	}
	if !IsNil(o.StreamIdDiscard) {
		toSerialize["stream_id_discard"] = o.StreamIdDiscard
	}
	if !IsNil(o.StrictIpCheck) {
		toSerialize["strict_ip_check"] = o.StrictIpCheck
	}
	if !IsNil(o.StrictSourceRoutingDiscard) {
		toSerialize["strict_source_routing_discard"] = o.StrictSourceRoutingDiscard
	}
	if !IsNil(o.SuppressIcmpNeedfrag) {
		toSerialize["suppress_icmp_needfrag"] = o.SuppressIcmpNeedfrag
	}
	if !IsNil(o.SuppressIcmpTimeexceeded) {
		toSerialize["suppress_icmp_timeexceeded"] = o.SuppressIcmpTimeexceeded
	}
	if !IsNil(o.TcpFastOpenAndDataStrip) {
		toSerialize["tcp_fast_open_and_data_strip"] = o.TcpFastOpenAndDataStrip
	}
	if !IsNil(o.TcpHandshakeDiscard) {
		toSerialize["tcp_handshake_discard"] = o.TcpHandshakeDiscard
	}
	if !IsNil(o.TcpSynWithDataDiscard) {
		toSerialize["tcp_syn_with_data_discard"] = o.TcpSynWithDataDiscard
	}
	if !IsNil(o.TcpSynackWithDataDiscard) {
		toSerialize["tcp_synack_with_data_discard"] = o.TcpSynackWithDataDiscard
	}
	if !IsNil(o.TcpTimestampStrip) {
		toSerialize["tcp_timestamp_strip"] = o.TcpTimestampStrip
	}
	if !IsNil(o.TimestampDiscard) {
		toSerialize["timestamp_discard"] = o.TimestampDiscard
	}
	if !IsNil(o.UnknownOptionDiscard) {
		toSerialize["unknown_option_discard"] = o.UnknownOptionDiscard
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneProtectionProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneProtectionProfiles := _ZoneProtectionProfiles{}

	err = json.Unmarshal(data, &varZoneProtectionProfiles)

	if err != nil {
		return err
	}

	*o = ZoneProtectionProfiles(varZoneProtectionProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "asymmetric_path")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device")
		delete(additionalProperties, "discard_icmp_embedded_error")
		delete(additionalProperties, "flood")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "fragmented_traffic_discard")
		delete(additionalProperties, "icmp_frag_discard")
		delete(additionalProperties, "icmp_large_packet_discard")
		delete(additionalProperties, "icmp_ping_zero_id_discard")
		delete(additionalProperties, "id")
		delete(additionalProperties, "ipv6")
		delete(additionalProperties, "l2_sec_group_tag_protection")
		delete(additionalProperties, "loose_source_routing_discard")
		delete(additionalProperties, "malformed_option_discard")
		delete(additionalProperties, "mismatched_overlapping_tcp_segment_discard")
		delete(additionalProperties, "mptcp_option_strip")
		delete(additionalProperties, "name")
		delete(additionalProperties, "non_ip_protocol")
		delete(additionalProperties, "record_route_discard")
		delete(additionalProperties, "reject_non_syn_tcp")
		delete(additionalProperties, "scan")
		delete(additionalProperties, "scan_white_list")
		delete(additionalProperties, "security_discard")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "spoofed_ip_discard")
		delete(additionalProperties, "stream_id_discard")
		delete(additionalProperties, "strict_ip_check")
		delete(additionalProperties, "strict_source_routing_discard")
		delete(additionalProperties, "suppress_icmp_needfrag")
		delete(additionalProperties, "suppress_icmp_timeexceeded")
		delete(additionalProperties, "tcp_fast_open_and_data_strip")
		delete(additionalProperties, "tcp_handshake_discard")
		delete(additionalProperties, "tcp_syn_with_data_discard")
		delete(additionalProperties, "tcp_synack_with_data_discard")
		delete(additionalProperties, "tcp_timestamp_strip")
		delete(additionalProperties, "timestamp_discard")
		delete(additionalProperties, "unknown_option_discard")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneProtectionProfiles struct {
	value *ZoneProtectionProfiles
	isSet bool
}

func (v NullableZoneProtectionProfiles) Get() *ZoneProtectionProfiles {
	return v.value
}

func (v *NullableZoneProtectionProfiles) Set(val *ZoneProtectionProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneProtectionProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneProtectionProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneProtectionProfiles(val *ZoneProtectionProfiles) *NullableZoneProtectionProfiles {
	return &NullableZoneProtectionProfiles{value: val, isSet: true}
}

func (v NullableZoneProtectionProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneProtectionProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
