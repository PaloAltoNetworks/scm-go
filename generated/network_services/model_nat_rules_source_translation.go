/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the NatRulesSourceTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRulesSourceTranslation{}

// NatRulesSourceTranslation Source translation configuration (Static/P-D-N-T).
type NatRulesSourceTranslation struct {
	DynamicIp            *NatRulesSourceTranslationDynamicIp        `json:"dynamic_ip,omitempty"`
	DynamicIpAndPort     *NatRulesSourceTranslationDynamicIpAndPort `json:"dynamic_ip_and_port,omitempty"`
	StaticIp             *NatRulesSourceTranslationStaticIp         `json:"static_ip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NatRulesSourceTranslation NatRulesSourceTranslation

// NewNatRulesSourceTranslation instantiates a new NatRulesSourceTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRulesSourceTranslation() *NatRulesSourceTranslation {
	this := NatRulesSourceTranslation{}
	return &this
}

// NewNatRulesSourceTranslationWithDefaults instantiates a new NatRulesSourceTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesSourceTranslationWithDefaults() *NatRulesSourceTranslation {
	this := NatRulesSourceTranslation{}
	return &this
}

// GetDynamicIp returns the DynamicIp field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetDynamicIp() NatRulesSourceTranslationDynamicIp {
	if o == nil || IsNil(o.DynamicIp) {
		var ret NatRulesSourceTranslationDynamicIp
		return ret
	}
	return *o.DynamicIp
}

// GetDynamicIpOk returns a tuple with the DynamicIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetDynamicIpOk() (*NatRulesSourceTranslationDynamicIp, bool) {
	if o == nil || IsNil(o.DynamicIp) {
		return nil, false
	}
	return o.DynamicIp, true
}

// HasDynamicIp returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasDynamicIp() bool {
	if o != nil && !IsNil(o.DynamicIp) {
		return true
	}

	return false
}

// SetDynamicIp gets a reference to the given NatRulesSourceTranslationDynamicIp and assigns it to the DynamicIp field.
func (o *NatRulesSourceTranslation) SetDynamicIp(v NatRulesSourceTranslationDynamicIp) {
	o.DynamicIp = &v
}

// GetDynamicIpAndPort returns the DynamicIpAndPort field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetDynamicIpAndPort() NatRulesSourceTranslationDynamicIpAndPort {
	if o == nil || IsNil(o.DynamicIpAndPort) {
		var ret NatRulesSourceTranslationDynamicIpAndPort
		return ret
	}
	return *o.DynamicIpAndPort
}

// GetDynamicIpAndPortOk returns a tuple with the DynamicIpAndPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetDynamicIpAndPortOk() (*NatRulesSourceTranslationDynamicIpAndPort, bool) {
	if o == nil || IsNil(o.DynamicIpAndPort) {
		return nil, false
	}
	return o.DynamicIpAndPort, true
}

// HasDynamicIpAndPort returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasDynamicIpAndPort() bool {
	if o != nil && !IsNil(o.DynamicIpAndPort) {
		return true
	}

	return false
}

// SetDynamicIpAndPort gets a reference to the given NatRulesSourceTranslationDynamicIpAndPort and assigns it to the DynamicIpAndPort field.
func (o *NatRulesSourceTranslation) SetDynamicIpAndPort(v NatRulesSourceTranslationDynamicIpAndPort) {
	o.DynamicIpAndPort = &v
}

// GetStaticIp returns the StaticIp field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetStaticIp() NatRulesSourceTranslationStaticIp {
	if o == nil || IsNil(o.StaticIp) {
		var ret NatRulesSourceTranslationStaticIp
		return ret
	}
	return *o.StaticIp
}

// GetStaticIpOk returns a tuple with the StaticIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetStaticIpOk() (*NatRulesSourceTranslationStaticIp, bool) {
	if o == nil || IsNil(o.StaticIp) {
		return nil, false
	}
	return o.StaticIp, true
}

// HasStaticIp returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasStaticIp() bool {
	if o != nil && !IsNil(o.StaticIp) {
		return true
	}

	return false
}

// SetStaticIp gets a reference to the given NatRulesSourceTranslationStaticIp and assigns it to the StaticIp field.
func (o *NatRulesSourceTranslation) SetStaticIp(v NatRulesSourceTranslationStaticIp) {
	o.StaticIp = &v
}

func (o NatRulesSourceTranslation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRulesSourceTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DynamicIp) {
		toSerialize["dynamic_ip"] = o.DynamicIp
	}
	if !IsNil(o.DynamicIpAndPort) {
		toSerialize["dynamic_ip_and_port"] = o.DynamicIpAndPort
	}
	if !IsNil(o.StaticIp) {
		toSerialize["static_ip"] = o.StaticIp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRulesSourceTranslation) UnmarshalJSON(data []byte) (err error) {
	varNatRulesSourceTranslation := _NatRulesSourceTranslation{}

	err = json.Unmarshal(data, &varNatRulesSourceTranslation)

	if err != nil {
		return err
	}

	*o = NatRulesSourceTranslation(varNatRulesSourceTranslation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dynamic_ip")
		delete(additionalProperties, "dynamic_ip_and_port")
		delete(additionalProperties, "static_ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRulesSourceTranslation struct {
	value *NatRulesSourceTranslation
	isSet bool
}

func (v NullableNatRulesSourceTranslation) Get() *NatRulesSourceTranslation {
	return v.value
}

func (v *NullableNatRulesSourceTranslation) Set(val *NatRulesSourceTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRulesSourceTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRulesSourceTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRulesSourceTranslation(val *NatRulesSourceTranslation) *NullableNatRulesSourceTranslation {
	return &NullableNatRulesSourceTranslation{value: val, isSet: true}
}

func (v NullableNatRulesSourceTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRulesSourceTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
