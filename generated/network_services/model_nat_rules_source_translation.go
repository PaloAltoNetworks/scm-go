/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the NatRulesSourceTranslation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRulesSourceTranslation{}

// NatRulesSourceTranslation struct for NatRulesSourceTranslation
type NatRulesSourceTranslation struct {
	BiDirectional *bool                              `json:"bi_directional,omitempty"`
	Fallback      *NatRulesSourceTranslationFallback `json:"fallback,omitempty"`
	// Interface name
	Interface *string `json:"interface,omitempty"`
	// Translated IP addresses
	TranslatedAddressArray []string `json:"translated_address_array,omitempty"`
	// Translated IP address
	TranslatedAddressSingle *string `json:"translated_address_single,omitempty"`
	AdditionalProperties    map[string]interface{}
}

type _NatRulesSourceTranslation NatRulesSourceTranslation

// NewNatRulesSourceTranslation instantiates a new NatRulesSourceTranslation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRulesSourceTranslation() *NatRulesSourceTranslation {
	this := NatRulesSourceTranslation{}
	return &this
}

// NewNatRulesSourceTranslationWithDefaults instantiates a new NatRulesSourceTranslation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesSourceTranslationWithDefaults() *NatRulesSourceTranslation {
	this := NatRulesSourceTranslation{}
	return &this
}

// GetBiDirectional returns the BiDirectional field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetBiDirectional() bool {
	if o == nil || IsNil(o.BiDirectional) {
		var ret bool
		return ret
	}
	return *o.BiDirectional
}

// GetBiDirectionalOk returns a tuple with the BiDirectional field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetBiDirectionalOk() (*bool, bool) {
	if o == nil || IsNil(o.BiDirectional) {
		return nil, false
	}
	return o.BiDirectional, true
}

// HasBiDirectional returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasBiDirectional() bool {
	if o != nil && !IsNil(o.BiDirectional) {
		return true
	}

	return false
}

// SetBiDirectional gets a reference to the given bool and assigns it to the BiDirectional field.
func (o *NatRulesSourceTranslation) SetBiDirectional(v bool) {
	o.BiDirectional = &v
}

// GetFallback returns the Fallback field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetFallback() NatRulesSourceTranslationFallback {
	if o == nil || IsNil(o.Fallback) {
		var ret NatRulesSourceTranslationFallback
		return ret
	}
	return *o.Fallback
}

// GetFallbackOk returns a tuple with the Fallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetFallbackOk() (*NatRulesSourceTranslationFallback, bool) {
	if o == nil || IsNil(o.Fallback) {
		return nil, false
	}
	return o.Fallback, true
}

// HasFallback returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasFallback() bool {
	if o != nil && !IsNil(o.Fallback) {
		return true
	}

	return false
}

// SetFallback gets a reference to the given NatRulesSourceTranslationFallback and assigns it to the Fallback field.
func (o *NatRulesSourceTranslation) SetFallback(v NatRulesSourceTranslationFallback) {
	o.Fallback = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetInterface() string {
	if o == nil || IsNil(o.Interface) {
		var ret string
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given string and assigns it to the Interface field.
func (o *NatRulesSourceTranslation) SetInterface(v string) {
	o.Interface = &v
}

// GetTranslatedAddressArray returns the TranslatedAddressArray field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetTranslatedAddressArray() []string {
	if o == nil || IsNil(o.TranslatedAddressArray) {
		var ret []string
		return ret
	}
	return o.TranslatedAddressArray
}

// GetTranslatedAddressArrayOk returns a tuple with the TranslatedAddressArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetTranslatedAddressArrayOk() ([]string, bool) {
	if o == nil || IsNil(o.TranslatedAddressArray) {
		return nil, false
	}
	return o.TranslatedAddressArray, true
}

// HasTranslatedAddressArray returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasTranslatedAddressArray() bool {
	if o != nil && !IsNil(o.TranslatedAddressArray) {
		return true
	}

	return false
}

// SetTranslatedAddressArray gets a reference to the given []string and assigns it to the TranslatedAddressArray field.
func (o *NatRulesSourceTranslation) SetTranslatedAddressArray(v []string) {
	o.TranslatedAddressArray = v
}

// GetTranslatedAddressSingle returns the TranslatedAddressSingle field value if set, zero value otherwise.
func (o *NatRulesSourceTranslation) GetTranslatedAddressSingle() string {
	if o == nil || IsNil(o.TranslatedAddressSingle) {
		var ret string
		return ret
	}
	return *o.TranslatedAddressSingle
}

// GetTranslatedAddressSingleOk returns a tuple with the TranslatedAddressSingle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesSourceTranslation) GetTranslatedAddressSingleOk() (*string, bool) {
	if o == nil || IsNil(o.TranslatedAddressSingle) {
		return nil, false
	}
	return o.TranslatedAddressSingle, true
}

// HasTranslatedAddressSingle returns a boolean if a field has been set.
func (o *NatRulesSourceTranslation) HasTranslatedAddressSingle() bool {
	if o != nil && !IsNil(o.TranslatedAddressSingle) {
		return true
	}

	return false
}

// SetTranslatedAddressSingle gets a reference to the given string and assigns it to the TranslatedAddressSingle field.
func (o *NatRulesSourceTranslation) SetTranslatedAddressSingle(v string) {
	o.TranslatedAddressSingle = &v
}

func (o NatRulesSourceTranslation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRulesSourceTranslation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BiDirectional) {
		toSerialize["bi_directional"] = o.BiDirectional
	}
	if !IsNil(o.Fallback) {
		toSerialize["fallback"] = o.Fallback
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	if !IsNil(o.TranslatedAddressArray) {
		toSerialize["translated_address_array"] = o.TranslatedAddressArray
	}
	if !IsNil(o.TranslatedAddressSingle) {
		toSerialize["translated_address_single"] = o.TranslatedAddressSingle
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRulesSourceTranslation) UnmarshalJSON(data []byte) (err error) {
	varNatRulesSourceTranslation := _NatRulesSourceTranslation{}

	err = json.Unmarshal(data, &varNatRulesSourceTranslation)

	if err != nil {
		return err
	}

	*o = NatRulesSourceTranslation(varNatRulesSourceTranslation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "bi_directional")
		delete(additionalProperties, "fallback")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "translated_address_array")
		delete(additionalProperties, "translated_address_single")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRulesSourceTranslation struct {
	value *NatRulesSourceTranslation
	isSet bool
}

func (v NullableNatRulesSourceTranslation) Get() *NatRulesSourceTranslation {
	return v.value
}

func (v *NullableNatRulesSourceTranslation) Set(val *NatRulesSourceTranslation) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRulesSourceTranslation) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRulesSourceTranslation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRulesSourceTranslation(val *NatRulesSourceTranslation) *NullableNatRulesSourceTranslation {
	return &NullableNatRulesSourceTranslation{value: val, isSet: true}
}

func (v NullableNatRulesSourceTranslation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRulesSourceTranslation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
