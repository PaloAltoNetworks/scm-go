/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysAuthenticationCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysAuthenticationCertificate{}

// IkeGatewaysAuthenticationCertificate struct for IkeGatewaysAuthenticationCertificate
type IkeGatewaysAuthenticationCertificate struct {
	AllowIdPayloadMismatch     *bool                                                 `json:"allow_id_payload_mismatch,omitempty"`
	CertificateProfile         *string                                               `json:"certificate_profile,omitempty"`
	LocalCertificate           *IkeGatewaysAuthenticationCertificateLocalCertificate `json:"local_certificate,omitempty"`
	StrictValidationRevocation *bool                                                 `json:"strict_validation_revocation,omitempty"`
	UseManagementAsSource      *bool                                                 `json:"use_management_as_source,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _IkeGatewaysAuthenticationCertificate IkeGatewaysAuthenticationCertificate

// NewIkeGatewaysAuthenticationCertificate instantiates a new IkeGatewaysAuthenticationCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysAuthenticationCertificate() *IkeGatewaysAuthenticationCertificate {
	this := IkeGatewaysAuthenticationCertificate{}
	return &this
}

// NewIkeGatewaysAuthenticationCertificateWithDefaults instantiates a new IkeGatewaysAuthenticationCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysAuthenticationCertificateWithDefaults() *IkeGatewaysAuthenticationCertificate {
	this := IkeGatewaysAuthenticationCertificate{}
	return &this
}

// GetAllowIdPayloadMismatch returns the AllowIdPayloadMismatch field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificate) GetAllowIdPayloadMismatch() bool {
	if o == nil || IsNil(o.AllowIdPayloadMismatch) {
		var ret bool
		return ret
	}
	return *o.AllowIdPayloadMismatch
}

// GetAllowIdPayloadMismatchOk returns a tuple with the AllowIdPayloadMismatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificate) GetAllowIdPayloadMismatchOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowIdPayloadMismatch) {
		return nil, false
	}
	return o.AllowIdPayloadMismatch, true
}

// HasAllowIdPayloadMismatch returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificate) HasAllowIdPayloadMismatch() bool {
	if o != nil && !IsNil(o.AllowIdPayloadMismatch) {
		return true
	}

	return false
}

// SetAllowIdPayloadMismatch gets a reference to the given bool and assigns it to the AllowIdPayloadMismatch field.
func (o *IkeGatewaysAuthenticationCertificate) SetAllowIdPayloadMismatch(v bool) {
	o.AllowIdPayloadMismatch = &v
}

// GetCertificateProfile returns the CertificateProfile field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificate) GetCertificateProfile() string {
	if o == nil || IsNil(o.CertificateProfile) {
		var ret string
		return ret
	}
	return *o.CertificateProfile
}

// GetCertificateProfileOk returns a tuple with the CertificateProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificate) GetCertificateProfileOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateProfile) {
		return nil, false
	}
	return o.CertificateProfile, true
}

// HasCertificateProfile returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificate) HasCertificateProfile() bool {
	if o != nil && !IsNil(o.CertificateProfile) {
		return true
	}

	return false
}

// SetCertificateProfile gets a reference to the given string and assigns it to the CertificateProfile field.
func (o *IkeGatewaysAuthenticationCertificate) SetCertificateProfile(v string) {
	o.CertificateProfile = &v
}

// GetLocalCertificate returns the LocalCertificate field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificate) GetLocalCertificate() IkeGatewaysAuthenticationCertificateLocalCertificate {
	if o == nil || IsNil(o.LocalCertificate) {
		var ret IkeGatewaysAuthenticationCertificateLocalCertificate
		return ret
	}
	return *o.LocalCertificate
}

// GetLocalCertificateOk returns a tuple with the LocalCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificate) GetLocalCertificateOk() (*IkeGatewaysAuthenticationCertificateLocalCertificate, bool) {
	if o == nil || IsNil(o.LocalCertificate) {
		return nil, false
	}
	return o.LocalCertificate, true
}

// HasLocalCertificate returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificate) HasLocalCertificate() bool {
	if o != nil && !IsNil(o.LocalCertificate) {
		return true
	}

	return false
}

// SetLocalCertificate gets a reference to the given IkeGatewaysAuthenticationCertificateLocalCertificate and assigns it to the LocalCertificate field.
func (o *IkeGatewaysAuthenticationCertificate) SetLocalCertificate(v IkeGatewaysAuthenticationCertificateLocalCertificate) {
	o.LocalCertificate = &v
}

// GetStrictValidationRevocation returns the StrictValidationRevocation field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificate) GetStrictValidationRevocation() bool {
	if o == nil || IsNil(o.StrictValidationRevocation) {
		var ret bool
		return ret
	}
	return *o.StrictValidationRevocation
}

// GetStrictValidationRevocationOk returns a tuple with the StrictValidationRevocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificate) GetStrictValidationRevocationOk() (*bool, bool) {
	if o == nil || IsNil(o.StrictValidationRevocation) {
		return nil, false
	}
	return o.StrictValidationRevocation, true
}

// HasStrictValidationRevocation returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificate) HasStrictValidationRevocation() bool {
	if o != nil && !IsNil(o.StrictValidationRevocation) {
		return true
	}

	return false
}

// SetStrictValidationRevocation gets a reference to the given bool and assigns it to the StrictValidationRevocation field.
func (o *IkeGatewaysAuthenticationCertificate) SetStrictValidationRevocation(v bool) {
	o.StrictValidationRevocation = &v
}

// GetUseManagementAsSource returns the UseManagementAsSource field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificate) GetUseManagementAsSource() bool {
	if o == nil || IsNil(o.UseManagementAsSource) {
		var ret bool
		return ret
	}
	return *o.UseManagementAsSource
}

// GetUseManagementAsSourceOk returns a tuple with the UseManagementAsSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificate) GetUseManagementAsSourceOk() (*bool, bool) {
	if o == nil || IsNil(o.UseManagementAsSource) {
		return nil, false
	}
	return o.UseManagementAsSource, true
}

// HasUseManagementAsSource returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificate) HasUseManagementAsSource() bool {
	if o != nil && !IsNil(o.UseManagementAsSource) {
		return true
	}

	return false
}

// SetUseManagementAsSource gets a reference to the given bool and assigns it to the UseManagementAsSource field.
func (o *IkeGatewaysAuthenticationCertificate) SetUseManagementAsSource(v bool) {
	o.UseManagementAsSource = &v
}

func (o IkeGatewaysAuthenticationCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysAuthenticationCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowIdPayloadMismatch) {
		toSerialize["allow_id_payload_mismatch"] = o.AllowIdPayloadMismatch
	}
	if !IsNil(o.CertificateProfile) {
		toSerialize["certificate_profile"] = o.CertificateProfile
	}
	if !IsNil(o.LocalCertificate) {
		toSerialize["local_certificate"] = o.LocalCertificate
	}
	if !IsNil(o.StrictValidationRevocation) {
		toSerialize["strict_validation_revocation"] = o.StrictValidationRevocation
	}
	if !IsNil(o.UseManagementAsSource) {
		toSerialize["use_management_as_source"] = o.UseManagementAsSource
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysAuthenticationCertificate) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysAuthenticationCertificate := _IkeGatewaysAuthenticationCertificate{}

	err = json.Unmarshal(data, &varIkeGatewaysAuthenticationCertificate)

	if err != nil {
		return err
	}

	*o = IkeGatewaysAuthenticationCertificate(varIkeGatewaysAuthenticationCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "allow_id_payload_mismatch")
		delete(additionalProperties, "certificate_profile")
		delete(additionalProperties, "local_certificate")
		delete(additionalProperties, "strict_validation_revocation")
		delete(additionalProperties, "use_management_as_source")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysAuthenticationCertificate struct {
	value *IkeGatewaysAuthenticationCertificate
	isSet bool
}

func (v NullableIkeGatewaysAuthenticationCertificate) Get() *IkeGatewaysAuthenticationCertificate {
	return v.value
}

func (v *NullableIkeGatewaysAuthenticationCertificate) Set(val *IkeGatewaysAuthenticationCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysAuthenticationCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysAuthenticationCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysAuthenticationCertificate(val *IkeGatewaysAuthenticationCertificate) *NullableIkeGatewaysAuthenticationCertificate {
	return &NullableIkeGatewaysAuthenticationCertificate{value: val, isSet: true}
}

func (v NullableIkeGatewaysAuthenticationCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysAuthenticationCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
