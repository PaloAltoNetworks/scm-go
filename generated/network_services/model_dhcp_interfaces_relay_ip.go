/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DhcpInterfacesRelayIp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfacesRelayIp{}

// DhcpInterfacesRelayIp struct for DhcpInterfacesRelayIp
type DhcpInterfacesRelayIp struct {
	// Enabled?
	Enabled              bool     `json:"enabled"`
	Server               []string `json:"server"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfacesRelayIp DhcpInterfacesRelayIp

// NewDhcpInterfacesRelayIp instantiates a new DhcpInterfacesRelayIp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfacesRelayIp(enabled bool, server []string) *DhcpInterfacesRelayIp {
	this := DhcpInterfacesRelayIp{}
	this.Enabled = enabled
	this.Server = server
	return &this
}

// NewDhcpInterfacesRelayIpWithDefaults instantiates a new DhcpInterfacesRelayIp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesRelayIpWithDefaults() *DhcpInterfacesRelayIp {
	this := DhcpInterfacesRelayIp{}
	var enabled bool = true
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DhcpInterfacesRelayIp) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesRelayIp) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DhcpInterfacesRelayIp) SetEnabled(v bool) {
	o.Enabled = v
}

// GetServer returns the Server field value
func (o *DhcpInterfacesRelayIp) GetServer() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesRelayIp) GetServerOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server, true
}

// SetServer sets field value
func (o *DhcpInterfacesRelayIp) SetServer(v []string) {
	o.Server = v
}

func (o DhcpInterfacesRelayIp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfacesRelayIp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	toSerialize["server"] = o.Server

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfacesRelayIp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDhcpInterfacesRelayIp := _DhcpInterfacesRelayIp{}

	err = json.Unmarshal(data, &varDhcpInterfacesRelayIp)

	if err != nil {
		return err
	}

	*o = DhcpInterfacesRelayIp(varDhcpInterfacesRelayIp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "server")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfacesRelayIp struct {
	value *DhcpInterfacesRelayIp
	isSet bool
}

func (v NullableDhcpInterfacesRelayIp) Get() *DhcpInterfacesRelayIp {
	return v.value
}

func (v *NullableDhcpInterfacesRelayIp) Set(val *DhcpInterfacesRelayIp) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfacesRelayIp) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfacesRelayIp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfacesRelayIp(val *DhcpInterfacesRelayIp) *NullableDhcpInterfacesRelayIp {
	return &NullableDhcpInterfacesRelayIp{value: val, isSet: true}
}

func (v NullableDhcpInterfacesRelayIp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfacesRelayIp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
