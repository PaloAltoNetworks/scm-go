/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the SslDecryptionSettingsForwardTrustCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslDecryptionSettingsForwardTrustCertificate{}

// SslDecryptionSettingsForwardTrustCertificate struct for SslDecryptionSettingsForwardTrustCertificate
type SslDecryptionSettingsForwardTrustCertificate struct {
	Ecdsa                *string `json:"ecdsa,omitempty"`
	Rsa                  *string `json:"rsa,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SslDecryptionSettingsForwardTrustCertificate SslDecryptionSettingsForwardTrustCertificate

// NewSslDecryptionSettingsForwardTrustCertificate instantiates a new SslDecryptionSettingsForwardTrustCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslDecryptionSettingsForwardTrustCertificate() *SslDecryptionSettingsForwardTrustCertificate {
	this := SslDecryptionSettingsForwardTrustCertificate{}
	return &this
}

// NewSslDecryptionSettingsForwardTrustCertificateWithDefaults instantiates a new SslDecryptionSettingsForwardTrustCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslDecryptionSettingsForwardTrustCertificateWithDefaults() *SslDecryptionSettingsForwardTrustCertificate {
	this := SslDecryptionSettingsForwardTrustCertificate{}
	return &this
}

// GetEcdsa returns the Ecdsa field value if set, zero value otherwise.
func (o *SslDecryptionSettingsForwardTrustCertificate) GetEcdsa() string {
	if o == nil || IsNil(o.Ecdsa) {
		var ret string
		return ret
	}
	return *o.Ecdsa
}

// GetEcdsaOk returns a tuple with the Ecdsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettingsForwardTrustCertificate) GetEcdsaOk() (*string, bool) {
	if o == nil || IsNil(o.Ecdsa) {
		return nil, false
	}
	return o.Ecdsa, true
}

// HasEcdsa returns a boolean if a field has been set.
func (o *SslDecryptionSettingsForwardTrustCertificate) HasEcdsa() bool {
	if o != nil && !IsNil(o.Ecdsa) {
		return true
	}

	return false
}

// SetEcdsa gets a reference to the given string and assigns it to the Ecdsa field.
func (o *SslDecryptionSettingsForwardTrustCertificate) SetEcdsa(v string) {
	o.Ecdsa = &v
}

// GetRsa returns the Rsa field value if set, zero value otherwise.
func (o *SslDecryptionSettingsForwardTrustCertificate) GetRsa() string {
	if o == nil || IsNil(o.Rsa) {
		var ret string
		return ret
	}
	return *o.Rsa
}

// GetRsaOk returns a tuple with the Rsa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettingsForwardTrustCertificate) GetRsaOk() (*string, bool) {
	if o == nil || IsNil(o.Rsa) {
		return nil, false
	}
	return o.Rsa, true
}

// HasRsa returns a boolean if a field has been set.
func (o *SslDecryptionSettingsForwardTrustCertificate) HasRsa() bool {
	if o != nil && !IsNil(o.Rsa) {
		return true
	}

	return false
}

// SetRsa gets a reference to the given string and assigns it to the Rsa field.
func (o *SslDecryptionSettingsForwardTrustCertificate) SetRsa(v string) {
	o.Rsa = &v
}

func (o SslDecryptionSettingsForwardTrustCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslDecryptionSettingsForwardTrustCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ecdsa) {
		toSerialize["ecdsa"] = o.Ecdsa
	}
	if !IsNil(o.Rsa) {
		toSerialize["rsa"] = o.Rsa
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SslDecryptionSettingsForwardTrustCertificate) UnmarshalJSON(data []byte) (err error) {
	varSslDecryptionSettingsForwardTrustCertificate := _SslDecryptionSettingsForwardTrustCertificate{}

	err = json.Unmarshal(data, &varSslDecryptionSettingsForwardTrustCertificate)

	if err != nil {
		return err
	}

	*o = SslDecryptionSettingsForwardTrustCertificate(varSslDecryptionSettingsForwardTrustCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ecdsa")
		delete(additionalProperties, "rsa")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSslDecryptionSettingsForwardTrustCertificate struct {
	value *SslDecryptionSettingsForwardTrustCertificate
	isSet bool
}

func (v NullableSslDecryptionSettingsForwardTrustCertificate) Get() *SslDecryptionSettingsForwardTrustCertificate {
	return v.value
}

func (v *NullableSslDecryptionSettingsForwardTrustCertificate) Set(val *SslDecryptionSettingsForwardTrustCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableSslDecryptionSettingsForwardTrustCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableSslDecryptionSettingsForwardTrustCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslDecryptionSettingsForwardTrustCertificate(val *SslDecryptionSettingsForwardTrustCertificate) *NullableSslDecryptionSettingsForwardTrustCertificate {
	return &NullableSslDecryptionSettingsForwardTrustCertificate{value: val, isSet: true}
}

func (v NullableSslDecryptionSettingsForwardTrustCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslDecryptionSettingsForwardTrustCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
