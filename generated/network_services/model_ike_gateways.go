/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the IkeGateways type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGateways{}

// IkeGateways struct for IkeGateways
type IkeGateways struct {
	Authentication IkeGatewaysAuthentication `json:"authentication"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id           *string                  `json:"id,omitempty"`
	LocalAddress *IkeGatewaysLocalAddress `json:"local_address,omitempty"`
	LocalId      *IkeGatewaysLocalId      `json:"local_id,omitempty"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]
	Name           string                     `json:"name"`
	PeerAddress    IkeGatewaysPeerAddress     `json:"peer_address"`
	PeerId         *IkeGatewaysPeerId         `json:"peer_id,omitempty"`
	Protocol       IkeGatewaysProtocol        `json:"protocol"`
	ProtocolCommon *IkeGatewaysProtocolCommon `json:"protocol_common,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _IkeGateways IkeGateways

// NewIkeGateways instantiates a new IkeGateways object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGateways(authentication IkeGatewaysAuthentication, name string, peerAddress IkeGatewaysPeerAddress, protocol IkeGatewaysProtocol) *IkeGateways {
	this := IkeGateways{}
	this.Authentication = authentication
	this.Name = name
	this.PeerAddress = peerAddress
	this.Protocol = protocol
	return &this
}

// NewIkeGatewaysWithDefaults instantiates a new IkeGateways object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysWithDefaults() *IkeGateways {
	this := IkeGateways{}
	return &this
}

// GetAuthentication returns the Authentication field value
func (o *IkeGateways) GetAuthentication() IkeGatewaysAuthentication {
	if o == nil {
		var ret IkeGatewaysAuthentication
		return ret
	}

	return o.Authentication
}

// GetAuthenticationOk returns a tuple with the Authentication field value
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetAuthenticationOk() (*IkeGatewaysAuthentication, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Authentication, true
}

// SetAuthentication sets field value
func (o *IkeGateways) SetAuthentication(v IkeGatewaysAuthentication) {
	o.Authentication = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *IkeGateways) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *IkeGateways) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *IkeGateways) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *IkeGateways) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *IkeGateways) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *IkeGateways) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IkeGateways) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IkeGateways) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IkeGateways) SetId(v string) {
	o.Id = &v
}

// GetLocalAddress returns the LocalAddress field value if set, zero value otherwise.
func (o *IkeGateways) GetLocalAddress() IkeGatewaysLocalAddress {
	if o == nil || IsNil(o.LocalAddress) {
		var ret IkeGatewaysLocalAddress
		return ret
	}
	return *o.LocalAddress
}

// GetLocalAddressOk returns a tuple with the LocalAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetLocalAddressOk() (*IkeGatewaysLocalAddress, bool) {
	if o == nil || IsNil(o.LocalAddress) {
		return nil, false
	}
	return o.LocalAddress, true
}

// HasLocalAddress returns a boolean if a field has been set.
func (o *IkeGateways) HasLocalAddress() bool {
	if o != nil && !IsNil(o.LocalAddress) {
		return true
	}

	return false
}

// SetLocalAddress gets a reference to the given IkeGatewaysLocalAddress and assigns it to the LocalAddress field.
func (o *IkeGateways) SetLocalAddress(v IkeGatewaysLocalAddress) {
	o.LocalAddress = &v
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *IkeGateways) GetLocalId() IkeGatewaysLocalId {
	if o == nil || IsNil(o.LocalId) {
		var ret IkeGatewaysLocalId
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetLocalIdOk() (*IkeGatewaysLocalId, bool) {
	if o == nil || IsNil(o.LocalId) {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *IkeGateways) HasLocalId() bool {
	if o != nil && !IsNil(o.LocalId) {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given IkeGatewaysLocalId and assigns it to the LocalId field.
func (o *IkeGateways) SetLocalId(v IkeGatewaysLocalId) {
	o.LocalId = &v
}

// GetName returns the Name field value
func (o *IkeGateways) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IkeGateways) SetName(v string) {
	o.Name = v
}

// GetPeerAddress returns the PeerAddress field value
func (o *IkeGateways) GetPeerAddress() IkeGatewaysPeerAddress {
	if o == nil {
		var ret IkeGatewaysPeerAddress
		return ret
	}

	return o.PeerAddress
}

// GetPeerAddressOk returns a tuple with the PeerAddress field value
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetPeerAddressOk() (*IkeGatewaysPeerAddress, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PeerAddress, true
}

// SetPeerAddress sets field value
func (o *IkeGateways) SetPeerAddress(v IkeGatewaysPeerAddress) {
	o.PeerAddress = v
}

// GetPeerId returns the PeerId field value if set, zero value otherwise.
func (o *IkeGateways) GetPeerId() IkeGatewaysPeerId {
	if o == nil || IsNil(o.PeerId) {
		var ret IkeGatewaysPeerId
		return ret
	}
	return *o.PeerId
}

// GetPeerIdOk returns a tuple with the PeerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetPeerIdOk() (*IkeGatewaysPeerId, bool) {
	if o == nil || IsNil(o.PeerId) {
		return nil, false
	}
	return o.PeerId, true
}

// HasPeerId returns a boolean if a field has been set.
func (o *IkeGateways) HasPeerId() bool {
	if o != nil && !IsNil(o.PeerId) {
		return true
	}

	return false
}

// SetPeerId gets a reference to the given IkeGatewaysPeerId and assigns it to the PeerId field.
func (o *IkeGateways) SetPeerId(v IkeGatewaysPeerId) {
	o.PeerId = &v
}

// GetProtocol returns the Protocol field value
func (o *IkeGateways) GetProtocol() IkeGatewaysProtocol {
	if o == nil {
		var ret IkeGatewaysProtocol
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetProtocolOk() (*IkeGatewaysProtocol, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *IkeGateways) SetProtocol(v IkeGatewaysProtocol) {
	o.Protocol = v
}

// GetProtocolCommon returns the ProtocolCommon field value if set, zero value otherwise.
func (o *IkeGateways) GetProtocolCommon() IkeGatewaysProtocolCommon {
	if o == nil || IsNil(o.ProtocolCommon) {
		var ret IkeGatewaysProtocolCommon
		return ret
	}
	return *o.ProtocolCommon
}

// GetProtocolCommonOk returns a tuple with the ProtocolCommon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetProtocolCommonOk() (*IkeGatewaysProtocolCommon, bool) {
	if o == nil || IsNil(o.ProtocolCommon) {
		return nil, false
	}
	return o.ProtocolCommon, true
}

// HasProtocolCommon returns a boolean if a field has been set.
func (o *IkeGateways) HasProtocolCommon() bool {
	if o != nil && !IsNil(o.ProtocolCommon) {
		return true
	}

	return false
}

// SetProtocolCommon gets a reference to the given IkeGatewaysProtocolCommon and assigns it to the ProtocolCommon field.
func (o *IkeGateways) SetProtocolCommon(v IkeGatewaysProtocolCommon) {
	o.ProtocolCommon = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *IkeGateways) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGateways) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *IkeGateways) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *IkeGateways) SetSnippet(v string) {
	o.Snippet = &v
}

func (o IkeGateways) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGateways) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authentication"] = o.Authentication
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.LocalAddress) {
		toSerialize["local_address"] = o.LocalAddress
	}
	if !IsNil(o.LocalId) {
		toSerialize["local_id"] = o.LocalId
	}
	toSerialize["name"] = o.Name
	toSerialize["peer_address"] = o.PeerAddress
	if !IsNil(o.PeerId) {
		toSerialize["peer_id"] = o.PeerId
	}
	toSerialize["protocol"] = o.Protocol
	if !IsNil(o.ProtocolCommon) {
		toSerialize["protocol_common"] = o.ProtocolCommon
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGateways) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authentication",
		"name",
		"peer_address",
		"protocol",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIkeGateways := _IkeGateways{}

	err = json.Unmarshal(data, &varIkeGateways)

	if err != nil {
		return err
	}

	*o = IkeGateways(varIkeGateways)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authentication")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "local_address")
		delete(additionalProperties, "local_id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "peer_address")
		delete(additionalProperties, "peer_id")
		delete(additionalProperties, "protocol")
		delete(additionalProperties, "protocol_common")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGateways struct {
	value *IkeGateways
	isSet bool
}

func (v NullableIkeGateways) Get() *IkeGateways {
	return v.value
}

func (v *NullableIkeGateways) Set(val *IkeGateways) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGateways) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGateways) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGateways(val *IkeGateways) *NullableIkeGateways {
	return &NullableIkeGateways{value: val, isSet: true}
}

func (v NullableIkeGateways) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGateways) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
