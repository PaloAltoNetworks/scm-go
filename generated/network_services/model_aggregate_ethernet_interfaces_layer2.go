/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the AggregateEthernetInterfacesLayer2 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregateEthernetInterfacesLayer2{}

// AggregateEthernetInterfacesLayer2 struct for AggregateEthernetInterfacesLayer2
type AggregateEthernetInterfacesLayer2 struct {
	Lacp *Lacp `json:"lacp,omitempty"`
	// Assign interface to VLAN tag
	VlanTag              *int32 `json:"vlan-tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AggregateEthernetInterfacesLayer2 AggregateEthernetInterfacesLayer2

// NewAggregateEthernetInterfacesLayer2 instantiates a new AggregateEthernetInterfacesLayer2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateEthernetInterfacesLayer2() *AggregateEthernetInterfacesLayer2 {
	this := AggregateEthernetInterfacesLayer2{}
	return &this
}

// NewAggregateEthernetInterfacesLayer2WithDefaults instantiates a new AggregateEthernetInterfacesLayer2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateEthernetInterfacesLayer2WithDefaults() *AggregateEthernetInterfacesLayer2 {
	this := AggregateEthernetInterfacesLayer2{}
	return &this
}

// GetLacp returns the Lacp field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer2) GetLacp() Lacp {
	if o == nil || IsNil(o.Lacp) {
		var ret Lacp
		return ret
	}
	return *o.Lacp
}

// GetLacpOk returns a tuple with the Lacp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer2) GetLacpOk() (*Lacp, bool) {
	if o == nil || IsNil(o.Lacp) {
		return nil, false
	}
	return o.Lacp, true
}

// HasLacp returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer2) HasLacp() bool {
	if o != nil && !IsNil(o.Lacp) {
		return true
	}

	return false
}

// SetLacp gets a reference to the given Lacp and assigns it to the Lacp field.
func (o *AggregateEthernetInterfacesLayer2) SetLacp(v Lacp) {
	o.Lacp = &v
}

// GetVlanTag returns the VlanTag field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer2) GetVlanTag() int32 {
	if o == nil || IsNil(o.VlanTag) {
		var ret int32
		return ret
	}
	return *o.VlanTag
}

// GetVlanTagOk returns a tuple with the VlanTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer2) GetVlanTagOk() (*int32, bool) {
	if o == nil || IsNil(o.VlanTag) {
		return nil, false
	}
	return o.VlanTag, true
}

// HasVlanTag returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer2) HasVlanTag() bool {
	if o != nil && !IsNil(o.VlanTag) {
		return true
	}

	return false
}

// SetVlanTag gets a reference to the given int32 and assigns it to the VlanTag field.
func (o *AggregateEthernetInterfacesLayer2) SetVlanTag(v int32) {
	o.VlanTag = &v
}

func (o AggregateEthernetInterfacesLayer2) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregateEthernetInterfacesLayer2) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Lacp) {
		toSerialize["lacp"] = o.Lacp
	}
	if !IsNil(o.VlanTag) {
		toSerialize["vlan-tag"] = o.VlanTag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AggregateEthernetInterfacesLayer2) UnmarshalJSON(data []byte) (err error) {
	varAggregateEthernetInterfacesLayer2 := _AggregateEthernetInterfacesLayer2{}

	err = json.Unmarshal(data, &varAggregateEthernetInterfacesLayer2)

	if err != nil {
		return err
	}

	*o = AggregateEthernetInterfacesLayer2(varAggregateEthernetInterfacesLayer2)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "lacp")
		delete(additionalProperties, "vlan-tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAggregateEthernetInterfacesLayer2 struct {
	value *AggregateEthernetInterfacesLayer2
	isSet bool
}

func (v NullableAggregateEthernetInterfacesLayer2) Get() *AggregateEthernetInterfacesLayer2 {
	return v.value
}

func (v *NullableAggregateEthernetInterfacesLayer2) Set(val *AggregateEthernetInterfacesLayer2) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateEthernetInterfacesLayer2) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateEthernetInterfacesLayer2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateEthernetInterfacesLayer2(val *AggregateEthernetInterfacesLayer2) *NullableAggregateEthernetInterfacesLayer2 {
	return &NullableAggregateEthernetInterfacesLayer2{value: val, isSet: true}
}

func (v NullableAggregateEthernetInterfacesLayer2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateEthernetInterfacesLayer2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
