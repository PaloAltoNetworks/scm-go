/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysProtocol{}

// IkeGatewaysProtocol struct for IkeGatewaysProtocol
type IkeGatewaysProtocol struct {
	Ikev1                *IkeGatewaysProtocolIkev1 `json:"ikev1,omitempty"`
	Ikev2                *IkeGatewaysProtocolIkev1 `json:"ikev2,omitempty"`
	Version              *string                   `json:"version,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysProtocol IkeGatewaysProtocol

// NewIkeGatewaysProtocol instantiates a new IkeGatewaysProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysProtocol() *IkeGatewaysProtocol {
	this := IkeGatewaysProtocol{}
	var version string = "ikev2-preferred"
	this.Version = &version
	return &this
}

// NewIkeGatewaysProtocolWithDefaults instantiates a new IkeGatewaysProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysProtocolWithDefaults() *IkeGatewaysProtocol {
	this := IkeGatewaysProtocol{}
	var version string = "ikev2-preferred"
	this.Version = &version
	return &this
}

// GetIkev1 returns the Ikev1 field value if set, zero value otherwise.
func (o *IkeGatewaysProtocol) GetIkev1() IkeGatewaysProtocolIkev1 {
	if o == nil || IsNil(o.Ikev1) {
		var ret IkeGatewaysProtocolIkev1
		return ret
	}
	return *o.Ikev1
}

// GetIkev1Ok returns a tuple with the Ikev1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocol) GetIkev1Ok() (*IkeGatewaysProtocolIkev1, bool) {
	if o == nil || IsNil(o.Ikev1) {
		return nil, false
	}
	return o.Ikev1, true
}

// HasIkev1 returns a boolean if a field has been set.
func (o *IkeGatewaysProtocol) HasIkev1() bool {
	if o != nil && !IsNil(o.Ikev1) {
		return true
	}

	return false
}

// SetIkev1 gets a reference to the given IkeGatewaysProtocolIkev1 and assigns it to the Ikev1 field.
func (o *IkeGatewaysProtocol) SetIkev1(v IkeGatewaysProtocolIkev1) {
	o.Ikev1 = &v
}

// GetIkev2 returns the Ikev2 field value if set, zero value otherwise.
func (o *IkeGatewaysProtocol) GetIkev2() IkeGatewaysProtocolIkev1 {
	if o == nil || IsNil(o.Ikev2) {
		var ret IkeGatewaysProtocolIkev1
		return ret
	}
	return *o.Ikev2
}

// GetIkev2Ok returns a tuple with the Ikev2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocol) GetIkev2Ok() (*IkeGatewaysProtocolIkev1, bool) {
	if o == nil || IsNil(o.Ikev2) {
		return nil, false
	}
	return o.Ikev2, true
}

// HasIkev2 returns a boolean if a field has been set.
func (o *IkeGatewaysProtocol) HasIkev2() bool {
	if o != nil && !IsNil(o.Ikev2) {
		return true
	}

	return false
}

// SetIkev2 gets a reference to the given IkeGatewaysProtocolIkev1 and assigns it to the Ikev2 field.
func (o *IkeGatewaysProtocol) SetIkev2(v IkeGatewaysProtocolIkev1) {
	o.Ikev2 = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *IkeGatewaysProtocol) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocol) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *IkeGatewaysProtocol) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *IkeGatewaysProtocol) SetVersion(v string) {
	o.Version = &v
}

func (o IkeGatewaysProtocol) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ikev1) {
		toSerialize["ikev1"] = o.Ikev1
	}
	if !IsNil(o.Ikev2) {
		toSerialize["ikev2"] = o.Ikev2
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysProtocol) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysProtocol := _IkeGatewaysProtocol{}

	err = json.Unmarshal(data, &varIkeGatewaysProtocol)

	if err != nil {
		return err
	}

	*o = IkeGatewaysProtocol(varIkeGatewaysProtocol)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ikev1")
		delete(additionalProperties, "ikev2")
		delete(additionalProperties, "version")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysProtocol struct {
	value *IkeGatewaysProtocol
	isSet bool
}

func (v NullableIkeGatewaysProtocol) Get() *IkeGatewaysProtocol {
	return v.value
}

func (v *NullableIkeGatewaysProtocol) Set(val *IkeGatewaysProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysProtocol(val *IkeGatewaysProtocol) *NullableIkeGatewaysProtocol {
	return &NullableIkeGatewaysProtocol{value: val, isSet: true}
}

func (v NullableIkeGatewaysProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
