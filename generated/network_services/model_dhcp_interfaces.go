/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DhcpInterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfaces{}

// DhcpInterfaces struct for DhcpInterfaces
type DhcpInterfaces struct {
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// Interface name
	Name   string                `json:"name"`
	Relay  *DhcpInterfacesRelay  `json:"relay,omitempty"`
	Server *DhcpInterfacesServer `json:"server,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfaces DhcpInterfaces

// NewDhcpInterfaces instantiates a new DhcpInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfaces(name string) *DhcpInterfaces {
	this := DhcpInterfaces{}
	this.Name = name
	return &this
}

// NewDhcpInterfacesWithDefaults instantiates a new DhcpInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesWithDefaults() *DhcpInterfaces {
	this := DhcpInterfaces{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DhcpInterfaces) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DhcpInterfaces) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DhcpInterfaces) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *DhcpInterfaces) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DhcpInterfaces) SetName(v string) {
	o.Name = v
}

// GetRelay returns the Relay field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetRelay() DhcpInterfacesRelay {
	if o == nil || IsNil(o.Relay) {
		var ret DhcpInterfacesRelay
		return ret
	}
	return *o.Relay
}

// GetRelayOk returns a tuple with the Relay field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetRelayOk() (*DhcpInterfacesRelay, bool) {
	if o == nil || IsNil(o.Relay) {
		return nil, false
	}
	return o.Relay, true
}

// HasRelay returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasRelay() bool {
	if o != nil && !IsNil(o.Relay) {
		return true
	}

	return false
}

// SetRelay gets a reference to the given DhcpInterfacesRelay and assigns it to the Relay field.
func (o *DhcpInterfaces) SetRelay(v DhcpInterfacesRelay) {
	o.Relay = &v
}

// GetServer returns the Server field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetServer() DhcpInterfacesServer {
	if o == nil || IsNil(o.Server) {
		var ret DhcpInterfacesServer
		return ret
	}
	return *o.Server
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetServerOk() (*DhcpInterfacesServer, bool) {
	if o == nil || IsNil(o.Server) {
		return nil, false
	}
	return o.Server, true
}

// HasServer returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasServer() bool {
	if o != nil && !IsNil(o.Server) {
		return true
	}

	return false
}

// SetServer gets a reference to the given DhcpInterfacesServer and assigns it to the Server field.
func (o *DhcpInterfaces) SetServer(v DhcpInterfacesServer) {
	o.Server = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *DhcpInterfaces) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfaces) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *DhcpInterfaces) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *DhcpInterfaces) SetSnippet(v string) {
	o.Snippet = &v
}

func (o DhcpInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Relay) {
		toSerialize["relay"] = o.Relay
	}
	if !IsNil(o.Server) {
		toSerialize["server"] = o.Server
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfaces) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDhcpInterfaces := _DhcpInterfaces{}

	err = json.Unmarshal(data, &varDhcpInterfaces)

	if err != nil {
		return err
	}

	*o = DhcpInterfaces(varDhcpInterfaces)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "relay")
		delete(additionalProperties, "server")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfaces struct {
	value *DhcpInterfaces
	isSet bool
}

func (v NullableDhcpInterfaces) Get() *DhcpInterfaces {
	return v.value
}

func (v *NullableDhcpInterfaces) Set(val *DhcpInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfaces(val *DhcpInterfaces) *NullableDhcpInterfaces {
	return &NullableDhcpInterfaces{value: val, isSet: true}
}

func (v NullableDhcpInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
