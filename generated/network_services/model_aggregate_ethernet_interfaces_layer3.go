/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the AggregateEthernetInterfacesLayer3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AggregateEthernetInterfacesLayer3{}

// AggregateEthernetInterfacesLayer3 struct for AggregateEthernetInterfacesLayer3
type AggregateEthernetInterfacesLayer3 struct {
	// ARP configuration
	Arp        []ArpInner                                   `json:"arp,omitempty"`
	DdnsConfig *AggregateEthernetInterfacesLayer3DdnsConfig `json:"ddns-config,omitempty"`
	DhcpClient *AggregateEthernetInterfacesLayer3DhcpClient `json:"dhcp-client,omitempty"`
	// Interface management profile
	InterfaceManagementProfile *string `json:"interface-management-profile,omitempty"`
	// Interface IP addresses
	Ip   []string `json:"ip,omitempty"`
	Lacp *Lacp    `json:"lacp,omitempty"`
	// MTU
	Mtu                  *int32 `json:"mtu,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _AggregateEthernetInterfacesLayer3 AggregateEthernetInterfacesLayer3

// NewAggregateEthernetInterfacesLayer3 instantiates a new AggregateEthernetInterfacesLayer3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAggregateEthernetInterfacesLayer3() *AggregateEthernetInterfacesLayer3 {
	this := AggregateEthernetInterfacesLayer3{}
	var mtu int32 = 1500
	this.Mtu = &mtu
	return &this
}

// NewAggregateEthernetInterfacesLayer3WithDefaults instantiates a new AggregateEthernetInterfacesLayer3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAggregateEthernetInterfacesLayer3WithDefaults() *AggregateEthernetInterfacesLayer3 {
	this := AggregateEthernetInterfacesLayer3{}
	var mtu int32 = 1500
	this.Mtu = &mtu
	return &this
}

// GetArp returns the Arp field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetArp() []ArpInner {
	if o == nil || IsNil(o.Arp) {
		var ret []ArpInner
		return ret
	}
	return o.Arp
}

// GetArpOk returns a tuple with the Arp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetArpOk() ([]ArpInner, bool) {
	if o == nil || IsNil(o.Arp) {
		return nil, false
	}
	return o.Arp, true
}

// HasArp returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasArp() bool {
	if o != nil && !IsNil(o.Arp) {
		return true
	}

	return false
}

// SetArp gets a reference to the given []ArpInner and assigns it to the Arp field.
func (o *AggregateEthernetInterfacesLayer3) SetArp(v []ArpInner) {
	o.Arp = v
}

// GetDdnsConfig returns the DdnsConfig field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetDdnsConfig() AggregateEthernetInterfacesLayer3DdnsConfig {
	if o == nil || IsNil(o.DdnsConfig) {
		var ret AggregateEthernetInterfacesLayer3DdnsConfig
		return ret
	}
	return *o.DdnsConfig
}

// GetDdnsConfigOk returns a tuple with the DdnsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetDdnsConfigOk() (*AggregateEthernetInterfacesLayer3DdnsConfig, bool) {
	if o == nil || IsNil(o.DdnsConfig) {
		return nil, false
	}
	return o.DdnsConfig, true
}

// HasDdnsConfig returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasDdnsConfig() bool {
	if o != nil && !IsNil(o.DdnsConfig) {
		return true
	}

	return false
}

// SetDdnsConfig gets a reference to the given AggregateEthernetInterfacesLayer3DdnsConfig and assigns it to the DdnsConfig field.
func (o *AggregateEthernetInterfacesLayer3) SetDdnsConfig(v AggregateEthernetInterfacesLayer3DdnsConfig) {
	o.DdnsConfig = &v
}

// GetDhcpClient returns the DhcpClient field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetDhcpClient() AggregateEthernetInterfacesLayer3DhcpClient {
	if o == nil || IsNil(o.DhcpClient) {
		var ret AggregateEthernetInterfacesLayer3DhcpClient
		return ret
	}
	return *o.DhcpClient
}

// GetDhcpClientOk returns a tuple with the DhcpClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetDhcpClientOk() (*AggregateEthernetInterfacesLayer3DhcpClient, bool) {
	if o == nil || IsNil(o.DhcpClient) {
		return nil, false
	}
	return o.DhcpClient, true
}

// HasDhcpClient returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasDhcpClient() bool {
	if o != nil && !IsNil(o.DhcpClient) {
		return true
	}

	return false
}

// SetDhcpClient gets a reference to the given AggregateEthernetInterfacesLayer3DhcpClient and assigns it to the DhcpClient field.
func (o *AggregateEthernetInterfacesLayer3) SetDhcpClient(v AggregateEthernetInterfacesLayer3DhcpClient) {
	o.DhcpClient = &v
}

// GetInterfaceManagementProfile returns the InterfaceManagementProfile field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetInterfaceManagementProfile() string {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		var ret string
		return ret
	}
	return *o.InterfaceManagementProfile
}

// GetInterfaceManagementProfileOk returns a tuple with the InterfaceManagementProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetInterfaceManagementProfileOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		return nil, false
	}
	return o.InterfaceManagementProfile, true
}

// HasInterfaceManagementProfile returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasInterfaceManagementProfile() bool {
	if o != nil && !IsNil(o.InterfaceManagementProfile) {
		return true
	}

	return false
}

// SetInterfaceManagementProfile gets a reference to the given string and assigns it to the InterfaceManagementProfile field.
func (o *AggregateEthernetInterfacesLayer3) SetInterfaceManagementProfile(v string) {
	o.InterfaceManagementProfile = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetIp() []string {
	if o == nil || IsNil(o.Ip) {
		var ret []string
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetIpOk() ([]string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []string and assigns it to the Ip field.
func (o *AggregateEthernetInterfacesLayer3) SetIp(v []string) {
	o.Ip = v
}

// GetLacp returns the Lacp field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetLacp() Lacp {
	if o == nil || IsNil(o.Lacp) {
		var ret Lacp
		return ret
	}
	return *o.Lacp
}

// GetLacpOk returns a tuple with the Lacp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetLacpOk() (*Lacp, bool) {
	if o == nil || IsNil(o.Lacp) {
		return nil, false
	}
	return o.Lacp, true
}

// HasLacp returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasLacp() bool {
	if o != nil && !IsNil(o.Lacp) {
		return true
	}

	return false
}

// SetLacp gets a reference to the given Lacp and assigns it to the Lacp field.
func (o *AggregateEthernetInterfacesLayer3) SetLacp(v Lacp) {
	o.Lacp = &v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *AggregateEthernetInterfacesLayer3) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AggregateEthernetInterfacesLayer3) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *AggregateEthernetInterfacesLayer3) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *AggregateEthernetInterfacesLayer3) SetMtu(v int32) {
	o.Mtu = &v
}

func (o AggregateEthernetInterfacesLayer3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AggregateEthernetInterfacesLayer3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arp) {
		toSerialize["arp"] = o.Arp
	}
	if !IsNil(o.DdnsConfig) {
		toSerialize["ddns-config"] = o.DdnsConfig
	}
	if !IsNil(o.DhcpClient) {
		toSerialize["dhcp-client"] = o.DhcpClient
	}
	if !IsNil(o.InterfaceManagementProfile) {
		toSerialize["interface-management-profile"] = o.InterfaceManagementProfile
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Lacp) {
		toSerialize["lacp"] = o.Lacp
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *AggregateEthernetInterfacesLayer3) UnmarshalJSON(data []byte) (err error) {
	varAggregateEthernetInterfacesLayer3 := _AggregateEthernetInterfacesLayer3{}

	err = json.Unmarshal(data, &varAggregateEthernetInterfacesLayer3)

	if err != nil {
		return err
	}

	*o = AggregateEthernetInterfacesLayer3(varAggregateEthernetInterfacesLayer3)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "arp")
		delete(additionalProperties, "ddns-config")
		delete(additionalProperties, "dhcp-client")
		delete(additionalProperties, "interface-management-profile")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "lacp")
		delete(additionalProperties, "mtu")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableAggregateEthernetInterfacesLayer3 struct {
	value *AggregateEthernetInterfacesLayer3
	isSet bool
}

func (v NullableAggregateEthernetInterfacesLayer3) Get() *AggregateEthernetInterfacesLayer3 {
	return v.value
}

func (v *NullableAggregateEthernetInterfacesLayer3) Set(val *AggregateEthernetInterfacesLayer3) {
	v.value = val
	v.isSet = true
}

func (v NullableAggregateEthernetInterfacesLayer3) IsSet() bool {
	return v.isSet
}

func (v *NullableAggregateEthernetInterfacesLayer3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAggregateEthernetInterfacesLayer3(val *AggregateEthernetInterfacesLayer3) *NullableAggregateEthernetInterfacesLayer3 {
	return &NullableAggregateEthernetInterfacesLayer3{value: val, isSet: true}
}

func (v NullableAggregateEthernetInterfacesLayer3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAggregateEthernetInterfacesLayer3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
