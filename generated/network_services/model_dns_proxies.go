/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsProxies type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsProxies{}

// DnsProxies struct for DnsProxies
type DnsProxies struct {
	Cache   *DnsProxiesCache  `json:"cache,omitempty"`
	Default DnsProxiesDefault `json:"default"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// DNS proxy rules
	DomainServers []DnsProxiesDomainServersInner `json:"domain_servers,omitempty"`
	// Enable DNS proxy?
	Enabled *bool `json:"enabled,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// Interfaces on which to enable DNS proxy service
	Interface []string `json:"interface,omitempty"`
	// DNS proxy name
	Name string `json:"name"`
	// The snippet in which the resource is defined
	Snippet              *string                        `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	StaticEntries        []DnsProxiesStaticEntriesInner `json:"static_entries,omitempty"`
	TcpQueries           *DnsProxiesTcpQueries          `json:"tcp_queries,omitempty"`
	UdpQueries           *DnsProxiesUdpQueries          `json:"udp_queries,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsProxies DnsProxies

// NewDnsProxies instantiates a new DnsProxies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsProxies(default_ DnsProxiesDefault, name string) *DnsProxies {
	this := DnsProxies{}
	this.Default = default_
	this.Name = name
	return &this
}

// NewDnsProxiesWithDefaults instantiates a new DnsProxies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsProxiesWithDefaults() *DnsProxies {
	this := DnsProxies{}
	return &this
}

// GetCache returns the Cache field value if set, zero value otherwise.
func (o *DnsProxies) GetCache() DnsProxiesCache {
	if o == nil || IsNil(o.Cache) {
		var ret DnsProxiesCache
		return ret
	}
	return *o.Cache
}

// GetCacheOk returns a tuple with the Cache field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetCacheOk() (*DnsProxiesCache, bool) {
	if o == nil || IsNil(o.Cache) {
		return nil, false
	}
	return o.Cache, true
}

// HasCache returns a boolean if a field has been set.
func (o *DnsProxies) HasCache() bool {
	if o != nil && !IsNil(o.Cache) {
		return true
	}

	return false
}

// SetCache gets a reference to the given DnsProxiesCache and assigns it to the Cache field.
func (o *DnsProxies) SetCache(v DnsProxiesCache) {
	o.Cache = &v
}

// GetDefault returns the Default field value
func (o *DnsProxies) GetDefault() DnsProxiesDefault {
	if o == nil {
		var ret DnsProxiesDefault
		return ret
	}

	return o.Default
}

// GetDefaultOk returns a tuple with the Default field value
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetDefaultOk() (*DnsProxiesDefault, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Default, true
}

// SetDefault sets field value
func (o *DnsProxies) SetDefault(v DnsProxiesDefault) {
	o.Default = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *DnsProxies) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *DnsProxies) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *DnsProxies) SetDevice(v string) {
	o.Device = &v
}

// GetDomainServers returns the DomainServers field value if set, zero value otherwise.
func (o *DnsProxies) GetDomainServers() []DnsProxiesDomainServersInner {
	if o == nil || IsNil(o.DomainServers) {
		var ret []DnsProxiesDomainServersInner
		return ret
	}
	return o.DomainServers
}

// GetDomainServersOk returns a tuple with the DomainServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetDomainServersOk() ([]DnsProxiesDomainServersInner, bool) {
	if o == nil || IsNil(o.DomainServers) {
		return nil, false
	}
	return o.DomainServers, true
}

// HasDomainServers returns a boolean if a field has been set.
func (o *DnsProxies) HasDomainServers() bool {
	if o != nil && !IsNil(o.DomainServers) {
		return true
	}

	return false
}

// SetDomainServers gets a reference to the given []DnsProxiesDomainServersInner and assigns it to the DomainServers field.
func (o *DnsProxies) SetDomainServers(v []DnsProxiesDomainServersInner) {
	o.DomainServers = v
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *DnsProxies) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *DnsProxies) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *DnsProxies) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *DnsProxies) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *DnsProxies) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *DnsProxies) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DnsProxies) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DnsProxies) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *DnsProxies) SetId(v string) {
	o.Id = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *DnsProxies) GetInterface() []string {
	if o == nil || IsNil(o.Interface) {
		var ret []string
		return ret
	}
	return o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetInterfaceOk() ([]string, bool) {
	if o == nil || IsNil(o.Interface) {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *DnsProxies) HasInterface() bool {
	if o != nil && !IsNil(o.Interface) {
		return true
	}

	return false
}

// SetInterface gets a reference to the given []string and assigns it to the Interface field.
func (o *DnsProxies) SetInterface(v []string) {
	o.Interface = v
}

// GetName returns the Name field value
func (o *DnsProxies) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DnsProxies) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *DnsProxies) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *DnsProxies) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *DnsProxies) SetSnippet(v string) {
	o.Snippet = &v
}

// GetStaticEntries returns the StaticEntries field value if set, zero value otherwise.
func (o *DnsProxies) GetStaticEntries() []DnsProxiesStaticEntriesInner {
	if o == nil || IsNil(o.StaticEntries) {
		var ret []DnsProxiesStaticEntriesInner
		return ret
	}
	return o.StaticEntries
}

// GetStaticEntriesOk returns a tuple with the StaticEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetStaticEntriesOk() ([]DnsProxiesStaticEntriesInner, bool) {
	if o == nil || IsNil(o.StaticEntries) {
		return nil, false
	}
	return o.StaticEntries, true
}

// HasStaticEntries returns a boolean if a field has been set.
func (o *DnsProxies) HasStaticEntries() bool {
	if o != nil && !IsNil(o.StaticEntries) {
		return true
	}

	return false
}

// SetStaticEntries gets a reference to the given []DnsProxiesStaticEntriesInner and assigns it to the StaticEntries field.
func (o *DnsProxies) SetStaticEntries(v []DnsProxiesStaticEntriesInner) {
	o.StaticEntries = v
}

// GetTcpQueries returns the TcpQueries field value if set, zero value otherwise.
func (o *DnsProxies) GetTcpQueries() DnsProxiesTcpQueries {
	if o == nil || IsNil(o.TcpQueries) {
		var ret DnsProxiesTcpQueries
		return ret
	}
	return *o.TcpQueries
}

// GetTcpQueriesOk returns a tuple with the TcpQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetTcpQueriesOk() (*DnsProxiesTcpQueries, bool) {
	if o == nil || IsNil(o.TcpQueries) {
		return nil, false
	}
	return o.TcpQueries, true
}

// HasTcpQueries returns a boolean if a field has been set.
func (o *DnsProxies) HasTcpQueries() bool {
	if o != nil && !IsNil(o.TcpQueries) {
		return true
	}

	return false
}

// SetTcpQueries gets a reference to the given DnsProxiesTcpQueries and assigns it to the TcpQueries field.
func (o *DnsProxies) SetTcpQueries(v DnsProxiesTcpQueries) {
	o.TcpQueries = &v
}

// GetUdpQueries returns the UdpQueries field value if set, zero value otherwise.
func (o *DnsProxies) GetUdpQueries() DnsProxiesUdpQueries {
	if o == nil || IsNil(o.UdpQueries) {
		var ret DnsProxiesUdpQueries
		return ret
	}
	return *o.UdpQueries
}

// GetUdpQueriesOk returns a tuple with the UdpQueries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxies) GetUdpQueriesOk() (*DnsProxiesUdpQueries, bool) {
	if o == nil || IsNil(o.UdpQueries) {
		return nil, false
	}
	return o.UdpQueries, true
}

// HasUdpQueries returns a boolean if a field has been set.
func (o *DnsProxies) HasUdpQueries() bool {
	if o != nil && !IsNil(o.UdpQueries) {
		return true
	}

	return false
}

// SetUdpQueries gets a reference to the given DnsProxiesUdpQueries and assigns it to the UdpQueries field.
func (o *DnsProxies) SetUdpQueries(v DnsProxiesUdpQueries) {
	o.UdpQueries = &v
}

func (o DnsProxies) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsProxies) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cache) {
		toSerialize["cache"] = o.Cache
	}
	toSerialize["default"] = o.Default
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DomainServers) {
		toSerialize["domain_servers"] = o.DomainServers
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Interface) {
		toSerialize["interface"] = o.Interface
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.StaticEntries) {
		toSerialize["static_entries"] = o.StaticEntries
	}
	if !IsNil(o.TcpQueries) {
		toSerialize["tcp_queries"] = o.TcpQueries
	}
	if !IsNil(o.UdpQueries) {
		toSerialize["udp_queries"] = o.UdpQueries
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsProxies) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"default",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsProxies := _DnsProxies{}

	err = json.Unmarshal(data, &varDnsProxies)

	if err != nil {
		return err
	}

	*o = DnsProxies(varDnsProxies)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cache")
		delete(additionalProperties, "default")
		delete(additionalProperties, "device")
		delete(additionalProperties, "domain_servers")
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "interface")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "static_entries")
		delete(additionalProperties, "tcp_queries")
		delete(additionalProperties, "udp_queries")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsProxies struct {
	value *DnsProxies
	isSet bool
}

func (v NullableDnsProxies) Get() *DnsProxies {
	return v.value
}

func (v *NullableDnsProxies) Set(val *DnsProxies) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsProxies) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsProxies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsProxies(val *DnsProxies) *NullableDnsProxies {
	return &NullableDnsProxies{value: val, isSet: true}
}

func (v NullableDnsProxies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsProxies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
