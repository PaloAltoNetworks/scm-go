/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the BgpFilteringProfilesIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpFilteringProfilesIpv4{}

// BgpFilteringProfilesIpv4 struct for BgpFilteringProfilesIpv4
type BgpFilteringProfilesIpv4 struct {
	Ipv4                 BgpFilteringProfilesIpv4Ipv4 `json:"ipv4"`
	AdditionalProperties map[string]interface{}
}

type _BgpFilteringProfilesIpv4 BgpFilteringProfilesIpv4

// NewBgpFilteringProfilesIpv4 instantiates a new BgpFilteringProfilesIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpFilteringProfilesIpv4(ipv4 BgpFilteringProfilesIpv4Ipv4) *BgpFilteringProfilesIpv4 {
	this := BgpFilteringProfilesIpv4{}
	this.Ipv4 = ipv4
	return &this
}

// NewBgpFilteringProfilesIpv4WithDefaults instantiates a new BgpFilteringProfilesIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpFilteringProfilesIpv4WithDefaults() *BgpFilteringProfilesIpv4 {
	this := BgpFilteringProfilesIpv4{}
	return &this
}

// GetIpv4 returns the Ipv4 field value
func (o *BgpFilteringProfilesIpv4) GetIpv4() BgpFilteringProfilesIpv4Ipv4 {
	if o == nil {
		var ret BgpFilteringProfilesIpv4Ipv4
		return ret
	}

	return o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value
// and a boolean to check if the value has been set.
func (o *BgpFilteringProfilesIpv4) GetIpv4Ok() (*BgpFilteringProfilesIpv4Ipv4, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ipv4, true
}

// SetIpv4 sets field value
func (o *BgpFilteringProfilesIpv4) SetIpv4(v BgpFilteringProfilesIpv4Ipv4) {
	o.Ipv4 = v
}

func (o BgpFilteringProfilesIpv4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpFilteringProfilesIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ipv4"] = o.Ipv4

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpFilteringProfilesIpv4) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ipv4",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBgpFilteringProfilesIpv4 := _BgpFilteringProfilesIpv4{}

	err = json.Unmarshal(data, &varBgpFilteringProfilesIpv4)

	if err != nil {
		return err
	}

	*o = BgpFilteringProfilesIpv4(varBgpFilteringProfilesIpv4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpFilteringProfilesIpv4 struct {
	value *BgpFilteringProfilesIpv4
	isSet bool
}

func (v NullableBgpFilteringProfilesIpv4) Get() *BgpFilteringProfilesIpv4 {
	return v.value
}

func (v *NullableBgpFilteringProfilesIpv4) Set(val *BgpFilteringProfilesIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpFilteringProfilesIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpFilteringProfilesIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpFilteringProfilesIpv4(val *BgpFilteringProfilesIpv4) *NullableBgpFilteringProfilesIpv4 {
	return &NullableBgpFilteringProfilesIpv4{value: val, isSet: true}
}

func (v NullableBgpFilteringProfilesIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpFilteringProfilesIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
