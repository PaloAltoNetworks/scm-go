/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the NatRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRules{}

// NatRules struct for NatRules
type NatRules struct {
	ActiveActiveDeviceBinding *string `json:"active_active_device_binding,omitempty"`
	// NAT rule description
	Description *string `json:"description,omitempty"`
	// Destination address(es) of the original packet
	Destination []string `json:"destination"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Disable NAT rule?
	Disabled *bool `json:"disabled,omitempty"`
	// Distribution method
	Distribution *string             `json:"distribution,omitempty"`
	DnsRewrite   *NatRulesDnsRewrite `json:"dns_rewrite,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Source zone(s) of the original packet
	From []string `json:"from"`
	// UUID of the resource
	Id string `json:"id"`
	// NAT rule name
	Name string `json:"name"`
	// NAT type
	NatType *string `json:"nat_type,omitempty"`
	// The service of the original packet
	Service string `json:"service"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Source address(es) of the original packet
	Source            []string                   `json:"source"`
	SourceTranslation *NatRulesSourceTranslation `json:"source_translation,omitempty"`
	// NAT rule tags
	Tag []string `json:"tag,omitempty"`
	// Destination zone of the original packet
	To []string `json:"to"`
	// Destination interface of the original packet
	ToInterface *string `json:"to_interface,omitempty"`
	// Translated destination IP address
	TranslatedAddress *string `json:"translated_address,omitempty"`
	// Translated destination port
	TranslatedPort       *int32 `json:"translated_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NatRules NatRules

// NewNatRules instantiates a new NatRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRules(destination []string, from []string, id string, name string, service string, source []string, to []string) *NatRules {
	this := NatRules{}
	this.Destination = destination
	var disabled bool = false
	this.Disabled = &disabled
	this.From = from
	this.Id = id
	this.Name = name
	var natType string = "ipv4"
	this.NatType = &natType
	this.Service = service
	this.Source = source
	this.To = to
	return &this
}

// NewNatRulesWithDefaults instantiates a new NatRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesWithDefaults() *NatRules {
	this := NatRules{}
	var disabled bool = false
	this.Disabled = &disabled
	var natType string = "ipv4"
	this.NatType = &natType
	return &this
}

// GetActiveActiveDeviceBinding returns the ActiveActiveDeviceBinding field value if set, zero value otherwise.
func (o *NatRules) GetActiveActiveDeviceBinding() string {
	if o == nil || IsNil(o.ActiveActiveDeviceBinding) {
		var ret string
		return ret
	}
	return *o.ActiveActiveDeviceBinding
}

// GetActiveActiveDeviceBindingOk returns a tuple with the ActiveActiveDeviceBinding field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetActiveActiveDeviceBindingOk() (*string, bool) {
	if o == nil || IsNil(o.ActiveActiveDeviceBinding) {
		return nil, false
	}
	return o.ActiveActiveDeviceBinding, true
}

// HasActiveActiveDeviceBinding returns a boolean if a field has been set.
func (o *NatRules) HasActiveActiveDeviceBinding() bool {
	if o != nil && !IsNil(o.ActiveActiveDeviceBinding) {
		return true
	}

	return false
}

// SetActiveActiveDeviceBinding gets a reference to the given string and assigns it to the ActiveActiveDeviceBinding field.
func (o *NatRules) SetActiveActiveDeviceBinding(v string) {
	o.ActiveActiveDeviceBinding = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *NatRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *NatRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *NatRules) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value
func (o *NatRules) GetDestination() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetDestinationOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Destination, true
}

// SetDestination sets field value
func (o *NatRules) SetDestination(v []string) {
	o.Destination = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *NatRules) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *NatRules) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *NatRules) SetDevice(v string) {
	o.Device = &v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *NatRules) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *NatRules) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *NatRules) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetDistribution returns the Distribution field value if set, zero value otherwise.
func (o *NatRules) GetDistribution() string {
	if o == nil || IsNil(o.Distribution) {
		var ret string
		return ret
	}
	return *o.Distribution
}

// GetDistributionOk returns a tuple with the Distribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetDistributionOk() (*string, bool) {
	if o == nil || IsNil(o.Distribution) {
		return nil, false
	}
	return o.Distribution, true
}

// HasDistribution returns a boolean if a field has been set.
func (o *NatRules) HasDistribution() bool {
	if o != nil && !IsNil(o.Distribution) {
		return true
	}

	return false
}

// SetDistribution gets a reference to the given string and assigns it to the Distribution field.
func (o *NatRules) SetDistribution(v string) {
	o.Distribution = &v
}

// GetDnsRewrite returns the DnsRewrite field value if set, zero value otherwise.
func (o *NatRules) GetDnsRewrite() NatRulesDnsRewrite {
	if o == nil || IsNil(o.DnsRewrite) {
		var ret NatRulesDnsRewrite
		return ret
	}
	return *o.DnsRewrite
}

// GetDnsRewriteOk returns a tuple with the DnsRewrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetDnsRewriteOk() (*NatRulesDnsRewrite, bool) {
	if o == nil || IsNil(o.DnsRewrite) {
		return nil, false
	}
	return o.DnsRewrite, true
}

// HasDnsRewrite returns a boolean if a field has been set.
func (o *NatRules) HasDnsRewrite() bool {
	if o != nil && !IsNil(o.DnsRewrite) {
		return true
	}

	return false
}

// SetDnsRewrite gets a reference to the given NatRulesDnsRewrite and assigns it to the DnsRewrite field.
func (o *NatRules) SetDnsRewrite(v NatRulesDnsRewrite) {
	o.DnsRewrite = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *NatRules) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *NatRules) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *NatRules) SetFolder(v string) {
	o.Folder = &v
}

// GetFrom returns the From field value
func (o *NatRules) GetFrom() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.From
}

// GetFromOk returns a tuple with the From field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetFromOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.From, true
}

// SetFrom sets field value
func (o *NatRules) SetFrom(v []string) {
	o.From = v
}

// GetId returns the Id field value
func (o *NatRules) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NatRules) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *NatRules) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NatRules) SetName(v string) {
	o.Name = v
}

// GetNatType returns the NatType field value if set, zero value otherwise.
func (o *NatRules) GetNatType() string {
	if o == nil || IsNil(o.NatType) {
		var ret string
		return ret
	}
	return *o.NatType
}

// GetNatTypeOk returns a tuple with the NatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetNatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.NatType) {
		return nil, false
	}
	return o.NatType, true
}

// HasNatType returns a boolean if a field has been set.
func (o *NatRules) HasNatType() bool {
	if o != nil && !IsNil(o.NatType) {
		return true
	}

	return false
}

// SetNatType gets a reference to the given string and assigns it to the NatType field.
func (o *NatRules) SetNatType(v string) {
	o.NatType = &v
}

// GetService returns the Service field value
func (o *NatRules) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *NatRules) SetService(v string) {
	o.Service = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *NatRules) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *NatRules) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *NatRules) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSource returns the Source field value
func (o *NatRules) GetSource() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetSourceOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source, true
}

// SetSource sets field value
func (o *NatRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceTranslation returns the SourceTranslation field value if set, zero value otherwise.
func (o *NatRules) GetSourceTranslation() NatRulesSourceTranslation {
	if o == nil || IsNil(o.SourceTranslation) {
		var ret NatRulesSourceTranslation
		return ret
	}
	return *o.SourceTranslation
}

// GetSourceTranslationOk returns a tuple with the SourceTranslation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetSourceTranslationOk() (*NatRulesSourceTranslation, bool) {
	if o == nil || IsNil(o.SourceTranslation) {
		return nil, false
	}
	return o.SourceTranslation, true
}

// HasSourceTranslation returns a boolean if a field has been set.
func (o *NatRules) HasSourceTranslation() bool {
	if o != nil && !IsNil(o.SourceTranslation) {
		return true
	}

	return false
}

// SetSourceTranslation gets a reference to the given NatRulesSourceTranslation and assigns it to the SourceTranslation field.
func (o *NatRules) SetSourceTranslation(v NatRulesSourceTranslation) {
	o.SourceTranslation = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *NatRules) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *NatRules) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *NatRules) SetTag(v []string) {
	o.Tag = v
}

// GetTo returns the To field value
func (o *NatRules) GetTo() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.To
}

// GetToOk returns a tuple with the To field value
// and a boolean to check if the value has been set.
func (o *NatRules) GetToOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.To, true
}

// SetTo sets field value
func (o *NatRules) SetTo(v []string) {
	o.To = v
}

// GetToInterface returns the ToInterface field value if set, zero value otherwise.
func (o *NatRules) GetToInterface() string {
	if o == nil || IsNil(o.ToInterface) {
		var ret string
		return ret
	}
	return *o.ToInterface
}

// GetToInterfaceOk returns a tuple with the ToInterface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetToInterfaceOk() (*string, bool) {
	if o == nil || IsNil(o.ToInterface) {
		return nil, false
	}
	return o.ToInterface, true
}

// HasToInterface returns a boolean if a field has been set.
func (o *NatRules) HasToInterface() bool {
	if o != nil && !IsNil(o.ToInterface) {
		return true
	}

	return false
}

// SetToInterface gets a reference to the given string and assigns it to the ToInterface field.
func (o *NatRules) SetToInterface(v string) {
	o.ToInterface = &v
}

// GetTranslatedAddress returns the TranslatedAddress field value if set, zero value otherwise.
func (o *NatRules) GetTranslatedAddress() string {
	if o == nil || IsNil(o.TranslatedAddress) {
		var ret string
		return ret
	}
	return *o.TranslatedAddress
}

// GetTranslatedAddressOk returns a tuple with the TranslatedAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetTranslatedAddressOk() (*string, bool) {
	if o == nil || IsNil(o.TranslatedAddress) {
		return nil, false
	}
	return o.TranslatedAddress, true
}

// HasTranslatedAddress returns a boolean if a field has been set.
func (o *NatRules) HasTranslatedAddress() bool {
	if o != nil && !IsNil(o.TranslatedAddress) {
		return true
	}

	return false
}

// SetTranslatedAddress gets a reference to the given string and assigns it to the TranslatedAddress field.
func (o *NatRules) SetTranslatedAddress(v string) {
	o.TranslatedAddress = &v
}

// GetTranslatedPort returns the TranslatedPort field value if set, zero value otherwise.
func (o *NatRules) GetTranslatedPort() int32 {
	if o == nil || IsNil(o.TranslatedPort) {
		var ret int32
		return ret
	}
	return *o.TranslatedPort
}

// GetTranslatedPortOk returns a tuple with the TranslatedPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRules) GetTranslatedPortOk() (*int32, bool) {
	if o == nil || IsNil(o.TranslatedPort) {
		return nil, false
	}
	return o.TranslatedPort, true
}

// HasTranslatedPort returns a boolean if a field has been set.
func (o *NatRules) HasTranslatedPort() bool {
	if o != nil && !IsNil(o.TranslatedPort) {
		return true
	}

	return false
}

// SetTranslatedPort gets a reference to the given int32 and assigns it to the TranslatedPort field.
func (o *NatRules) SetTranslatedPort(v int32) {
	o.TranslatedPort = &v
}

func (o NatRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActiveActiveDeviceBinding) {
		toSerialize["active_active_device_binding"] = o.ActiveActiveDeviceBinding
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["destination"] = o.Destination
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if !IsNil(o.Distribution) {
		toSerialize["distribution"] = o.Distribution
	}
	if !IsNil(o.DnsRewrite) {
		toSerialize["dns_rewrite"] = o.DnsRewrite
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["from"] = o.From
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	if !IsNil(o.NatType) {
		toSerialize["nat_type"] = o.NatType
	}
	toSerialize["service"] = o.Service
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	toSerialize["source"] = o.Source
	if !IsNil(o.SourceTranslation) {
		toSerialize["source_translation"] = o.SourceTranslation
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	toSerialize["to"] = o.To
	if !IsNil(o.ToInterface) {
		toSerialize["to_interface"] = o.ToInterface
	}
	if !IsNil(o.TranslatedAddress) {
		toSerialize["translated_address"] = o.TranslatedAddress
	}
	if !IsNil(o.TranslatedPort) {
		toSerialize["translated_port"] = o.TranslatedPort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRules) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destination",
		"from",
		"id",
		"name",
		"service",
		"source",
		"to",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNatRules := _NatRules{}

	err = json.Unmarshal(data, &varNatRules)

	if err != nil {
		return err
	}

	*o = NatRules(varNatRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "active_active_device_binding")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "device")
		delete(additionalProperties, "disabled")
		delete(additionalProperties, "distribution")
		delete(additionalProperties, "dns_rewrite")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "from")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "nat_type")
		delete(additionalProperties, "service")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_translation")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "to")
		delete(additionalProperties, "to_interface")
		delete(additionalProperties, "translated_address")
		delete(additionalProperties, "translated_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRules struct {
	value *NatRules
	isSet bool
}

func (v NullableNatRules) Get() *NatRules {
	return v.value
}

func (v *NullableNatRules) Set(val *NatRules) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRules) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRules(val *NatRules) *NullableNatRules {
	return &NullableNatRules{value: val, isSet: true}
}

func (v NullableNatRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
