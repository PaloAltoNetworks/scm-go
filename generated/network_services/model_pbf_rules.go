/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the PbfRules type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PbfRules{}

// PbfRules struct for PbfRules
type PbfRules struct {
	Action *PbfRulesAction `json:"action,omitempty"`
	// Applications
	Application []string `json:"application,omitempty"`
	// Description
	Description *string `json:"description,omitempty"`
	// Destination addresses
	Destination []string `json:"destination,omitempty"`
	// The device in which the resource is defined
	Device                 *string                         `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	EnforceSymmetricReturn *PbfRulesEnforceSymmetricReturn `json:"enforce_symmetric_return,omitempty"`
	// The folder in which the resource is defined
	Folder *string       `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	From   *PbfRulesFrom `json:"from,omitempty"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// PBF rule name
	Name *string `json:"name,omitempty"`
	// Schedule
	Schedule *string `json:"schedule,omitempty"`
	// Services
	Service []string `json:"service,omitempty"`
	// The snippet in which the resource is defined
	Snippet *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// Source addresses
	Source []string `json:"source,omitempty"`
	// Source users
	SourceUser []string `json:"source_user,omitempty"`
	// Tags
	Tag                  []string `json:"tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PbfRules PbfRules

// NewPbfRules instantiates a new PbfRules object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPbfRules() *PbfRules {
	this := PbfRules{}
	return &this
}

// NewPbfRulesWithDefaults instantiates a new PbfRules object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPbfRulesWithDefaults() *PbfRules {
	this := PbfRules{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PbfRules) GetAction() PbfRulesAction {
	if o == nil || IsNil(o.Action) {
		var ret PbfRulesAction
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetActionOk() (*PbfRulesAction, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PbfRules) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given PbfRulesAction and assigns it to the Action field.
func (o *PbfRules) SetAction(v PbfRulesAction) {
	o.Action = &v
}

// GetApplication returns the Application field value if set, zero value otherwise.
func (o *PbfRules) GetApplication() []string {
	if o == nil || IsNil(o.Application) {
		var ret []string
		return ret
	}
	return o.Application
}

// GetApplicationOk returns a tuple with the Application field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetApplicationOk() ([]string, bool) {
	if o == nil || IsNil(o.Application) {
		return nil, false
	}
	return o.Application, true
}

// HasApplication returns a boolean if a field has been set.
func (o *PbfRules) HasApplication() bool {
	if o != nil && !IsNil(o.Application) {
		return true
	}

	return false
}

// SetApplication gets a reference to the given []string and assigns it to the Application field.
func (o *PbfRules) SetApplication(v []string) {
	o.Application = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PbfRules) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PbfRules) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PbfRules) SetDescription(v string) {
	o.Description = &v
}

// GetDestination returns the Destination field value if set, zero value otherwise.
func (o *PbfRules) GetDestination() []string {
	if o == nil || IsNil(o.Destination) {
		var ret []string
		return ret
	}
	return o.Destination
}

// GetDestinationOk returns a tuple with the Destination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetDestinationOk() ([]string, bool) {
	if o == nil || IsNil(o.Destination) {
		return nil, false
	}
	return o.Destination, true
}

// HasDestination returns a boolean if a field has been set.
func (o *PbfRules) HasDestination() bool {
	if o != nil && !IsNil(o.Destination) {
		return true
	}

	return false
}

// SetDestination gets a reference to the given []string and assigns it to the Destination field.
func (o *PbfRules) SetDestination(v []string) {
	o.Destination = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *PbfRules) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *PbfRules) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *PbfRules) SetDevice(v string) {
	o.Device = &v
}

// GetEnforceSymmetricReturn returns the EnforceSymmetricReturn field value if set, zero value otherwise.
func (o *PbfRules) GetEnforceSymmetricReturn() PbfRulesEnforceSymmetricReturn {
	if o == nil || IsNil(o.EnforceSymmetricReturn) {
		var ret PbfRulesEnforceSymmetricReturn
		return ret
	}
	return *o.EnforceSymmetricReturn
}

// GetEnforceSymmetricReturnOk returns a tuple with the EnforceSymmetricReturn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetEnforceSymmetricReturnOk() (*PbfRulesEnforceSymmetricReturn, bool) {
	if o == nil || IsNil(o.EnforceSymmetricReturn) {
		return nil, false
	}
	return o.EnforceSymmetricReturn, true
}

// HasEnforceSymmetricReturn returns a boolean if a field has been set.
func (o *PbfRules) HasEnforceSymmetricReturn() bool {
	if o != nil && !IsNil(o.EnforceSymmetricReturn) {
		return true
	}

	return false
}

// SetEnforceSymmetricReturn gets a reference to the given PbfRulesEnforceSymmetricReturn and assigns it to the EnforceSymmetricReturn field.
func (o *PbfRules) SetEnforceSymmetricReturn(v PbfRulesEnforceSymmetricReturn) {
	o.EnforceSymmetricReturn = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *PbfRules) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *PbfRules) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *PbfRules) SetFolder(v string) {
	o.Folder = &v
}

// GetFrom returns the From field value if set, zero value otherwise.
func (o *PbfRules) GetFrom() PbfRulesFrom {
	if o == nil || IsNil(o.From) {
		var ret PbfRulesFrom
		return ret
	}
	return *o.From
}

// GetFromOk returns a tuple with the From field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetFromOk() (*PbfRulesFrom, bool) {
	if o == nil || IsNil(o.From) {
		return nil, false
	}
	return o.From, true
}

// HasFrom returns a boolean if a field has been set.
func (o *PbfRules) HasFrom() bool {
	if o != nil && !IsNil(o.From) {
		return true
	}

	return false
}

// SetFrom gets a reference to the given PbfRulesFrom and assigns it to the From field.
func (o *PbfRules) SetFrom(v PbfRulesFrom) {
	o.From = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *PbfRules) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *PbfRules) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *PbfRules) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PbfRules) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PbfRules) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PbfRules) SetName(v string) {
	o.Name = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *PbfRules) GetSchedule() string {
	if o == nil || IsNil(o.Schedule) {
		var ret string
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetScheduleOk() (*string, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *PbfRules) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given string and assigns it to the Schedule field.
func (o *PbfRules) SetSchedule(v string) {
	o.Schedule = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *PbfRules) GetService() []string {
	if o == nil || IsNil(o.Service) {
		var ret []string
		return ret
	}
	return o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetServiceOk() ([]string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *PbfRules) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given []string and assigns it to the Service field.
func (o *PbfRules) SetService(v []string) {
	o.Service = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *PbfRules) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *PbfRules) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *PbfRules) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *PbfRules) GetSource() []string {
	if o == nil || IsNil(o.Source) {
		var ret []string
		return ret
	}
	return o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetSourceOk() ([]string, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *PbfRules) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given []string and assigns it to the Source field.
func (o *PbfRules) SetSource(v []string) {
	o.Source = v
}

// GetSourceUser returns the SourceUser field value if set, zero value otherwise.
func (o *PbfRules) GetSourceUser() []string {
	if o == nil || IsNil(o.SourceUser) {
		var ret []string
		return ret
	}
	return o.SourceUser
}

// GetSourceUserOk returns a tuple with the SourceUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetSourceUserOk() ([]string, bool) {
	if o == nil || IsNil(o.SourceUser) {
		return nil, false
	}
	return o.SourceUser, true
}

// HasSourceUser returns a boolean if a field has been set.
func (o *PbfRules) HasSourceUser() bool {
	if o != nil && !IsNil(o.SourceUser) {
		return true
	}

	return false
}

// SetSourceUser gets a reference to the given []string and assigns it to the SourceUser field.
func (o *PbfRules) SetSourceUser(v []string) {
	o.SourceUser = v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *PbfRules) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PbfRules) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *PbfRules) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *PbfRules) SetTag(v []string) {
	o.Tag = v
}

func (o PbfRules) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PbfRules) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if !IsNil(o.Application) {
		toSerialize["application"] = o.Application
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Destination) {
		toSerialize["destination"] = o.Destination
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.EnforceSymmetricReturn) {
		toSerialize["enforce_symmetric_return"] = o.EnforceSymmetricReturn
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.From) {
		toSerialize["from"] = o.From
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if !IsNil(o.SourceUser) {
		toSerialize["source_user"] = o.SourceUser
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PbfRules) UnmarshalJSON(data []byte) (err error) {
	varPbfRules := _PbfRules{}

	err = json.Unmarshal(data, &varPbfRules)

	if err != nil {
		return err
	}

	*o = PbfRules(varPbfRules)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action")
		delete(additionalProperties, "application")
		delete(additionalProperties, "description")
		delete(additionalProperties, "destination")
		delete(additionalProperties, "device")
		delete(additionalProperties, "enforce_symmetric_return")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "from")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "service")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "source")
		delete(additionalProperties, "source_user")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePbfRules struct {
	value *PbfRules
	isSet bool
}

func (v NullablePbfRules) Get() *PbfRules {
	return v.value
}

func (v *NullablePbfRules) Set(val *PbfRules) {
	v.value = val
	v.isSet = true
}

func (v NullablePbfRules) IsSet() bool {
	return v.isSet
}

func (v *NullablePbfRules) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePbfRules(val *PbfRules) *NullablePbfRules {
	return &NullablePbfRules{value: val, isSet: true}
}

func (v NullablePbfRules) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePbfRules) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
