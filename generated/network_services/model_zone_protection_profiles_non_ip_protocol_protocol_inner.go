/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the ZoneProtectionProfilesNonIpProtocolProtocolInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneProtectionProfilesNonIpProtocolProtocolInner{}

// ZoneProtectionProfilesNonIpProtocolProtocolInner struct for ZoneProtectionProfilesNonIpProtocolProtocolInner
type ZoneProtectionProfilesNonIpProtocolProtocolInner struct {
	// Enable the Ethertype code on the list.
	Enable *bool `json:"enable,omitempty"`
	// Enter an Ethertype code (protocol) preceded by 0x to indicate hexadecimal (range is 0x0000 to 0xFFFF). A list can have a maximum of 64 Ethertypes. Some sources of Ethertype codes are: * [IEEE hexadecimal Ethertype](http://www.iana.org/assignments/ieee-802-numbers/ieee-802-numbers.xhtml) * [standards.ieee.org/develop/regauth/ethertype/eth.txt](http://standards-oui.ieee.org/ethertype/eth.txt) * [http://www.cavebear.com/archive/cavebear/Ethernet/type.html](http://www.cavebear.com/archive/cavebear/Ethernet/type.html)
	EtherType string `json:"ether_type"`
	// Enter the protocol name that corresponds to the Ethertype code you are adding to the list. The firewall does not verify that the protocol name matches the Ethertype code but the Ethertype code does determine the protocol filter.
	Name                 string `json:"name"`
	AdditionalProperties map[string]interface{}
}

type _ZoneProtectionProfilesNonIpProtocolProtocolInner ZoneProtectionProfilesNonIpProtocolProtocolInner

// NewZoneProtectionProfilesNonIpProtocolProtocolInner instantiates a new ZoneProtectionProfilesNonIpProtocolProtocolInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneProtectionProfilesNonIpProtocolProtocolInner(etherType string, name string) *ZoneProtectionProfilesNonIpProtocolProtocolInner {
	this := ZoneProtectionProfilesNonIpProtocolProtocolInner{}
	this.EtherType = etherType
	this.Name = name
	return &this
}

// NewZoneProtectionProfilesNonIpProtocolProtocolInnerWithDefaults instantiates a new ZoneProtectionProfilesNonIpProtocolProtocolInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneProtectionProfilesNonIpProtocolProtocolInnerWithDefaults() *ZoneProtectionProfilesNonIpProtocolProtocolInner {
	this := ZoneProtectionProfilesNonIpProtocolProtocolInner{}
	return &this
}

// GetEnable returns the Enable field value if set, zero value otherwise.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetEnable() bool {
	if o == nil || IsNil(o.Enable) {
		var ret bool
		return ret
	}
	return *o.Enable
}

// GetEnableOk returns a tuple with the Enable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetEnableOk() (*bool, bool) {
	if o == nil || IsNil(o.Enable) {
		return nil, false
	}
	return o.Enable, true
}

// HasEnable returns a boolean if a field has been set.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) HasEnable() bool {
	if o != nil && !IsNil(o.Enable) {
		return true
	}

	return false
}

// SetEnable gets a reference to the given bool and assigns it to the Enable field.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) SetEnable(v bool) {
	o.Enable = &v
}

// GetEtherType returns the EtherType field value
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetEtherType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EtherType
}

// GetEtherTypeOk returns a tuple with the EtherType field value
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetEtherTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EtherType, true
}

// SetEtherType sets field value
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) SetEtherType(v string) {
	o.EtherType = v
}

// GetName returns the Name field value
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) SetName(v string) {
	o.Name = v
}

func (o ZoneProtectionProfilesNonIpProtocolProtocolInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneProtectionProfilesNonIpProtocolProtocolInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enable) {
		toSerialize["enable"] = o.Enable
	}
	toSerialize["ether_type"] = o.EtherType
	toSerialize["name"] = o.Name

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ZoneProtectionProfilesNonIpProtocolProtocolInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ether_type",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZoneProtectionProfilesNonIpProtocolProtocolInner := _ZoneProtectionProfilesNonIpProtocolProtocolInner{}

	err = json.Unmarshal(data, &varZoneProtectionProfilesNonIpProtocolProtocolInner)

	if err != nil {
		return err
	}

	*o = ZoneProtectionProfilesNonIpProtocolProtocolInner(varZoneProtectionProfilesNonIpProtocolProtocolInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enable")
		delete(additionalProperties, "ether_type")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZoneProtectionProfilesNonIpProtocolProtocolInner struct {
	value *ZoneProtectionProfilesNonIpProtocolProtocolInner
	isSet bool
}

func (v NullableZoneProtectionProfilesNonIpProtocolProtocolInner) Get() *ZoneProtectionProfilesNonIpProtocolProtocolInner {
	return v.value
}

func (v *NullableZoneProtectionProfilesNonIpProtocolProtocolInner) Set(val *ZoneProtectionProfilesNonIpProtocolProtocolInner) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneProtectionProfilesNonIpProtocolProtocolInner) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneProtectionProfilesNonIpProtocolProtocolInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneProtectionProfilesNonIpProtocolProtocolInner(val *ZoneProtectionProfilesNonIpProtocolProtocolInner) *NullableZoneProtectionProfilesNonIpProtocolProtocolInner {
	return &NullableZoneProtectionProfilesNonIpProtocolProtocolInner{value: val, isSet: true}
}

func (v NullableZoneProtectionProfilesNonIpProtocolProtocolInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneProtectionProfilesNonIpProtocolProtocolInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
