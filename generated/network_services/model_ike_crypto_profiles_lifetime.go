/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeCryptoProfilesLifetime type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeCryptoProfilesLifetime{}

// IkeCryptoProfilesLifetime Ike crypto profile lifetime
type IkeCryptoProfilesLifetime struct {
	// specify lifetime in days
	Days *int32 `json:"days,omitempty"`
	// specify lifetime in hours
	Hours *int32 `json:"hours,omitempty"`
	// specify lifetime in minutes
	Minutes *int32 `json:"minutes,omitempty"`
	// specify lifetime in seconds
	Seconds              *int32 `json:"seconds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeCryptoProfilesLifetime IkeCryptoProfilesLifetime

// NewIkeCryptoProfilesLifetime instantiates a new IkeCryptoProfilesLifetime object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeCryptoProfilesLifetime() *IkeCryptoProfilesLifetime {
	this := IkeCryptoProfilesLifetime{}
	return &this
}

// NewIkeCryptoProfilesLifetimeWithDefaults instantiates a new IkeCryptoProfilesLifetime object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeCryptoProfilesLifetimeWithDefaults() *IkeCryptoProfilesLifetime {
	this := IkeCryptoProfilesLifetime{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise.
func (o *IkeCryptoProfilesLifetime) GetDays() int32 {
	if o == nil || IsNil(o.Days) {
		var ret int32
		return ret
	}
	return *o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfilesLifetime) GetDaysOk() (*int32, bool) {
	if o == nil || IsNil(o.Days) {
		return nil, false
	}
	return o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *IkeCryptoProfilesLifetime) HasDays() bool {
	if o != nil && !IsNil(o.Days) {
		return true
	}

	return false
}

// SetDays gets a reference to the given int32 and assigns it to the Days field.
func (o *IkeCryptoProfilesLifetime) SetDays(v int32) {
	o.Days = &v
}

// GetHours returns the Hours field value if set, zero value otherwise.
func (o *IkeCryptoProfilesLifetime) GetHours() int32 {
	if o == nil || IsNil(o.Hours) {
		var ret int32
		return ret
	}
	return *o.Hours
}

// GetHoursOk returns a tuple with the Hours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfilesLifetime) GetHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.Hours) {
		return nil, false
	}
	return o.Hours, true
}

// HasHours returns a boolean if a field has been set.
func (o *IkeCryptoProfilesLifetime) HasHours() bool {
	if o != nil && !IsNil(o.Hours) {
		return true
	}

	return false
}

// SetHours gets a reference to the given int32 and assigns it to the Hours field.
func (o *IkeCryptoProfilesLifetime) SetHours(v int32) {
	o.Hours = &v
}

// GetMinutes returns the Minutes field value if set, zero value otherwise.
func (o *IkeCryptoProfilesLifetime) GetMinutes() int32 {
	if o == nil || IsNil(o.Minutes) {
		var ret int32
		return ret
	}
	return *o.Minutes
}

// GetMinutesOk returns a tuple with the Minutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfilesLifetime) GetMinutesOk() (*int32, bool) {
	if o == nil || IsNil(o.Minutes) {
		return nil, false
	}
	return o.Minutes, true
}

// HasMinutes returns a boolean if a field has been set.
func (o *IkeCryptoProfilesLifetime) HasMinutes() bool {
	if o != nil && !IsNil(o.Minutes) {
		return true
	}

	return false
}

// SetMinutes gets a reference to the given int32 and assigns it to the Minutes field.
func (o *IkeCryptoProfilesLifetime) SetMinutes(v int32) {
	o.Minutes = &v
}

// GetSeconds returns the Seconds field value if set, zero value otherwise.
func (o *IkeCryptoProfilesLifetime) GetSeconds() int32 {
	if o == nil || IsNil(o.Seconds) {
		var ret int32
		return ret
	}
	return *o.Seconds
}

// GetSecondsOk returns a tuple with the Seconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfilesLifetime) GetSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.Seconds) {
		return nil, false
	}
	return o.Seconds, true
}

// HasSeconds returns a boolean if a field has been set.
func (o *IkeCryptoProfilesLifetime) HasSeconds() bool {
	if o != nil && !IsNil(o.Seconds) {
		return true
	}

	return false
}

// SetSeconds gets a reference to the given int32 and assigns it to the Seconds field.
func (o *IkeCryptoProfilesLifetime) SetSeconds(v int32) {
	o.Seconds = &v
}

func (o IkeCryptoProfilesLifetime) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeCryptoProfilesLifetime) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Days) {
		toSerialize["days"] = o.Days
	}
	if !IsNil(o.Hours) {
		toSerialize["hours"] = o.Hours
	}
	if !IsNil(o.Minutes) {
		toSerialize["minutes"] = o.Minutes
	}
	if !IsNil(o.Seconds) {
		toSerialize["seconds"] = o.Seconds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeCryptoProfilesLifetime) UnmarshalJSON(data []byte) (err error) {
	varIkeCryptoProfilesLifetime := _IkeCryptoProfilesLifetime{}

	err = json.Unmarshal(data, &varIkeCryptoProfilesLifetime)

	if err != nil {
		return err
	}

	*o = IkeCryptoProfilesLifetime(varIkeCryptoProfilesLifetime)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "days")
		delete(additionalProperties, "hours")
		delete(additionalProperties, "minutes")
		delete(additionalProperties, "seconds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeCryptoProfilesLifetime struct {
	value *IkeCryptoProfilesLifetime
	isSet bool
}

func (v NullableIkeCryptoProfilesLifetime) Get() *IkeCryptoProfilesLifetime {
	return v.value
}

func (v *NullableIkeCryptoProfilesLifetime) Set(val *IkeCryptoProfilesLifetime) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeCryptoProfilesLifetime) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeCryptoProfilesLifetime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeCryptoProfilesLifetime(val *IkeCryptoProfilesLifetime) *NullableIkeCryptoProfilesLifetime {
	return &NullableIkeCryptoProfilesLifetime{value: val, isSet: true}
}

func (v NullableIkeCryptoProfilesLifetime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeCryptoProfilesLifetime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
