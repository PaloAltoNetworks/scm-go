/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerBgpMed type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerBgpMed{}

// LogicalRoutersVrfInnerBgpMed struct for LogicalRoutersVrfInnerBgpMed
type LogicalRoutersVrfInnerBgpMed struct {
	AlwaysCompareMed           *bool `json:"always_compare_med,omitempty"`
	DeterministicMedComparison *bool `json:"deterministic_med_comparison,omitempty"`
	AdditionalProperties       map[string]interface{}
}

type _LogicalRoutersVrfInnerBgpMed LogicalRoutersVrfInnerBgpMed

// NewLogicalRoutersVrfInnerBgpMed instantiates a new LogicalRoutersVrfInnerBgpMed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerBgpMed() *LogicalRoutersVrfInnerBgpMed {
	this := LogicalRoutersVrfInnerBgpMed{}
	return &this
}

// NewLogicalRoutersVrfInnerBgpMedWithDefaults instantiates a new LogicalRoutersVrfInnerBgpMed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerBgpMedWithDefaults() *LogicalRoutersVrfInnerBgpMed {
	this := LogicalRoutersVrfInnerBgpMed{}
	return &this
}

// GetAlwaysCompareMed returns the AlwaysCompareMed field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpMed) GetAlwaysCompareMed() bool {
	if o == nil || IsNil(o.AlwaysCompareMed) {
		var ret bool
		return ret
	}
	return *o.AlwaysCompareMed
}

// GetAlwaysCompareMedOk returns a tuple with the AlwaysCompareMed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpMed) GetAlwaysCompareMedOk() (*bool, bool) {
	if o == nil || IsNil(o.AlwaysCompareMed) {
		return nil, false
	}
	return o.AlwaysCompareMed, true
}

// HasAlwaysCompareMed returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpMed) HasAlwaysCompareMed() bool {
	if o != nil && !IsNil(o.AlwaysCompareMed) {
		return true
	}

	return false
}

// SetAlwaysCompareMed gets a reference to the given bool and assigns it to the AlwaysCompareMed field.
func (o *LogicalRoutersVrfInnerBgpMed) SetAlwaysCompareMed(v bool) {
	o.AlwaysCompareMed = &v
}

// GetDeterministicMedComparison returns the DeterministicMedComparison field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerBgpMed) GetDeterministicMedComparison() bool {
	if o == nil || IsNil(o.DeterministicMedComparison) {
		var ret bool
		return ret
	}
	return *o.DeterministicMedComparison
}

// GetDeterministicMedComparisonOk returns a tuple with the DeterministicMedComparison field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerBgpMed) GetDeterministicMedComparisonOk() (*bool, bool) {
	if o == nil || IsNil(o.DeterministicMedComparison) {
		return nil, false
	}
	return o.DeterministicMedComparison, true
}

// HasDeterministicMedComparison returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerBgpMed) HasDeterministicMedComparison() bool {
	if o != nil && !IsNil(o.DeterministicMedComparison) {
		return true
	}

	return false
}

// SetDeterministicMedComparison gets a reference to the given bool and assigns it to the DeterministicMedComparison field.
func (o *LogicalRoutersVrfInnerBgpMed) SetDeterministicMedComparison(v bool) {
	o.DeterministicMedComparison = &v
}

func (o LogicalRoutersVrfInnerBgpMed) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerBgpMed) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlwaysCompareMed) {
		toSerialize["always_compare_med"] = o.AlwaysCompareMed
	}
	if !IsNil(o.DeterministicMedComparison) {
		toSerialize["deterministic_med_comparison"] = o.DeterministicMedComparison
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerBgpMed) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerBgpMed := _LogicalRoutersVrfInnerBgpMed{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerBgpMed)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerBgpMed(varLogicalRoutersVrfInnerBgpMed)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "always_compare_med")
		delete(additionalProperties, "deterministic_med_comparison")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerBgpMed struct {
	value *LogicalRoutersVrfInnerBgpMed
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerBgpMed) Get() *LogicalRoutersVrfInnerBgpMed {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerBgpMed) Set(val *LogicalRoutersVrfInnerBgpMed) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerBgpMed) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerBgpMed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerBgpMed(val *LogicalRoutersVrfInnerBgpMed) *NullableLogicalRoutersVrfInnerBgpMed {
	return &NullableLogicalRoutersVrfInnerBgpMed{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerBgpMed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerBgpMed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
