/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the Layer3SubinterfacesDdnsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Layer3SubinterfacesDdnsConfig{}

// Layer3SubinterfacesDdnsConfig Dynamic DNS configuration specific to the Layer 3 sub Interfaces.
type Layer3SubinterfacesDdnsConfig struct {
	// Certificate profile
	DdnsCertProfile string `json:"ddns_cert_profile"`
	// Enable DDNS?
	DdnsEnabled  *bool  `json:"ddns_enabled,omitempty"`
	DdnsHostname string `json:"ddns_hostname" validate:"regexp=^[a-zA-Z0-9_\\\\.\\\\-]+$"`
	// IP to register (static only)
	DdnsIp *string `json:"ddns_ip,omitempty"`
	// Update interval (days)
	DdnsUpdateInterval *int32 `json:"ddns_update_interval,omitempty"`
	// DDNS vendor
	DdnsVendor string `json:"ddns_vendor"`
	// DDNS vendor
	DdnsVendorConfig     string `json:"ddns_vendor_config"`
	AdditionalProperties map[string]interface{}
}

type _Layer3SubinterfacesDdnsConfig Layer3SubinterfacesDdnsConfig

// NewLayer3SubinterfacesDdnsConfig instantiates a new Layer3SubinterfacesDdnsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLayer3SubinterfacesDdnsConfig(ddnsCertProfile string, ddnsHostname string, ddnsVendor string, ddnsVendorConfig string) *Layer3SubinterfacesDdnsConfig {
	this := Layer3SubinterfacesDdnsConfig{}
	this.DdnsCertProfile = ddnsCertProfile
	var ddnsEnabled bool = false
	this.DdnsEnabled = &ddnsEnabled
	this.DdnsHostname = ddnsHostname
	var ddnsUpdateInterval int32 = 1
	this.DdnsUpdateInterval = &ddnsUpdateInterval
	this.DdnsVendor = ddnsVendor
	this.DdnsVendorConfig = ddnsVendorConfig
	return &this
}

// NewLayer3SubinterfacesDdnsConfigWithDefaults instantiates a new Layer3SubinterfacesDdnsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLayer3SubinterfacesDdnsConfigWithDefaults() *Layer3SubinterfacesDdnsConfig {
	this := Layer3SubinterfacesDdnsConfig{}
	var ddnsEnabled bool = false
	this.DdnsEnabled = &ddnsEnabled
	var ddnsUpdateInterval int32 = 1
	this.DdnsUpdateInterval = &ddnsUpdateInterval
	return &this
}

// GetDdnsCertProfile returns the DdnsCertProfile field value
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsCertProfile() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsCertProfile
}

// GetDdnsCertProfileOk returns a tuple with the DdnsCertProfile field value
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsCertProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsCertProfile, true
}

// SetDdnsCertProfile sets field value
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsCertProfile(v string) {
	o.DdnsCertProfile = v
}

// GetDdnsEnabled returns the DdnsEnabled field value if set, zero value otherwise.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsEnabled() bool {
	if o == nil || IsNil(o.DdnsEnabled) {
		var ret bool
		return ret
	}
	return *o.DdnsEnabled
}

// GetDdnsEnabledOk returns a tuple with the DdnsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.DdnsEnabled) {
		return nil, false
	}
	return o.DdnsEnabled, true
}

// HasDdnsEnabled returns a boolean if a field has been set.
func (o *Layer3SubinterfacesDdnsConfig) HasDdnsEnabled() bool {
	if o != nil && !IsNil(o.DdnsEnabled) {
		return true
	}

	return false
}

// SetDdnsEnabled gets a reference to the given bool and assigns it to the DdnsEnabled field.
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsEnabled(v bool) {
	o.DdnsEnabled = &v
}

// GetDdnsHostname returns the DdnsHostname field value
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsHostname
}

// GetDdnsHostnameOk returns a tuple with the DdnsHostname field value
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsHostname, true
}

// SetDdnsHostname sets field value
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsHostname(v string) {
	o.DdnsHostname = v
}

// GetDdnsIp returns the DdnsIp field value if set, zero value otherwise.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsIp() string {
	if o == nil || IsNil(o.DdnsIp) {
		var ret string
		return ret
	}
	return *o.DdnsIp
}

// GetDdnsIpOk returns a tuple with the DdnsIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsIpOk() (*string, bool) {
	if o == nil || IsNil(o.DdnsIp) {
		return nil, false
	}
	return o.DdnsIp, true
}

// HasDdnsIp returns a boolean if a field has been set.
func (o *Layer3SubinterfacesDdnsConfig) HasDdnsIp() bool {
	if o != nil && !IsNil(o.DdnsIp) {
		return true
	}

	return false
}

// SetDdnsIp gets a reference to the given string and assigns it to the DdnsIp field.
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsIp(v string) {
	o.DdnsIp = &v
}

// GetDdnsUpdateInterval returns the DdnsUpdateInterval field value if set, zero value otherwise.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsUpdateInterval() int32 {
	if o == nil || IsNil(o.DdnsUpdateInterval) {
		var ret int32
		return ret
	}
	return *o.DdnsUpdateInterval
}

// GetDdnsUpdateIntervalOk returns a tuple with the DdnsUpdateInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsUpdateIntervalOk() (*int32, bool) {
	if o == nil || IsNil(o.DdnsUpdateInterval) {
		return nil, false
	}
	return o.DdnsUpdateInterval, true
}

// HasDdnsUpdateInterval returns a boolean if a field has been set.
func (o *Layer3SubinterfacesDdnsConfig) HasDdnsUpdateInterval() bool {
	if o != nil && !IsNil(o.DdnsUpdateInterval) {
		return true
	}

	return false
}

// SetDdnsUpdateInterval gets a reference to the given int32 and assigns it to the DdnsUpdateInterval field.
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsUpdateInterval(v int32) {
	o.DdnsUpdateInterval = &v
}

// GetDdnsVendor returns the DdnsVendor field value
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsVendor
}

// GetDdnsVendorOk returns a tuple with the DdnsVendor field value
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsVendor, true
}

// SetDdnsVendor sets field value
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsVendor(v string) {
	o.DdnsVendor = v
}

// GetDdnsVendorConfig returns the DdnsVendorConfig field value
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsVendorConfig() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DdnsVendorConfig
}

// GetDdnsVendorConfigOk returns a tuple with the DdnsVendorConfig field value
// and a boolean to check if the value has been set.
func (o *Layer3SubinterfacesDdnsConfig) GetDdnsVendorConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DdnsVendorConfig, true
}

// SetDdnsVendorConfig sets field value
func (o *Layer3SubinterfacesDdnsConfig) SetDdnsVendorConfig(v string) {
	o.DdnsVendorConfig = v
}

func (o Layer3SubinterfacesDdnsConfig) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Layer3SubinterfacesDdnsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ddns_cert_profile"] = o.DdnsCertProfile
	if !IsNil(o.DdnsEnabled) {
		toSerialize["ddns_enabled"] = o.DdnsEnabled
	}
	toSerialize["ddns_hostname"] = o.DdnsHostname
	if !IsNil(o.DdnsIp) {
		toSerialize["ddns_ip"] = o.DdnsIp
	}
	if !IsNil(o.DdnsUpdateInterval) {
		toSerialize["ddns_update_interval"] = o.DdnsUpdateInterval
	}
	toSerialize["ddns_vendor"] = o.DdnsVendor
	toSerialize["ddns_vendor_config"] = o.DdnsVendorConfig

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Layer3SubinterfacesDdnsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ddns_cert_profile",
		"ddns_hostname",
		"ddns_vendor",
		"ddns_vendor_config",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLayer3SubinterfacesDdnsConfig := _Layer3SubinterfacesDdnsConfig{}

	err = json.Unmarshal(data, &varLayer3SubinterfacesDdnsConfig)

	if err != nil {
		return err
	}

	*o = Layer3SubinterfacesDdnsConfig(varLayer3SubinterfacesDdnsConfig)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ddns_cert_profile")
		delete(additionalProperties, "ddns_enabled")
		delete(additionalProperties, "ddns_hostname")
		delete(additionalProperties, "ddns_ip")
		delete(additionalProperties, "ddns_update_interval")
		delete(additionalProperties, "ddns_vendor")
		delete(additionalProperties, "ddns_vendor_config")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLayer3SubinterfacesDdnsConfig struct {
	value *Layer3SubinterfacesDdnsConfig
	isSet bool
}

func (v NullableLayer3SubinterfacesDdnsConfig) Get() *Layer3SubinterfacesDdnsConfig {
	return v.value
}

func (v *NullableLayer3SubinterfacesDdnsConfig) Set(val *Layer3SubinterfacesDdnsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableLayer3SubinterfacesDdnsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableLayer3SubinterfacesDdnsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayer3SubinterfacesDdnsConfig(val *Layer3SubinterfacesDdnsConfig) *NullableLayer3SubinterfacesDdnsConfig {
	return &NullableLayer3SubinterfacesDdnsConfig{value: val, isSet: true}
}

func (v NullableLayer3SubinterfacesDdnsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayer3SubinterfacesDdnsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
