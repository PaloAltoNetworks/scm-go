/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the Poe type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Poe{}

// Poe struct for Poe
type Poe struct {
	// Enabled PoE?
	PoeEnabled *bool `json:"poe_enabled,omitempty"`
	// PoE reserved power
	PoeRsvdPwr           *int32 `json:"poe_rsvd_pwr,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Poe Poe

// NewPoe instantiates a new Poe object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoe() *Poe {
	this := Poe{}
	var poeEnabled bool = false
	this.PoeEnabled = &poeEnabled
	var poeRsvdPwr int32 = 0
	this.PoeRsvdPwr = &poeRsvdPwr
	return &this
}

// NewPoeWithDefaults instantiates a new Poe object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoeWithDefaults() *Poe {
	this := Poe{}
	var poeEnabled bool = false
	this.PoeEnabled = &poeEnabled
	var poeRsvdPwr int32 = 0
	this.PoeRsvdPwr = &poeRsvdPwr
	return &this
}

// GetPoeEnabled returns the PoeEnabled field value if set, zero value otherwise.
func (o *Poe) GetPoeEnabled() bool {
	if o == nil || IsNil(o.PoeEnabled) {
		var ret bool
		return ret
	}
	return *o.PoeEnabled
}

// GetPoeEnabledOk returns a tuple with the PoeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Poe) GetPoeEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.PoeEnabled) {
		return nil, false
	}
	return o.PoeEnabled, true
}

// HasPoeEnabled returns a boolean if a field has been set.
func (o *Poe) HasPoeEnabled() bool {
	if o != nil && !IsNil(o.PoeEnabled) {
		return true
	}

	return false
}

// SetPoeEnabled gets a reference to the given bool and assigns it to the PoeEnabled field.
func (o *Poe) SetPoeEnabled(v bool) {
	o.PoeEnabled = &v
}

// GetPoeRsvdPwr returns the PoeRsvdPwr field value if set, zero value otherwise.
func (o *Poe) GetPoeRsvdPwr() int32 {
	if o == nil || IsNil(o.PoeRsvdPwr) {
		var ret int32
		return ret
	}
	return *o.PoeRsvdPwr
}

// GetPoeRsvdPwrOk returns a tuple with the PoeRsvdPwr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Poe) GetPoeRsvdPwrOk() (*int32, bool) {
	if o == nil || IsNil(o.PoeRsvdPwr) {
		return nil, false
	}
	return o.PoeRsvdPwr, true
}

// HasPoeRsvdPwr returns a boolean if a field has been set.
func (o *Poe) HasPoeRsvdPwr() bool {
	if o != nil && !IsNil(o.PoeRsvdPwr) {
		return true
	}

	return false
}

// SetPoeRsvdPwr gets a reference to the given int32 and assigns it to the PoeRsvdPwr field.
func (o *Poe) SetPoeRsvdPwr(v int32) {
	o.PoeRsvdPwr = &v
}

func (o Poe) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Poe) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PoeEnabled) {
		toSerialize["poe_enabled"] = o.PoeEnabled
	}
	if !IsNil(o.PoeRsvdPwr) {
		toSerialize["poe_rsvd_pwr"] = o.PoeRsvdPwr
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Poe) UnmarshalJSON(data []byte) (err error) {
	varPoe := _Poe{}

	err = json.Unmarshal(data, &varPoe)

	if err != nil {
		return err
	}

	*o = Poe(varPoe)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "poe_enabled")
		delete(additionalProperties, "poe_rsvd_pwr")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePoe struct {
	value *Poe
	isSet bool
}

func (v NullablePoe) Get() *Poe {
	return v.value
}

func (v *NullablePoe) Set(val *Poe) {
	v.value = val
	v.isSet = true
}

func (v NullablePoe) IsSet() bool {
	return v.isSet
}

func (v *NullablePoe) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoe(val *Poe) *NullablePoe {
	return &NullablePoe{value: val, isSet: true}
}

func (v NullablePoe) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoe) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
