/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the EthernetInterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthernetInterfaces{}

// EthernetInterfaces struct for EthernetInterfaces
type EthernetInterfaces struct {
	// Interface description
	Comment *string `json:"comment,omitempty"`
	// Default interface assignment
	DefaultValue *string `json:"default-value,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// UUID of the resource
	Id     string                    `json:"id"`
	Layer2 *EthernetInterfacesLayer2 `json:"layer2,omitempty"`
	Layer3 *EthernetInterfacesLayer3 `json:"layer3,omitempty"`
	// Link duplex
	LinkDuplex *string `json:"link-duplex,omitempty"`
	// Link speed
	LinkSpeed *string `json:"link-speed,omitempty"`
	// Link state
	LinkState *string `json:"link-state,omitempty"`
	// Interface name
	Name string `json:"name"`
	Poe  *Poe   `json:"poe,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string                `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	Tap                  map[string]interface{} `json:"tap,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EthernetInterfaces EthernetInterfaces

// NewEthernetInterfaces instantiates a new EthernetInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthernetInterfaces(id string, name string) *EthernetInterfaces {
	this := EthernetInterfaces{}
	this.Id = id
	var linkDuplex string = "auto"
	this.LinkDuplex = &linkDuplex
	var linkSpeed string = "auto"
	this.LinkSpeed = &linkSpeed
	var linkState string = "auto"
	this.LinkState = &linkState
	this.Name = name
	return &this
}

// NewEthernetInterfacesWithDefaults instantiates a new EthernetInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthernetInterfacesWithDefaults() *EthernetInterfaces {
	this := EthernetInterfaces{}
	var linkDuplex string = "auto"
	this.LinkDuplex = &linkDuplex
	var linkSpeed string = "auto"
	this.LinkSpeed = &linkSpeed
	var linkState string = "auto"
	this.LinkState = &linkState
	return &this
}

// GetComment returns the Comment field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetComment() string {
	if o == nil || IsNil(o.Comment) {
		var ret string
		return ret
	}
	return *o.Comment
}

// GetCommentOk returns a tuple with the Comment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetCommentOk() (*string, bool) {
	if o == nil || IsNil(o.Comment) {
		return nil, false
	}
	return o.Comment, true
}

// HasComment returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasComment() bool {
	if o != nil && !IsNil(o.Comment) {
		return true
	}

	return false
}

// SetComment gets a reference to the given string and assigns it to the Comment field.
func (o *EthernetInterfaces) SetComment(v string) {
	o.Comment = &v
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue) {
		var ret string
		return ret
	}
	return *o.DefaultValue
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetDefaultValueOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultValue) {
		return nil, false
	}
	return o.DefaultValue, true
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasDefaultValue() bool {
	if o != nil && !IsNil(o.DefaultValue) {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given string and assigns it to the DefaultValue field.
func (o *EthernetInterfaces) SetDefaultValue(v string) {
	o.DefaultValue = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *EthernetInterfaces) SetDevice(v string) {
	o.Device = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *EthernetInterfaces) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value
func (o *EthernetInterfaces) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *EthernetInterfaces) SetId(v string) {
	o.Id = v
}

// GetLayer2 returns the Layer2 field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetLayer2() EthernetInterfacesLayer2 {
	if o == nil || IsNil(o.Layer2) {
		var ret EthernetInterfacesLayer2
		return ret
	}
	return *o.Layer2
}

// GetLayer2Ok returns a tuple with the Layer2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetLayer2Ok() (*EthernetInterfacesLayer2, bool) {
	if o == nil || IsNil(o.Layer2) {
		return nil, false
	}
	return o.Layer2, true
}

// HasLayer2 returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasLayer2() bool {
	if o != nil && !IsNil(o.Layer2) {
		return true
	}

	return false
}

// SetLayer2 gets a reference to the given EthernetInterfacesLayer2 and assigns it to the Layer2 field.
func (o *EthernetInterfaces) SetLayer2(v EthernetInterfacesLayer2) {
	o.Layer2 = &v
}

// GetLayer3 returns the Layer3 field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetLayer3() EthernetInterfacesLayer3 {
	if o == nil || IsNil(o.Layer3) {
		var ret EthernetInterfacesLayer3
		return ret
	}
	return *o.Layer3
}

// GetLayer3Ok returns a tuple with the Layer3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetLayer3Ok() (*EthernetInterfacesLayer3, bool) {
	if o == nil || IsNil(o.Layer3) {
		return nil, false
	}
	return o.Layer3, true
}

// HasLayer3 returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasLayer3() bool {
	if o != nil && !IsNil(o.Layer3) {
		return true
	}

	return false
}

// SetLayer3 gets a reference to the given EthernetInterfacesLayer3 and assigns it to the Layer3 field.
func (o *EthernetInterfaces) SetLayer3(v EthernetInterfacesLayer3) {
	o.Layer3 = &v
}

// GetLinkDuplex returns the LinkDuplex field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetLinkDuplex() string {
	if o == nil || IsNil(o.LinkDuplex) {
		var ret string
		return ret
	}
	return *o.LinkDuplex
}

// GetLinkDuplexOk returns a tuple with the LinkDuplex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetLinkDuplexOk() (*string, bool) {
	if o == nil || IsNil(o.LinkDuplex) {
		return nil, false
	}
	return o.LinkDuplex, true
}

// HasLinkDuplex returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasLinkDuplex() bool {
	if o != nil && !IsNil(o.LinkDuplex) {
		return true
	}

	return false
}

// SetLinkDuplex gets a reference to the given string and assigns it to the LinkDuplex field.
func (o *EthernetInterfaces) SetLinkDuplex(v string) {
	o.LinkDuplex = &v
}

// GetLinkSpeed returns the LinkSpeed field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetLinkSpeed() string {
	if o == nil || IsNil(o.LinkSpeed) {
		var ret string
		return ret
	}
	return *o.LinkSpeed
}

// GetLinkSpeedOk returns a tuple with the LinkSpeed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetLinkSpeedOk() (*string, bool) {
	if o == nil || IsNil(o.LinkSpeed) {
		return nil, false
	}
	return o.LinkSpeed, true
}

// HasLinkSpeed returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasLinkSpeed() bool {
	if o != nil && !IsNil(o.LinkSpeed) {
		return true
	}

	return false
}

// SetLinkSpeed gets a reference to the given string and assigns it to the LinkSpeed field.
func (o *EthernetInterfaces) SetLinkSpeed(v string) {
	o.LinkSpeed = &v
}

// GetLinkState returns the LinkState field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetLinkState() string {
	if o == nil || IsNil(o.LinkState) {
		var ret string
		return ret
	}
	return *o.LinkState
}

// GetLinkStateOk returns a tuple with the LinkState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetLinkStateOk() (*string, bool) {
	if o == nil || IsNil(o.LinkState) {
		return nil, false
	}
	return o.LinkState, true
}

// HasLinkState returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasLinkState() bool {
	if o != nil && !IsNil(o.LinkState) {
		return true
	}

	return false
}

// SetLinkState gets a reference to the given string and assigns it to the LinkState field.
func (o *EthernetInterfaces) SetLinkState(v string) {
	o.LinkState = &v
}

// GetName returns the Name field value
func (o *EthernetInterfaces) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *EthernetInterfaces) SetName(v string) {
	o.Name = v
}

// GetPoe returns the Poe field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetPoe() Poe {
	if o == nil || IsNil(o.Poe) {
		var ret Poe
		return ret
	}
	return *o.Poe
}

// GetPoeOk returns a tuple with the Poe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetPoeOk() (*Poe, bool) {
	if o == nil || IsNil(o.Poe) {
		return nil, false
	}
	return o.Poe, true
}

// HasPoe returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasPoe() bool {
	if o != nil && !IsNil(o.Poe) {
		return true
	}

	return false
}

// SetPoe gets a reference to the given Poe and assigns it to the Poe field.
func (o *EthernetInterfaces) SetPoe(v Poe) {
	o.Poe = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *EthernetInterfaces) SetSnippet(v string) {
	o.Snippet = &v
}

// GetTap returns the Tap field value if set, zero value otherwise.
func (o *EthernetInterfaces) GetTap() map[string]interface{} {
	if o == nil || IsNil(o.Tap) {
		var ret map[string]interface{}
		return ret
	}
	return o.Tap
}

// GetTapOk returns a tuple with the Tap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfaces) GetTapOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Tap) {
		return map[string]interface{}{}, false
	}
	return o.Tap, true
}

// HasTap returns a boolean if a field has been set.
func (o *EthernetInterfaces) HasTap() bool {
	if o != nil && !IsNil(o.Tap) {
		return true
	}

	return false
}

// SetTap gets a reference to the given map[string]interface{} and assigns it to the Tap field.
func (o *EthernetInterfaces) SetTap(v map[string]interface{}) {
	o.Tap = v
}

func (o EthernetInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthernetInterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Comment) {
		toSerialize["comment"] = o.Comment
	}
	if !IsNil(o.DefaultValue) {
		toSerialize["default-value"] = o.DefaultValue
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["id"] = o.Id
	if !IsNil(o.Layer2) {
		toSerialize["layer2"] = o.Layer2
	}
	if !IsNil(o.Layer3) {
		toSerialize["layer3"] = o.Layer3
	}
	if !IsNil(o.LinkDuplex) {
		toSerialize["link-duplex"] = o.LinkDuplex
	}
	if !IsNil(o.LinkSpeed) {
		toSerialize["link-speed"] = o.LinkSpeed
	}
	if !IsNil(o.LinkState) {
		toSerialize["link-state"] = o.LinkState
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Poe) {
		toSerialize["poe"] = o.Poe
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Tap) {
		toSerialize["tap"] = o.Tap
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EthernetInterfaces) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEthernetInterfaces := _EthernetInterfaces{}

	err = json.Unmarshal(data, &varEthernetInterfaces)

	if err != nil {
		return err
	}

	*o = EthernetInterfaces(varEthernetInterfaces)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "comment")
		delete(additionalProperties, "default-value")
		delete(additionalProperties, "device")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "layer2")
		delete(additionalProperties, "layer3")
		delete(additionalProperties, "link-duplex")
		delete(additionalProperties, "link-speed")
		delete(additionalProperties, "link-state")
		delete(additionalProperties, "name")
		delete(additionalProperties, "poe")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "tap")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEthernetInterfaces struct {
	value *EthernetInterfaces
	isSet bool
}

func (v NullableEthernetInterfaces) Get() *EthernetInterfaces {
	return v.value
}

func (v *NullableEthernetInterfaces) Set(val *EthernetInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableEthernetInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableEthernetInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthernetInterfaces(val *EthernetInterfaces) *NullableEthernetInterfaces {
	return &NullableEthernetInterfaces{value: val, isSet: true}
}

func (v NullableEthernetInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthernetInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
