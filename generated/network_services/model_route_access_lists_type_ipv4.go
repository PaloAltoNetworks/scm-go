/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RouteAccessListsTypeIpv4 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteAccessListsTypeIpv4{}

// RouteAccessListsTypeIpv4 struct for RouteAccessListsTypeIpv4
type RouteAccessListsTypeIpv4 struct {
	// IPv4 access lists
	Ipv4Entry            []RouteAccessListsTypeIpv4Ipv4EntryInner `json:"ipv4_entry,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteAccessListsTypeIpv4 RouteAccessListsTypeIpv4

// NewRouteAccessListsTypeIpv4 instantiates a new RouteAccessListsTypeIpv4 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteAccessListsTypeIpv4() *RouteAccessListsTypeIpv4 {
	this := RouteAccessListsTypeIpv4{}
	return &this
}

// NewRouteAccessListsTypeIpv4WithDefaults instantiates a new RouteAccessListsTypeIpv4 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteAccessListsTypeIpv4WithDefaults() *RouteAccessListsTypeIpv4 {
	this := RouteAccessListsTypeIpv4{}
	return &this
}

// GetIpv4Entry returns the Ipv4Entry field value if set, zero value otherwise.
func (o *RouteAccessListsTypeIpv4) GetIpv4Entry() []RouteAccessListsTypeIpv4Ipv4EntryInner {
	if o == nil || IsNil(o.Ipv4Entry) {
		var ret []RouteAccessListsTypeIpv4Ipv4EntryInner
		return ret
	}
	return o.Ipv4Entry
}

// GetIpv4EntryOk returns a tuple with the Ipv4Entry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteAccessListsTypeIpv4) GetIpv4EntryOk() ([]RouteAccessListsTypeIpv4Ipv4EntryInner, bool) {
	if o == nil || IsNil(o.Ipv4Entry) {
		return nil, false
	}
	return o.Ipv4Entry, true
}

// HasIpv4Entry returns a boolean if a field has been set.
func (o *RouteAccessListsTypeIpv4) HasIpv4Entry() bool {
	if o != nil && !IsNil(o.Ipv4Entry) {
		return true
	}

	return false
}

// SetIpv4Entry gets a reference to the given []RouteAccessListsTypeIpv4Ipv4EntryInner and assigns it to the Ipv4Entry field.
func (o *RouteAccessListsTypeIpv4) SetIpv4Entry(v []RouteAccessListsTypeIpv4Ipv4EntryInner) {
	o.Ipv4Entry = v
}

func (o RouteAccessListsTypeIpv4) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteAccessListsTypeIpv4) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ipv4Entry) {
		toSerialize["ipv4_entry"] = o.Ipv4Entry
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteAccessListsTypeIpv4) UnmarshalJSON(data []byte) (err error) {
	varRouteAccessListsTypeIpv4 := _RouteAccessListsTypeIpv4{}

	err = json.Unmarshal(data, &varRouteAccessListsTypeIpv4)

	if err != nil {
		return err
	}

	*o = RouteAccessListsTypeIpv4(varRouteAccessListsTypeIpv4)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ipv4_entry")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteAccessListsTypeIpv4 struct {
	value *RouteAccessListsTypeIpv4
	isSet bool
}

func (v NullableRouteAccessListsTypeIpv4) Get() *RouteAccessListsTypeIpv4 {
	return v.value
}

func (v *NullableRouteAccessListsTypeIpv4) Set(val *RouteAccessListsTypeIpv4) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteAccessListsTypeIpv4) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteAccessListsTypeIpv4) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteAccessListsTypeIpv4(val *RouteAccessListsTypeIpv4) *NullableRouteAccessListsTypeIpv4 {
	return &NullableRouteAccessListsTypeIpv4{value: val, isSet: true}
}

func (v NullableRouteAccessListsTypeIpv4) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteAccessListsTypeIpv4) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
