/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the IpsecCryptoProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpsecCryptoProfiles{}

// IpsecCryptoProfiles struct for IpsecCryptoProfiles
type IpsecCryptoProfiles struct {
	Ah *IpsecCryptoProfilesAh `json:"ah,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// phase-2 DH group (PFS DH group)
	DhGroup *string                 `json:"dh_group,omitempty"`
	Esp     *IpsecCryptoProfilesEsp `json:"esp,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	// UUID of the resource
	Id       *string                      `json:"id,omitempty"`
	Lifesize *IpsecCryptoProfilesLifesize `json:"lifesize,omitempty"`
	Lifetime IpsecCryptoProfilesLifetime  `json:"lifetime"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]
	Name string `json:"name"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _IpsecCryptoProfiles IpsecCryptoProfiles

// NewIpsecCryptoProfiles instantiates a new IpsecCryptoProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpsecCryptoProfiles(lifetime IpsecCryptoProfilesLifetime, name string) *IpsecCryptoProfiles {
	this := IpsecCryptoProfiles{}
	var dhGroup string = "group2"
	this.DhGroup = &dhGroup
	this.Lifetime = lifetime
	this.Name = name
	return &this
}

// NewIpsecCryptoProfilesWithDefaults instantiates a new IpsecCryptoProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpsecCryptoProfilesWithDefaults() *IpsecCryptoProfiles {
	this := IpsecCryptoProfiles{}
	var dhGroup string = "group2"
	this.DhGroup = &dhGroup
	return &this
}

// GetAh returns the Ah field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetAh() IpsecCryptoProfilesAh {
	if o == nil || IsNil(o.Ah) {
		var ret IpsecCryptoProfilesAh
		return ret
	}
	return *o.Ah
}

// GetAhOk returns a tuple with the Ah field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetAhOk() (*IpsecCryptoProfilesAh, bool) {
	if o == nil || IsNil(o.Ah) {
		return nil, false
	}
	return o.Ah, true
}

// HasAh returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasAh() bool {
	if o != nil && !IsNil(o.Ah) {
		return true
	}

	return false
}

// SetAh gets a reference to the given IpsecCryptoProfilesAh and assigns it to the Ah field.
func (o *IpsecCryptoProfiles) SetAh(v IpsecCryptoProfilesAh) {
	o.Ah = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *IpsecCryptoProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetDhGroup returns the DhGroup field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetDhGroup() string {
	if o == nil || IsNil(o.DhGroup) {
		var ret string
		return ret
	}
	return *o.DhGroup
}

// GetDhGroupOk returns a tuple with the DhGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetDhGroupOk() (*string, bool) {
	if o == nil || IsNil(o.DhGroup) {
		return nil, false
	}
	return o.DhGroup, true
}

// HasDhGroup returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasDhGroup() bool {
	if o != nil && !IsNil(o.DhGroup) {
		return true
	}

	return false
}

// SetDhGroup gets a reference to the given string and assigns it to the DhGroup field.
func (o *IpsecCryptoProfiles) SetDhGroup(v string) {
	o.DhGroup = &v
}

// GetEsp returns the Esp field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetEsp() IpsecCryptoProfilesEsp {
	if o == nil || IsNil(o.Esp) {
		var ret IpsecCryptoProfilesEsp
		return ret
	}
	return *o.Esp
}

// GetEspOk returns a tuple with the Esp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetEspOk() (*IpsecCryptoProfilesEsp, bool) {
	if o == nil || IsNil(o.Esp) {
		return nil, false
	}
	return o.Esp, true
}

// HasEsp returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasEsp() bool {
	if o != nil && !IsNil(o.Esp) {
		return true
	}

	return false
}

// SetEsp gets a reference to the given IpsecCryptoProfilesEsp and assigns it to the Esp field.
func (o *IpsecCryptoProfiles) SetEsp(v IpsecCryptoProfilesEsp) {
	o.Esp = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *IpsecCryptoProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IpsecCryptoProfiles) SetId(v string) {
	o.Id = &v
}

// GetLifesize returns the Lifesize field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetLifesize() IpsecCryptoProfilesLifesize {
	if o == nil || IsNil(o.Lifesize) {
		var ret IpsecCryptoProfilesLifesize
		return ret
	}
	return *o.Lifesize
}

// GetLifesizeOk returns a tuple with the Lifesize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetLifesizeOk() (*IpsecCryptoProfilesLifesize, bool) {
	if o == nil || IsNil(o.Lifesize) {
		return nil, false
	}
	return o.Lifesize, true
}

// HasLifesize returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasLifesize() bool {
	if o != nil && !IsNil(o.Lifesize) {
		return true
	}

	return false
}

// SetLifesize gets a reference to the given IpsecCryptoProfilesLifesize and assigns it to the Lifesize field.
func (o *IpsecCryptoProfiles) SetLifesize(v IpsecCryptoProfilesLifesize) {
	o.Lifesize = &v
}

// GetLifetime returns the Lifetime field value
func (o *IpsecCryptoProfiles) GetLifetime() IpsecCryptoProfilesLifetime {
	if o == nil {
		var ret IpsecCryptoProfilesLifetime
		return ret
	}

	return o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetLifetimeOk() (*IpsecCryptoProfilesLifetime, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Lifetime, true
}

// SetLifetime sets field value
func (o *IpsecCryptoProfiles) SetLifetime(v IpsecCryptoProfilesLifetime) {
	o.Lifetime = v
}

// GetName returns the Name field value
func (o *IpsecCryptoProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IpsecCryptoProfiles) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *IpsecCryptoProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IpsecCryptoProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *IpsecCryptoProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *IpsecCryptoProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

func (o IpsecCryptoProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpsecCryptoProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ah) {
		toSerialize["ah"] = o.Ah
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DhGroup) {
		toSerialize["dh_group"] = o.DhGroup
	}
	if !IsNil(o.Esp) {
		toSerialize["esp"] = o.Esp
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Lifesize) {
		toSerialize["lifesize"] = o.Lifesize
	}
	toSerialize["lifetime"] = o.Lifetime
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IpsecCryptoProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lifetime",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpsecCryptoProfiles := _IpsecCryptoProfiles{}

	err = json.Unmarshal(data, &varIpsecCryptoProfiles)

	if err != nil {
		return err
	}

	*o = IpsecCryptoProfiles(varIpsecCryptoProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ah")
		delete(additionalProperties, "device")
		delete(additionalProperties, "dh_group")
		delete(additionalProperties, "esp")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lifesize")
		delete(additionalProperties, "lifetime")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIpsecCryptoProfiles struct {
	value *IpsecCryptoProfiles
	isSet bool
}

func (v NullableIpsecCryptoProfiles) Get() *IpsecCryptoProfiles {
	return v.value
}

func (v *NullableIpsecCryptoProfiles) Set(val *IpsecCryptoProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableIpsecCryptoProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableIpsecCryptoProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpsecCryptoProfiles(val *IpsecCryptoProfiles) *NullableIpsecCryptoProfiles {
	return &NullableIpsecCryptoProfiles{value: val, isSet: true}
}

func (v NullableIpsecCryptoProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpsecCryptoProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
