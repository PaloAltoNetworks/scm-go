/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the BgpRouteMapsRouteMapInnerSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpRouteMapsRouteMapInnerSet{}

// BgpRouteMapsRouteMapInnerSet struct for BgpRouteMapsRouteMapInnerSet
type BgpRouteMapsRouteMapInnerSet struct {
	Aggregator    *BgpRouteMapsRouteMapInnerSetAggregator `json:"aggregator,omitempty"`
	AspathExclude []int32                                 `json:"aspath_exclude,omitempty"`
	AspathPrepend []int32                                 `json:"aspath_prepend,omitempty"`
	// Enable BGP atomic aggregate?
	AtomicAggregate *bool                                                             `json:"atomic_aggregate,omitempty"`
	Ipv4            *BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4 `json:"ipv4,omitempty"`
	LargeCommunity  []string                                                          `json:"large_community,omitempty"`
	// Local preference
	LocalPreference *int32                                                              `json:"local_preference,omitempty"`
	Metric          *BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric `json:"metric,omitempty"`
	// Origin
	Origin *string `json:"origin,omitempty"`
	// Originator ID
	OriginatorId *string `json:"originator_id,omitempty"`
	// Overwrite large community?
	OverwriteLargeCommunity *bool `json:"overwrite_large_community,omitempty"`
	// Overwrite regular community?
	OverwriteRegularCommunity *bool    `json:"overwrite_regular_community,omitempty"`
	RegularCommunity          []string `json:"regular_community,omitempty"`
	// Remove large community name
	RemoveLargeCommunity *string `json:"remove_large_community,omitempty"`
	// Remove regular community name
	RemoveRegularCommunity *string `json:"remove_regular_community,omitempty"`
	// Tag
	Tag *int32 `json:"tag,omitempty"`
	// Weight
	Weight               *int32 `json:"weight,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpRouteMapsRouteMapInnerSet BgpRouteMapsRouteMapInnerSet

// NewBgpRouteMapsRouteMapInnerSet instantiates a new BgpRouteMapsRouteMapInnerSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpRouteMapsRouteMapInnerSet() *BgpRouteMapsRouteMapInnerSet {
	this := BgpRouteMapsRouteMapInnerSet{}
	return &this
}

// NewBgpRouteMapsRouteMapInnerSetWithDefaults instantiates a new BgpRouteMapsRouteMapInnerSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpRouteMapsRouteMapInnerSetWithDefaults() *BgpRouteMapsRouteMapInnerSet {
	this := BgpRouteMapsRouteMapInnerSet{}
	return &this
}

// GetAggregator returns the Aggregator field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetAggregator() BgpRouteMapsRouteMapInnerSetAggregator {
	if o == nil || IsNil(o.Aggregator) {
		var ret BgpRouteMapsRouteMapInnerSetAggregator
		return ret
	}
	return *o.Aggregator
}

// GetAggregatorOk returns a tuple with the Aggregator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetAggregatorOk() (*BgpRouteMapsRouteMapInnerSetAggregator, bool) {
	if o == nil || IsNil(o.Aggregator) {
		return nil, false
	}
	return o.Aggregator, true
}

// HasAggregator returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasAggregator() bool {
	if o != nil && !IsNil(o.Aggregator) {
		return true
	}

	return false
}

// SetAggregator gets a reference to the given BgpRouteMapsRouteMapInnerSetAggregator and assigns it to the Aggregator field.
func (o *BgpRouteMapsRouteMapInnerSet) SetAggregator(v BgpRouteMapsRouteMapInnerSetAggregator) {
	o.Aggregator = &v
}

// GetAspathExclude returns the AspathExclude field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetAspathExclude() []int32 {
	if o == nil || IsNil(o.AspathExclude) {
		var ret []int32
		return ret
	}
	return o.AspathExclude
}

// GetAspathExcludeOk returns a tuple with the AspathExclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetAspathExcludeOk() ([]int32, bool) {
	if o == nil || IsNil(o.AspathExclude) {
		return nil, false
	}
	return o.AspathExclude, true
}

// HasAspathExclude returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasAspathExclude() bool {
	if o != nil && !IsNil(o.AspathExclude) {
		return true
	}

	return false
}

// SetAspathExclude gets a reference to the given []int32 and assigns it to the AspathExclude field.
func (o *BgpRouteMapsRouteMapInnerSet) SetAspathExclude(v []int32) {
	o.AspathExclude = v
}

// GetAspathPrepend returns the AspathPrepend field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetAspathPrepend() []int32 {
	if o == nil || IsNil(o.AspathPrepend) {
		var ret []int32
		return ret
	}
	return o.AspathPrepend
}

// GetAspathPrependOk returns a tuple with the AspathPrepend field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetAspathPrependOk() ([]int32, bool) {
	if o == nil || IsNil(o.AspathPrepend) {
		return nil, false
	}
	return o.AspathPrepend, true
}

// HasAspathPrepend returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasAspathPrepend() bool {
	if o != nil && !IsNil(o.AspathPrepend) {
		return true
	}

	return false
}

// SetAspathPrepend gets a reference to the given []int32 and assigns it to the AspathPrepend field.
func (o *BgpRouteMapsRouteMapInnerSet) SetAspathPrepend(v []int32) {
	o.AspathPrepend = v
}

// GetAtomicAggregate returns the AtomicAggregate field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetAtomicAggregate() bool {
	if o == nil || IsNil(o.AtomicAggregate) {
		var ret bool
		return ret
	}
	return *o.AtomicAggregate
}

// GetAtomicAggregateOk returns a tuple with the AtomicAggregate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetAtomicAggregateOk() (*bool, bool) {
	if o == nil || IsNil(o.AtomicAggregate) {
		return nil, false
	}
	return o.AtomicAggregate, true
}

// HasAtomicAggregate returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasAtomicAggregate() bool {
	if o != nil && !IsNil(o.AtomicAggregate) {
		return true
	}

	return false
}

// SetAtomicAggregate gets a reference to the given bool and assigns it to the AtomicAggregate field.
func (o *BgpRouteMapsRouteMapInnerSet) SetAtomicAggregate(v bool) {
	o.AtomicAggregate = &v
}

// GetIpv4 returns the Ipv4 field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetIpv4() BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4 {
	if o == nil || IsNil(o.Ipv4) {
		var ret BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4
		return ret
	}
	return *o.Ipv4
}

// GetIpv4Ok returns a tuple with the Ipv4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetIpv4Ok() (*BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4, bool) {
	if o == nil || IsNil(o.Ipv4) {
		return nil, false
	}
	return o.Ipv4, true
}

// HasIpv4 returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasIpv4() bool {
	if o != nil && !IsNil(o.Ipv4) {
		return true
	}

	return false
}

// SetIpv4 gets a reference to the given BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4 and assigns it to the Ipv4 field.
func (o *BgpRouteMapsRouteMapInnerSet) SetIpv4(v BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetIpv4) {
	o.Ipv4 = &v
}

// GetLargeCommunity returns the LargeCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetLargeCommunity() []string {
	if o == nil || IsNil(o.LargeCommunity) {
		var ret []string
		return ret
	}
	return o.LargeCommunity
}

// GetLargeCommunityOk returns a tuple with the LargeCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetLargeCommunityOk() ([]string, bool) {
	if o == nil || IsNil(o.LargeCommunity) {
		return nil, false
	}
	return o.LargeCommunity, true
}

// HasLargeCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasLargeCommunity() bool {
	if o != nil && !IsNil(o.LargeCommunity) {
		return true
	}

	return false
}

// SetLargeCommunity gets a reference to the given []string and assigns it to the LargeCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetLargeCommunity(v []string) {
	o.LargeCommunity = v
}

// GetLocalPreference returns the LocalPreference field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetLocalPreference() int32 {
	if o == nil || IsNil(o.LocalPreference) {
		var ret int32
		return ret
	}
	return *o.LocalPreference
}

// GetLocalPreferenceOk returns a tuple with the LocalPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetLocalPreferenceOk() (*int32, bool) {
	if o == nil || IsNil(o.LocalPreference) {
		return nil, false
	}
	return o.LocalPreference, true
}

// HasLocalPreference returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasLocalPreference() bool {
	if o != nil && !IsNil(o.LocalPreference) {
		return true
	}

	return false
}

// SetLocalPreference gets a reference to the given int32 and assigns it to the LocalPreference field.
func (o *BgpRouteMapsRouteMapInnerSet) SetLocalPreference(v int32) {
	o.LocalPreference = &v
}

// GetMetric returns the Metric field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetMetric() BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric {
	if o == nil || IsNil(o.Metric) {
		var ret BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric
		return ret
	}
	return *o.Metric
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetMetricOk() (*BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric, bool) {
	if o == nil || IsNil(o.Metric) {
		return nil, false
	}
	return o.Metric, true
}

// HasMetric returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasMetric() bool {
	if o != nil && !IsNil(o.Metric) {
		return true
	}

	return false
}

// SetMetric gets a reference to the given BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric and assigns it to the Metric field.
func (o *BgpRouteMapsRouteMapInnerSet) SetMetric(v BgpRouteMapRedistributionsConnectedStaticBgpRouteMapInnerSetMetric) {
	o.Metric = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetOrigin() string {
	if o == nil || IsNil(o.Origin) {
		var ret string
		return ret
	}
	return *o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetOriginOk() (*string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given string and assigns it to the Origin field.
func (o *BgpRouteMapsRouteMapInnerSet) SetOrigin(v string) {
	o.Origin = &v
}

// GetOriginatorId returns the OriginatorId field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetOriginatorId() string {
	if o == nil || IsNil(o.OriginatorId) {
		var ret string
		return ret
	}
	return *o.OriginatorId
}

// GetOriginatorIdOk returns a tuple with the OriginatorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetOriginatorIdOk() (*string, bool) {
	if o == nil || IsNil(o.OriginatorId) {
		return nil, false
	}
	return o.OriginatorId, true
}

// HasOriginatorId returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasOriginatorId() bool {
	if o != nil && !IsNil(o.OriginatorId) {
		return true
	}

	return false
}

// SetOriginatorId gets a reference to the given string and assigns it to the OriginatorId field.
func (o *BgpRouteMapsRouteMapInnerSet) SetOriginatorId(v string) {
	o.OriginatorId = &v
}

// GetOverwriteLargeCommunity returns the OverwriteLargeCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetOverwriteLargeCommunity() bool {
	if o == nil || IsNil(o.OverwriteLargeCommunity) {
		var ret bool
		return ret
	}
	return *o.OverwriteLargeCommunity
}

// GetOverwriteLargeCommunityOk returns a tuple with the OverwriteLargeCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetOverwriteLargeCommunityOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteLargeCommunity) {
		return nil, false
	}
	return o.OverwriteLargeCommunity, true
}

// HasOverwriteLargeCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasOverwriteLargeCommunity() bool {
	if o != nil && !IsNil(o.OverwriteLargeCommunity) {
		return true
	}

	return false
}

// SetOverwriteLargeCommunity gets a reference to the given bool and assigns it to the OverwriteLargeCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetOverwriteLargeCommunity(v bool) {
	o.OverwriteLargeCommunity = &v
}

// GetOverwriteRegularCommunity returns the OverwriteRegularCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetOverwriteRegularCommunity() bool {
	if o == nil || IsNil(o.OverwriteRegularCommunity) {
		var ret bool
		return ret
	}
	return *o.OverwriteRegularCommunity
}

// GetOverwriteRegularCommunityOk returns a tuple with the OverwriteRegularCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetOverwriteRegularCommunityOk() (*bool, bool) {
	if o == nil || IsNil(o.OverwriteRegularCommunity) {
		return nil, false
	}
	return o.OverwriteRegularCommunity, true
}

// HasOverwriteRegularCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasOverwriteRegularCommunity() bool {
	if o != nil && !IsNil(o.OverwriteRegularCommunity) {
		return true
	}

	return false
}

// SetOverwriteRegularCommunity gets a reference to the given bool and assigns it to the OverwriteRegularCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetOverwriteRegularCommunity(v bool) {
	o.OverwriteRegularCommunity = &v
}

// GetRegularCommunity returns the RegularCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetRegularCommunity() []string {
	if o == nil || IsNil(o.RegularCommunity) {
		var ret []string
		return ret
	}
	return o.RegularCommunity
}

// GetRegularCommunityOk returns a tuple with the RegularCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetRegularCommunityOk() ([]string, bool) {
	if o == nil || IsNil(o.RegularCommunity) {
		return nil, false
	}
	return o.RegularCommunity, true
}

// HasRegularCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasRegularCommunity() bool {
	if o != nil && !IsNil(o.RegularCommunity) {
		return true
	}

	return false
}

// SetRegularCommunity gets a reference to the given []string and assigns it to the RegularCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetRegularCommunity(v []string) {
	o.RegularCommunity = v
}

// GetRemoveLargeCommunity returns the RemoveLargeCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetRemoveLargeCommunity() string {
	if o == nil || IsNil(o.RemoveLargeCommunity) {
		var ret string
		return ret
	}
	return *o.RemoveLargeCommunity
}

// GetRemoveLargeCommunityOk returns a tuple with the RemoveLargeCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetRemoveLargeCommunityOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveLargeCommunity) {
		return nil, false
	}
	return o.RemoveLargeCommunity, true
}

// HasRemoveLargeCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasRemoveLargeCommunity() bool {
	if o != nil && !IsNil(o.RemoveLargeCommunity) {
		return true
	}

	return false
}

// SetRemoveLargeCommunity gets a reference to the given string and assigns it to the RemoveLargeCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetRemoveLargeCommunity(v string) {
	o.RemoveLargeCommunity = &v
}

// GetRemoveRegularCommunity returns the RemoveRegularCommunity field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetRemoveRegularCommunity() string {
	if o == nil || IsNil(o.RemoveRegularCommunity) {
		var ret string
		return ret
	}
	return *o.RemoveRegularCommunity
}

// GetRemoveRegularCommunityOk returns a tuple with the RemoveRegularCommunity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetRemoveRegularCommunityOk() (*string, bool) {
	if o == nil || IsNil(o.RemoveRegularCommunity) {
		return nil, false
	}
	return o.RemoveRegularCommunity, true
}

// HasRemoveRegularCommunity returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasRemoveRegularCommunity() bool {
	if o != nil && !IsNil(o.RemoveRegularCommunity) {
		return true
	}

	return false
}

// SetRemoveRegularCommunity gets a reference to the given string and assigns it to the RemoveRegularCommunity field.
func (o *BgpRouteMapsRouteMapInnerSet) SetRemoveRegularCommunity(v string) {
	o.RemoveRegularCommunity = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetTag() int32 {
	if o == nil || IsNil(o.Tag) {
		var ret int32
		return ret
	}
	return *o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetTagOk() (*int32, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given int32 and assigns it to the Tag field.
func (o *BgpRouteMapsRouteMapInnerSet) SetTag(v int32) {
	o.Tag = &v
}

// GetWeight returns the Weight field value if set, zero value otherwise.
func (o *BgpRouteMapsRouteMapInnerSet) GetWeight() int32 {
	if o == nil || IsNil(o.Weight) {
		var ret int32
		return ret
	}
	return *o.Weight
}

// GetWeightOk returns a tuple with the Weight field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpRouteMapsRouteMapInnerSet) GetWeightOk() (*int32, bool) {
	if o == nil || IsNil(o.Weight) {
		return nil, false
	}
	return o.Weight, true
}

// HasWeight returns a boolean if a field has been set.
func (o *BgpRouteMapsRouteMapInnerSet) HasWeight() bool {
	if o != nil && !IsNil(o.Weight) {
		return true
	}

	return false
}

// SetWeight gets a reference to the given int32 and assigns it to the Weight field.
func (o *BgpRouteMapsRouteMapInnerSet) SetWeight(v int32) {
	o.Weight = &v
}

func (o BgpRouteMapsRouteMapInnerSet) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpRouteMapsRouteMapInnerSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Aggregator) {
		toSerialize["aggregator"] = o.Aggregator
	}
	if !IsNil(o.AspathExclude) {
		toSerialize["aspath_exclude"] = o.AspathExclude
	}
	if !IsNil(o.AspathPrepend) {
		toSerialize["aspath_prepend"] = o.AspathPrepend
	}
	if !IsNil(o.AtomicAggregate) {
		toSerialize["atomic_aggregate"] = o.AtomicAggregate
	}
	if !IsNil(o.Ipv4) {
		toSerialize["ipv4"] = o.Ipv4
	}
	if !IsNil(o.LargeCommunity) {
		toSerialize["large_community"] = o.LargeCommunity
	}
	if !IsNil(o.LocalPreference) {
		toSerialize["local_preference"] = o.LocalPreference
	}
	if !IsNil(o.Metric) {
		toSerialize["metric"] = o.Metric
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.OriginatorId) {
		toSerialize["originator_id"] = o.OriginatorId
	}
	if !IsNil(o.OverwriteLargeCommunity) {
		toSerialize["overwrite_large_community"] = o.OverwriteLargeCommunity
	}
	if !IsNil(o.OverwriteRegularCommunity) {
		toSerialize["overwrite_regular_community"] = o.OverwriteRegularCommunity
	}
	if !IsNil(o.RegularCommunity) {
		toSerialize["regular_community"] = o.RegularCommunity
	}
	if !IsNil(o.RemoveLargeCommunity) {
		toSerialize["remove_large_community"] = o.RemoveLargeCommunity
	}
	if !IsNil(o.RemoveRegularCommunity) {
		toSerialize["remove_regular_community"] = o.RemoveRegularCommunity
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}
	if !IsNil(o.Weight) {
		toSerialize["weight"] = o.Weight
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpRouteMapsRouteMapInnerSet) UnmarshalJSON(data []byte) (err error) {
	varBgpRouteMapsRouteMapInnerSet := _BgpRouteMapsRouteMapInnerSet{}

	err = json.Unmarshal(data, &varBgpRouteMapsRouteMapInnerSet)

	if err != nil {
		return err
	}

	*o = BgpRouteMapsRouteMapInnerSet(varBgpRouteMapsRouteMapInnerSet)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "aggregator")
		delete(additionalProperties, "aspath_exclude")
		delete(additionalProperties, "aspath_prepend")
		delete(additionalProperties, "atomic_aggregate")
		delete(additionalProperties, "ipv4")
		delete(additionalProperties, "large_community")
		delete(additionalProperties, "local_preference")
		delete(additionalProperties, "metric")
		delete(additionalProperties, "origin")
		delete(additionalProperties, "originator_id")
		delete(additionalProperties, "overwrite_large_community")
		delete(additionalProperties, "overwrite_regular_community")
		delete(additionalProperties, "regular_community")
		delete(additionalProperties, "remove_large_community")
		delete(additionalProperties, "remove_regular_community")
		delete(additionalProperties, "tag")
		delete(additionalProperties, "weight")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpRouteMapsRouteMapInnerSet struct {
	value *BgpRouteMapsRouteMapInnerSet
	isSet bool
}

func (v NullableBgpRouteMapsRouteMapInnerSet) Get() *BgpRouteMapsRouteMapInnerSet {
	return v.value
}

func (v *NullableBgpRouteMapsRouteMapInnerSet) Set(val *BgpRouteMapsRouteMapInnerSet) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpRouteMapsRouteMapInnerSet) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpRouteMapsRouteMapInnerSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpRouteMapsRouteMapInnerSet(val *BgpRouteMapsRouteMapInnerSet) *NullableBgpRouteMapsRouteMapInnerSet {
	return &NullableBgpRouteMapsRouteMapInnerSet{value: val, isSet: true}
}

func (v NullableBgpRouteMapsRouteMapInnerSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpRouteMapsRouteMapInnerSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
