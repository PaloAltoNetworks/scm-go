/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the NatRulesDestinationTranslationDnsRewrite type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NatRulesDestinationTranslationDnsRewrite{}

// NatRulesDestinationTranslationDnsRewrite struct for NatRulesDestinationTranslationDnsRewrite
type NatRulesDestinationTranslationDnsRewrite struct {
	Direction            *string `json:"direction,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _NatRulesDestinationTranslationDnsRewrite NatRulesDestinationTranslationDnsRewrite

// NewNatRulesDestinationTranslationDnsRewrite instantiates a new NatRulesDestinationTranslationDnsRewrite object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNatRulesDestinationTranslationDnsRewrite() *NatRulesDestinationTranslationDnsRewrite {
	this := NatRulesDestinationTranslationDnsRewrite{}
	return &this
}

// NewNatRulesDestinationTranslationDnsRewriteWithDefaults instantiates a new NatRulesDestinationTranslationDnsRewrite object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNatRulesDestinationTranslationDnsRewriteWithDefaults() *NatRulesDestinationTranslationDnsRewrite {
	this := NatRulesDestinationTranslationDnsRewrite{}
	return &this
}

// GetDirection returns the Direction field value if set, zero value otherwise.
func (o *NatRulesDestinationTranslationDnsRewrite) GetDirection() string {
	if o == nil || IsNil(o.Direction) {
		var ret string
		return ret
	}
	return *o.Direction
}

// GetDirectionOk returns a tuple with the Direction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NatRulesDestinationTranslationDnsRewrite) GetDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.Direction) {
		return nil, false
	}
	return o.Direction, true
}

// HasDirection returns a boolean if a field has been set.
func (o *NatRulesDestinationTranslationDnsRewrite) HasDirection() bool {
	if o != nil && !IsNil(o.Direction) {
		return true
	}

	return false
}

// SetDirection gets a reference to the given string and assigns it to the Direction field.
func (o *NatRulesDestinationTranslationDnsRewrite) SetDirection(v string) {
	o.Direction = &v
}

func (o NatRulesDestinationTranslationDnsRewrite) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NatRulesDestinationTranslationDnsRewrite) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Direction) {
		toSerialize["direction"] = o.Direction
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *NatRulesDestinationTranslationDnsRewrite) UnmarshalJSON(data []byte) (err error) {
	varNatRulesDestinationTranslationDnsRewrite := _NatRulesDestinationTranslationDnsRewrite{}

	err = json.Unmarshal(data, &varNatRulesDestinationTranslationDnsRewrite)

	if err != nil {
		return err
	}

	*o = NatRulesDestinationTranslationDnsRewrite(varNatRulesDestinationTranslationDnsRewrite)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "direction")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableNatRulesDestinationTranslationDnsRewrite struct {
	value *NatRulesDestinationTranslationDnsRewrite
	isSet bool
}

func (v NullableNatRulesDestinationTranslationDnsRewrite) Get() *NatRulesDestinationTranslationDnsRewrite {
	return v.value
}

func (v *NullableNatRulesDestinationTranslationDnsRewrite) Set(val *NatRulesDestinationTranslationDnsRewrite) {
	v.value = val
	v.isSet = true
}

func (v NullableNatRulesDestinationTranslationDnsRewrite) IsSet() bool {
	return v.isSet
}

func (v *NullableNatRulesDestinationTranslationDnsRewrite) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNatRulesDestinationTranslationDnsRewrite(val *NatRulesDestinationTranslationDnsRewrite) *NullableNatRulesDestinationTranslationDnsRewrite {
	return &NullableNatRulesDestinationTranslationDnsRewrite{value: val, isSet: true}
}

func (v NullableNatRulesDestinationTranslationDnsRewrite) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNatRulesDestinationTranslationDnsRewrite) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
