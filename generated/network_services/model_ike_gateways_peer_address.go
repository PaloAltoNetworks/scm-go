/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysPeerAddress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysPeerAddress{}

// IkeGatewaysPeerAddress struct for IkeGatewaysPeerAddress
type IkeGatewaysPeerAddress struct {
	Dynamic map[string]interface{} `json:"dynamic,omitempty"`
	// peer gateway FQDN name
	Fqdn *string `json:"fqdn,omitempty"`
	// peer gateway has static IP address
	Ip                   *string `json:"ip,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysPeerAddress IkeGatewaysPeerAddress

// NewIkeGatewaysPeerAddress instantiates a new IkeGatewaysPeerAddress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysPeerAddress() *IkeGatewaysPeerAddress {
	this := IkeGatewaysPeerAddress{}
	return &this
}

// NewIkeGatewaysPeerAddressWithDefaults instantiates a new IkeGatewaysPeerAddress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysPeerAddressWithDefaults() *IkeGatewaysPeerAddress {
	this := IkeGatewaysPeerAddress{}
	return &this
}

// GetDynamic returns the Dynamic field value if set, zero value otherwise.
func (o *IkeGatewaysPeerAddress) GetDynamic() map[string]interface{} {
	if o == nil || IsNil(o.Dynamic) {
		var ret map[string]interface{}
		return ret
	}
	return o.Dynamic
}

// GetDynamicOk returns a tuple with the Dynamic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysPeerAddress) GetDynamicOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Dynamic) {
		return map[string]interface{}{}, false
	}
	return o.Dynamic, true
}

// HasDynamic returns a boolean if a field has been set.
func (o *IkeGatewaysPeerAddress) HasDynamic() bool {
	if o != nil && !IsNil(o.Dynamic) {
		return true
	}

	return false
}

// SetDynamic gets a reference to the given map[string]interface{} and assigns it to the Dynamic field.
func (o *IkeGatewaysPeerAddress) SetDynamic(v map[string]interface{}) {
	o.Dynamic = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise.
func (o *IkeGatewaysPeerAddress) GetFqdn() string {
	if o == nil || IsNil(o.Fqdn) {
		var ret string
		return ret
	}
	return *o.Fqdn
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysPeerAddress) GetFqdnOk() (*string, bool) {
	if o == nil || IsNil(o.Fqdn) {
		return nil, false
	}
	return o.Fqdn, true
}

// HasFqdn returns a boolean if a field has been set.
func (o *IkeGatewaysPeerAddress) HasFqdn() bool {
	if o != nil && !IsNil(o.Fqdn) {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given string and assigns it to the Fqdn field.
func (o *IkeGatewaysPeerAddress) SetFqdn(v string) {
	o.Fqdn = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *IkeGatewaysPeerAddress) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysPeerAddress) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *IkeGatewaysPeerAddress) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *IkeGatewaysPeerAddress) SetIp(v string) {
	o.Ip = &v
}

func (o IkeGatewaysPeerAddress) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysPeerAddress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dynamic) {
		toSerialize["dynamic"] = o.Dynamic
	}
	if !IsNil(o.Fqdn) {
		toSerialize["fqdn"] = o.Fqdn
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysPeerAddress) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysPeerAddress := _IkeGatewaysPeerAddress{}

	err = json.Unmarshal(data, &varIkeGatewaysPeerAddress)

	if err != nil {
		return err
	}

	*o = IkeGatewaysPeerAddress(varIkeGatewaysPeerAddress)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dynamic")
		delete(additionalProperties, "fqdn")
		delete(additionalProperties, "ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysPeerAddress struct {
	value *IkeGatewaysPeerAddress
	isSet bool
}

func (v NullableIkeGatewaysPeerAddress) Get() *IkeGatewaysPeerAddress {
	return v.value
}

func (v *NullableIkeGatewaysPeerAddress) Set(val *IkeGatewaysPeerAddress) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysPeerAddress) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysPeerAddress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysPeerAddress(val *IkeGatewaysPeerAddress) *NullableIkeGatewaysPeerAddress {
	return &NullableIkeGatewaysPeerAddress{value: val, isSet: true}
}

func (v NullableIkeGatewaysPeerAddress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysPeerAddress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
