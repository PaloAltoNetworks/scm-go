/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the SslDecryptionSettingsSslExcludeCertInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslDecryptionSettingsSslExcludeCertInner{}

// SslDecryptionSettingsSslExcludeCertInner struct for SslDecryptionSettingsSslExcludeCertInner
type SslDecryptionSettingsSslExcludeCertInner struct {
	Description          *string `json:"description,omitempty"`
	Exclude              *bool   `json:"exclude,omitempty"`
	Name                 *string `json:"name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SslDecryptionSettingsSslExcludeCertInner SslDecryptionSettingsSslExcludeCertInner

// NewSslDecryptionSettingsSslExcludeCertInner instantiates a new SslDecryptionSettingsSslExcludeCertInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslDecryptionSettingsSslExcludeCertInner() *SslDecryptionSettingsSslExcludeCertInner {
	this := SslDecryptionSettingsSslExcludeCertInner{}
	return &this
}

// NewSslDecryptionSettingsSslExcludeCertInnerWithDefaults instantiates a new SslDecryptionSettingsSslExcludeCertInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslDecryptionSettingsSslExcludeCertInnerWithDefaults() *SslDecryptionSettingsSslExcludeCertInner {
	this := SslDecryptionSettingsSslExcludeCertInner{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SslDecryptionSettingsSslExcludeCertInner) SetDescription(v string) {
	o.Description = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetExclude() bool {
	if o == nil || IsNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetExcludeOk() (*bool, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *SslDecryptionSettingsSslExcludeCertInner) SetExclude(v bool) {
	o.Exclude = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SslDecryptionSettingsSslExcludeCertInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SslDecryptionSettingsSslExcludeCertInner) SetName(v string) {
	o.Name = &v
}

func (o SslDecryptionSettingsSslExcludeCertInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslDecryptionSettingsSslExcludeCertInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SslDecryptionSettingsSslExcludeCertInner) UnmarshalJSON(data []byte) (err error) {
	varSslDecryptionSettingsSslExcludeCertInner := _SslDecryptionSettingsSslExcludeCertInner{}

	err = json.Unmarshal(data, &varSslDecryptionSettingsSslExcludeCertInner)

	if err != nil {
		return err
	}

	*o = SslDecryptionSettingsSslExcludeCertInner(varSslDecryptionSettingsSslExcludeCertInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "description")
		delete(additionalProperties, "exclude")
		delete(additionalProperties, "name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSslDecryptionSettingsSslExcludeCertInner struct {
	value *SslDecryptionSettingsSslExcludeCertInner
	isSet bool
}

func (v NullableSslDecryptionSettingsSslExcludeCertInner) Get() *SslDecryptionSettingsSslExcludeCertInner {
	return v.value
}

func (v *NullableSslDecryptionSettingsSslExcludeCertInner) Set(val *SslDecryptionSettingsSslExcludeCertInner) {
	v.value = val
	v.isSet = true
}

func (v NullableSslDecryptionSettingsSslExcludeCertInner) IsSet() bool {
	return v.isSet
}

func (v *NullableSslDecryptionSettingsSslExcludeCertInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslDecryptionSettingsSslExcludeCertInner(val *SslDecryptionSettingsSslExcludeCertInner) *NullableSslDecryptionSettingsSslExcludeCertInner {
	return &NullableSslDecryptionSettingsSslExcludeCertInner{value: val, isSet: true}
}

func (v NullableSslDecryptionSettingsSslExcludeCertInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslDecryptionSettingsSslExcludeCertInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
