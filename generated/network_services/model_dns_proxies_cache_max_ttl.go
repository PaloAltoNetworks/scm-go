/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsProxiesCacheMaxTtl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsProxiesCacheMaxTtl{}

// DnsProxiesCacheMaxTtl struct for DnsProxiesCacheMaxTtl
type DnsProxiesCacheMaxTtl struct {
	// Enable max ttl for this DNS object
	Enabled bool `json:"enabled"`
	// Time in seconds after which entry is cleared
	TimeToLive           *int32 `json:"time_to_live,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsProxiesCacheMaxTtl DnsProxiesCacheMaxTtl

// NewDnsProxiesCacheMaxTtl instantiates a new DnsProxiesCacheMaxTtl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsProxiesCacheMaxTtl(enabled bool) *DnsProxiesCacheMaxTtl {
	this := DnsProxiesCacheMaxTtl{}
	this.Enabled = enabled
	return &this
}

// NewDnsProxiesCacheMaxTtlWithDefaults instantiates a new DnsProxiesCacheMaxTtl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsProxiesCacheMaxTtlWithDefaults() *DnsProxiesCacheMaxTtl {
	this := DnsProxiesCacheMaxTtl{}
	var enabled bool = false
	this.Enabled = enabled
	return &this
}

// GetEnabled returns the Enabled field value
func (o *DnsProxiesCacheMaxTtl) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *DnsProxiesCacheMaxTtl) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *DnsProxiesCacheMaxTtl) SetEnabled(v bool) {
	o.Enabled = v
}

// GetTimeToLive returns the TimeToLive field value if set, zero value otherwise.
func (o *DnsProxiesCacheMaxTtl) GetTimeToLive() int32 {
	if o == nil || IsNil(o.TimeToLive) {
		var ret int32
		return ret
	}
	return *o.TimeToLive
}

// GetTimeToLiveOk returns a tuple with the TimeToLive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxiesCacheMaxTtl) GetTimeToLiveOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeToLive) {
		return nil, false
	}
	return o.TimeToLive, true
}

// HasTimeToLive returns a boolean if a field has been set.
func (o *DnsProxiesCacheMaxTtl) HasTimeToLive() bool {
	if o != nil && !IsNil(o.TimeToLive) {
		return true
	}

	return false
}

// SetTimeToLive gets a reference to the given int32 and assigns it to the TimeToLive field.
func (o *DnsProxiesCacheMaxTtl) SetTimeToLive(v int32) {
	o.TimeToLive = &v
}

func (o DnsProxiesCacheMaxTtl) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsProxiesCacheMaxTtl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.TimeToLive) {
		toSerialize["time_to_live"] = o.TimeToLive
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsProxiesCacheMaxTtl) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsProxiesCacheMaxTtl := _DnsProxiesCacheMaxTtl{}

	err = json.Unmarshal(data, &varDnsProxiesCacheMaxTtl)

	if err != nil {
		return err
	}

	*o = DnsProxiesCacheMaxTtl(varDnsProxiesCacheMaxTtl)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "enabled")
		delete(additionalProperties, "time_to_live")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsProxiesCacheMaxTtl struct {
	value *DnsProxiesCacheMaxTtl
	isSet bool
}

func (v NullableDnsProxiesCacheMaxTtl) Get() *DnsProxiesCacheMaxTtl {
	return v.value
}

func (v *NullableDnsProxiesCacheMaxTtl) Set(val *DnsProxiesCacheMaxTtl) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsProxiesCacheMaxTtl) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsProxiesCacheMaxTtl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsProxiesCacheMaxTtl(val *DnsProxiesCacheMaxTtl) *NullableDnsProxiesCacheMaxTtl {
	return &NullableDnsProxiesCacheMaxTtl{value: val, isSet: true}
}

func (v NullableDnsProxiesCacheMaxTtl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsProxiesCacheMaxTtl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
