/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LogicalRoutersVrfInnerRoutingTable type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogicalRoutersVrfInnerRoutingTable{}

// LogicalRoutersVrfInnerRoutingTable struct for LogicalRoutersVrfInnerRoutingTable
type LogicalRoutersVrfInnerRoutingTable struct {
	Ip                   *LogicalRoutersVrfInnerRoutingTableIp   `json:"ip,omitempty"`
	Ipv6                 *LogicalRoutersVrfInnerRoutingTableIpv6 `json:"ipv6,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogicalRoutersVrfInnerRoutingTable LogicalRoutersVrfInnerRoutingTable

// NewLogicalRoutersVrfInnerRoutingTable instantiates a new LogicalRoutersVrfInnerRoutingTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogicalRoutersVrfInnerRoutingTable() *LogicalRoutersVrfInnerRoutingTable {
	this := LogicalRoutersVrfInnerRoutingTable{}
	return &this
}

// NewLogicalRoutersVrfInnerRoutingTableWithDefaults instantiates a new LogicalRoutersVrfInnerRoutingTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogicalRoutersVrfInnerRoutingTableWithDefaults() *LogicalRoutersVrfInnerRoutingTable {
	this := LogicalRoutersVrfInnerRoutingTable{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTable) GetIp() LogicalRoutersVrfInnerRoutingTableIp {
	if o == nil || IsNil(o.Ip) {
		var ret LogicalRoutersVrfInnerRoutingTableIp
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTable) GetIpOk() (*LogicalRoutersVrfInnerRoutingTableIp, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTable) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given LogicalRoutersVrfInnerRoutingTableIp and assigns it to the Ip field.
func (o *LogicalRoutersVrfInnerRoutingTable) SetIp(v LogicalRoutersVrfInnerRoutingTableIp) {
	o.Ip = &v
}

// GetIpv6 returns the Ipv6 field value if set, zero value otherwise.
func (o *LogicalRoutersVrfInnerRoutingTable) GetIpv6() LogicalRoutersVrfInnerRoutingTableIpv6 {
	if o == nil || IsNil(o.Ipv6) {
		var ret LogicalRoutersVrfInnerRoutingTableIpv6
		return ret
	}
	return *o.Ipv6
}

// GetIpv6Ok returns a tuple with the Ipv6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogicalRoutersVrfInnerRoutingTable) GetIpv6Ok() (*LogicalRoutersVrfInnerRoutingTableIpv6, bool) {
	if o == nil || IsNil(o.Ipv6) {
		return nil, false
	}
	return o.Ipv6, true
}

// HasIpv6 returns a boolean if a field has been set.
func (o *LogicalRoutersVrfInnerRoutingTable) HasIpv6() bool {
	if o != nil && !IsNil(o.Ipv6) {
		return true
	}

	return false
}

// SetIpv6 gets a reference to the given LogicalRoutersVrfInnerRoutingTableIpv6 and assigns it to the Ipv6 field.
func (o *LogicalRoutersVrfInnerRoutingTable) SetIpv6(v LogicalRoutersVrfInnerRoutingTableIpv6) {
	o.Ipv6 = &v
}

func (o LogicalRoutersVrfInnerRoutingTable) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogicalRoutersVrfInnerRoutingTable) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Ipv6) {
		toSerialize["ipv6"] = o.Ipv6
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogicalRoutersVrfInnerRoutingTable) UnmarshalJSON(data []byte) (err error) {
	varLogicalRoutersVrfInnerRoutingTable := _LogicalRoutersVrfInnerRoutingTable{}

	err = json.Unmarshal(data, &varLogicalRoutersVrfInnerRoutingTable)

	if err != nil {
		return err
	}

	*o = LogicalRoutersVrfInnerRoutingTable(varLogicalRoutersVrfInnerRoutingTable)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		delete(additionalProperties, "ipv6")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogicalRoutersVrfInnerRoutingTable struct {
	value *LogicalRoutersVrfInnerRoutingTable
	isSet bool
}

func (v NullableLogicalRoutersVrfInnerRoutingTable) Get() *LogicalRoutersVrfInnerRoutingTable {
	return v.value
}

func (v *NullableLogicalRoutersVrfInnerRoutingTable) Set(val *LogicalRoutersVrfInnerRoutingTable) {
	v.value = val
	v.isSet = true
}

func (v NullableLogicalRoutersVrfInnerRoutingTable) IsSet() bool {
	return v.isSet
}

func (v *NullableLogicalRoutersVrfInnerRoutingTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogicalRoutersVrfInnerRoutingTable(val *LogicalRoutersVrfInnerRoutingTable) *NullableLogicalRoutersVrfInnerRoutingTable {
	return &NullableLogicalRoutersVrfInnerRoutingTable{value: val, isSet: true}
}

func (v NullableLogicalRoutersVrfInnerRoutingTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogicalRoutersVrfInnerRoutingTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
