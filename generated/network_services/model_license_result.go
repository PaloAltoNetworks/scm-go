/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LicenseResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseResult{}

// LicenseResult struct for LicenseResult
type LicenseResult struct {
	ConfiguredLicenses []LicenseInfo `json:"configured_licenses,omitempty"`
	LicenseModel       []string      `json:"license_model,omitempty"`
	// Indicates the currently active license model.  Can be \"agg-bandwidth\", \"site\", or \"none\".
	OperationalLicense   *string       `json:"operational_license,omitempty"`
	PurchasedLicenses    []LicenseInfo `json:"purchased_licenses,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseResult LicenseResult

// NewLicenseResult instantiates a new LicenseResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseResult() *LicenseResult {
	this := LicenseResult{}
	return &this
}

// NewLicenseResultWithDefaults instantiates a new LicenseResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseResultWithDefaults() *LicenseResult {
	this := LicenseResult{}
	return &this
}

// GetConfiguredLicenses returns the ConfiguredLicenses field value if set, zero value otherwise.
func (o *LicenseResult) GetConfiguredLicenses() []LicenseInfo {
	if o == nil || IsNil(o.ConfiguredLicenses) {
		var ret []LicenseInfo
		return ret
	}
	return o.ConfiguredLicenses
}

// GetConfiguredLicensesOk returns a tuple with the ConfiguredLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseResult) GetConfiguredLicensesOk() ([]LicenseInfo, bool) {
	if o == nil || IsNil(o.ConfiguredLicenses) {
		return nil, false
	}
	return o.ConfiguredLicenses, true
}

// HasConfiguredLicenses returns a boolean if a field has been set.
func (o *LicenseResult) HasConfiguredLicenses() bool {
	if o != nil && !IsNil(o.ConfiguredLicenses) {
		return true
	}

	return false
}

// SetConfiguredLicenses gets a reference to the given []LicenseInfo and assigns it to the ConfiguredLicenses field.
func (o *LicenseResult) SetConfiguredLicenses(v []LicenseInfo) {
	o.ConfiguredLicenses = v
}

// GetLicenseModel returns the LicenseModel field value if set, zero value otherwise.
func (o *LicenseResult) GetLicenseModel() []string {
	if o == nil || IsNil(o.LicenseModel) {
		var ret []string
		return ret
	}
	return o.LicenseModel
}

// GetLicenseModelOk returns a tuple with the LicenseModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseResult) GetLicenseModelOk() ([]string, bool) {
	if o == nil || IsNil(o.LicenseModel) {
		return nil, false
	}
	return o.LicenseModel, true
}

// HasLicenseModel returns a boolean if a field has been set.
func (o *LicenseResult) HasLicenseModel() bool {
	if o != nil && !IsNil(o.LicenseModel) {
		return true
	}

	return false
}

// SetLicenseModel gets a reference to the given []string and assigns it to the LicenseModel field.
func (o *LicenseResult) SetLicenseModel(v []string) {
	o.LicenseModel = v
}

// GetOperationalLicense returns the OperationalLicense field value if set, zero value otherwise.
func (o *LicenseResult) GetOperationalLicense() string {
	if o == nil || IsNil(o.OperationalLicense) {
		var ret string
		return ret
	}
	return *o.OperationalLicense
}

// GetOperationalLicenseOk returns a tuple with the OperationalLicense field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseResult) GetOperationalLicenseOk() (*string, bool) {
	if o == nil || IsNil(o.OperationalLicense) {
		return nil, false
	}
	return o.OperationalLicense, true
}

// HasOperationalLicense returns a boolean if a field has been set.
func (o *LicenseResult) HasOperationalLicense() bool {
	if o != nil && !IsNil(o.OperationalLicense) {
		return true
	}

	return false
}

// SetOperationalLicense gets a reference to the given string and assigns it to the OperationalLicense field.
func (o *LicenseResult) SetOperationalLicense(v string) {
	o.OperationalLicense = &v
}

// GetPurchasedLicenses returns the PurchasedLicenses field value if set, zero value otherwise.
func (o *LicenseResult) GetPurchasedLicenses() []LicenseInfo {
	if o == nil || IsNil(o.PurchasedLicenses) {
		var ret []LicenseInfo
		return ret
	}
	return o.PurchasedLicenses
}

// GetPurchasedLicensesOk returns a tuple with the PurchasedLicenses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseResult) GetPurchasedLicensesOk() ([]LicenseInfo, bool) {
	if o == nil || IsNil(o.PurchasedLicenses) {
		return nil, false
	}
	return o.PurchasedLicenses, true
}

// HasPurchasedLicenses returns a boolean if a field has been set.
func (o *LicenseResult) HasPurchasedLicenses() bool {
	if o != nil && !IsNil(o.PurchasedLicenses) {
		return true
	}

	return false
}

// SetPurchasedLicenses gets a reference to the given []LicenseInfo and assigns it to the PurchasedLicenses field.
func (o *LicenseResult) SetPurchasedLicenses(v []LicenseInfo) {
	o.PurchasedLicenses = v
}

func (o LicenseResult) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConfiguredLicenses) {
		toSerialize["configured_licenses"] = o.ConfiguredLicenses
	}
	if !IsNil(o.LicenseModel) {
		toSerialize["license_model"] = o.LicenseModel
	}
	if !IsNil(o.OperationalLicense) {
		toSerialize["operational_license"] = o.OperationalLicense
	}
	if !IsNil(o.PurchasedLicenses) {
		toSerialize["purchased_licenses"] = o.PurchasedLicenses
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseResult) UnmarshalJSON(data []byte) (err error) {
	varLicenseResult := _LicenseResult{}

	err = json.Unmarshal(data, &varLicenseResult)

	if err != nil {
		return err
	}

	*o = LicenseResult(varLicenseResult)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "configured_licenses")
		delete(additionalProperties, "license_model")
		delete(additionalProperties, "operational_license")
		delete(additionalProperties, "purchased_licenses")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseResult struct {
	value *LicenseResult
	isSet bool
}

func (v NullableLicenseResult) Get() *LicenseResult {
	return v.value
}

func (v *NullableLicenseResult) Set(val *LicenseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseResult(val *LicenseResult) *NullableLicenseResult {
	return &NullableLicenseResult{value: val, isSet: true}
}

func (v NullableLicenseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
