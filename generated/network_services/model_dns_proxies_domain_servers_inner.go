/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DnsProxiesDomainServersInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsProxiesDomainServersInner{}

// DnsProxiesDomainServersInner struct for DnsProxiesDomainServersInner
type DnsProxiesDomainServersInner struct {
	// Enable caching for this DNS proxy rule?
	Cacheable *bool `json:"cacheable,omitempty"`
	// Domain names(s) that will be matched
	DomainName []string `json:"domain-name"`
	// Proxy rule name
	Name string `json:"name"`
	// Primary DNS server IP address
	Primary string `json:"primary"`
	// Secondary DNS server IP address
	Secondary            *string `json:"secondary,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DnsProxiesDomainServersInner DnsProxiesDomainServersInner

// NewDnsProxiesDomainServersInner instantiates a new DnsProxiesDomainServersInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsProxiesDomainServersInner(domainName []string, name string, primary string) *DnsProxiesDomainServersInner {
	this := DnsProxiesDomainServersInner{}
	this.DomainName = domainName
	this.Name = name
	this.Primary = primary
	return &this
}

// NewDnsProxiesDomainServersInnerWithDefaults instantiates a new DnsProxiesDomainServersInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsProxiesDomainServersInnerWithDefaults() *DnsProxiesDomainServersInner {
	this := DnsProxiesDomainServersInner{}
	return &this
}

// GetCacheable returns the Cacheable field value if set, zero value otherwise.
func (o *DnsProxiesDomainServersInner) GetCacheable() bool {
	if o == nil || IsNil(o.Cacheable) {
		var ret bool
		return ret
	}
	return *o.Cacheable
}

// GetCacheableOk returns a tuple with the Cacheable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxiesDomainServersInner) GetCacheableOk() (*bool, bool) {
	if o == nil || IsNil(o.Cacheable) {
		return nil, false
	}
	return o.Cacheable, true
}

// HasCacheable returns a boolean if a field has been set.
func (o *DnsProxiesDomainServersInner) HasCacheable() bool {
	if o != nil && !IsNil(o.Cacheable) {
		return true
	}

	return false
}

// SetCacheable gets a reference to the given bool and assigns it to the Cacheable field.
func (o *DnsProxiesDomainServersInner) SetCacheable(v bool) {
	o.Cacheable = &v
}

// GetDomainName returns the DomainName field value
func (o *DnsProxiesDomainServersInner) GetDomainName() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainName
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
func (o *DnsProxiesDomainServersInner) GetDomainNameOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainName, true
}

// SetDomainName sets field value
func (o *DnsProxiesDomainServersInner) SetDomainName(v []string) {
	o.DomainName = v
}

// GetName returns the Name field value
func (o *DnsProxiesDomainServersInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DnsProxiesDomainServersInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DnsProxiesDomainServersInner) SetName(v string) {
	o.Name = v
}

// GetPrimary returns the Primary field value
func (o *DnsProxiesDomainServersInner) GetPrimary() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *DnsProxiesDomainServersInner) GetPrimaryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *DnsProxiesDomainServersInner) SetPrimary(v string) {
	o.Primary = v
}

// GetSecondary returns the Secondary field value if set, zero value otherwise.
func (o *DnsProxiesDomainServersInner) GetSecondary() string {
	if o == nil || IsNil(o.Secondary) {
		var ret string
		return ret
	}
	return *o.Secondary
}

// GetSecondaryOk returns a tuple with the Secondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DnsProxiesDomainServersInner) GetSecondaryOk() (*string, bool) {
	if o == nil || IsNil(o.Secondary) {
		return nil, false
	}
	return o.Secondary, true
}

// HasSecondary returns a boolean if a field has been set.
func (o *DnsProxiesDomainServersInner) HasSecondary() bool {
	if o != nil && !IsNil(o.Secondary) {
		return true
	}

	return false
}

// SetSecondary gets a reference to the given string and assigns it to the Secondary field.
func (o *DnsProxiesDomainServersInner) SetSecondary(v string) {
	o.Secondary = &v
}

func (o DnsProxiesDomainServersInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsProxiesDomainServersInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cacheable) {
		toSerialize["cacheable"] = o.Cacheable
	}
	toSerialize["domain-name"] = o.DomainName
	toSerialize["name"] = o.Name
	toSerialize["primary"] = o.Primary
	if !IsNil(o.Secondary) {
		toSerialize["secondary"] = o.Secondary
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DnsProxiesDomainServersInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain-name",
		"name",
		"primary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsProxiesDomainServersInner := _DnsProxiesDomainServersInner{}

	err = json.Unmarshal(data, &varDnsProxiesDomainServersInner)

	if err != nil {
		return err
	}

	*o = DnsProxiesDomainServersInner(varDnsProxiesDomainServersInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "cacheable")
		delete(additionalProperties, "domain-name")
		delete(additionalProperties, "name")
		delete(additionalProperties, "primary")
		delete(additionalProperties, "secondary")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDnsProxiesDomainServersInner struct {
	value *DnsProxiesDomainServersInner
	isSet bool
}

func (v NullableDnsProxiesDomainServersInner) Get() *DnsProxiesDomainServersInner {
	return v.value
}

func (v *NullableDnsProxiesDomainServersInner) Set(val *DnsProxiesDomainServersInner) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsProxiesDomainServersInner) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsProxiesDomainServersInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsProxiesDomainServersInner(val *DnsProxiesDomainServersInner) *NullableDnsProxiesDomainServersInner {
	return &NullableDnsProxiesDomainServersInner{value: val, isSet: true}
}

func (v NullableDnsProxiesDomainServersInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsProxiesDomainServersInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
