/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the BgpAddressFamilyAllowasIn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpAddressFamilyAllowasIn{}

// BgpAddressFamilyAllowasIn struct for BgpAddressFamilyAllowasIn
type BgpAddressFamilyAllowasIn struct {
	// Number of times the firewalls own AS can be in an AS_PATH
	Occurrence           *int32                 `json:"occurrence,omitempty"`
	Origin               map[string]interface{} `json:"origin,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _BgpAddressFamilyAllowasIn BgpAddressFamilyAllowasIn

// NewBgpAddressFamilyAllowasIn instantiates a new BgpAddressFamilyAllowasIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpAddressFamilyAllowasIn() *BgpAddressFamilyAllowasIn {
	this := BgpAddressFamilyAllowasIn{}
	var occurrence int32 = 1
	this.Occurrence = &occurrence
	return &this
}

// NewBgpAddressFamilyAllowasInWithDefaults instantiates a new BgpAddressFamilyAllowasIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpAddressFamilyAllowasInWithDefaults() *BgpAddressFamilyAllowasIn {
	this := BgpAddressFamilyAllowasIn{}
	var occurrence int32 = 1
	this.Occurrence = &occurrence
	return &this
}

// GetOccurrence returns the Occurrence field value if set, zero value otherwise.
func (o *BgpAddressFamilyAllowasIn) GetOccurrence() int32 {
	if o == nil || IsNil(o.Occurrence) {
		var ret int32
		return ret
	}
	return *o.Occurrence
}

// GetOccurrenceOk returns a tuple with the Occurrence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamilyAllowasIn) GetOccurrenceOk() (*int32, bool) {
	if o == nil || IsNil(o.Occurrence) {
		return nil, false
	}
	return o.Occurrence, true
}

// HasOccurrence returns a boolean if a field has been set.
func (o *BgpAddressFamilyAllowasIn) HasOccurrence() bool {
	if o != nil && !IsNil(o.Occurrence) {
		return true
	}

	return false
}

// SetOccurrence gets a reference to the given int32 and assigns it to the Occurrence field.
func (o *BgpAddressFamilyAllowasIn) SetOccurrence(v int32) {
	o.Occurrence = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *BgpAddressFamilyAllowasIn) GetOrigin() map[string]interface{} {
	if o == nil || IsNil(o.Origin) {
		var ret map[string]interface{}
		return ret
	}
	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpAddressFamilyAllowasIn) GetOriginOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Origin) {
		return map[string]interface{}{}, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *BgpAddressFamilyAllowasIn) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given map[string]interface{} and assigns it to the Origin field.
func (o *BgpAddressFamilyAllowasIn) SetOrigin(v map[string]interface{}) {
	o.Origin = v
}

func (o BgpAddressFamilyAllowasIn) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpAddressFamilyAllowasIn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Occurrence) {
		toSerialize["occurrence"] = o.Occurrence
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *BgpAddressFamilyAllowasIn) UnmarshalJSON(data []byte) (err error) {
	varBgpAddressFamilyAllowasIn := _BgpAddressFamilyAllowasIn{}

	err = json.Unmarshal(data, &varBgpAddressFamilyAllowasIn)

	if err != nil {
		return err
	}

	*o = BgpAddressFamilyAllowasIn(varBgpAddressFamilyAllowasIn)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "occurrence")
		delete(additionalProperties, "origin")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableBgpAddressFamilyAllowasIn struct {
	value *BgpAddressFamilyAllowasIn
	isSet bool
}

func (v NullableBgpAddressFamilyAllowasIn) Get() *BgpAddressFamilyAllowasIn {
	return v.value
}

func (v *NullableBgpAddressFamilyAllowasIn) Set(val *BgpAddressFamilyAllowasIn) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpAddressFamilyAllowasIn) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpAddressFamilyAllowasIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpAddressFamilyAllowasIn(val *BgpAddressFamilyAllowasIn) *NullableBgpAddressFamilyAllowasIn {
	return &NullableBgpAddressFamilyAllowasIn{value: val, isSet: true}
}

func (v NullableBgpAddressFamilyAllowasIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpAddressFamilyAllowasIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
