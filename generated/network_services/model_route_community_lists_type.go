/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the RouteCommunityListsType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteCommunityListsType{}

// RouteCommunityListsType struct for RouteCommunityListsType
type RouteCommunityListsType struct {
	Extended             *RouteCommunityListsTypeExtended `json:"extended,omitempty"`
	Large                *RouteCommunityListsTypeLarge    `json:"large,omitempty"`
	Regular              *RouteCommunityListsTypeRegular  `json:"regular,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _RouteCommunityListsType RouteCommunityListsType

// NewRouteCommunityListsType instantiates a new RouteCommunityListsType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteCommunityListsType() *RouteCommunityListsType {
	this := RouteCommunityListsType{}
	return &this
}

// NewRouteCommunityListsTypeWithDefaults instantiates a new RouteCommunityListsType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteCommunityListsTypeWithDefaults() *RouteCommunityListsType {
	this := RouteCommunityListsType{}
	return &this
}

// GetExtended returns the Extended field value if set, zero value otherwise.
func (o *RouteCommunityListsType) GetExtended() RouteCommunityListsTypeExtended {
	if o == nil || IsNil(o.Extended) {
		var ret RouteCommunityListsTypeExtended
		return ret
	}
	return *o.Extended
}

// GetExtendedOk returns a tuple with the Extended field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCommunityListsType) GetExtendedOk() (*RouteCommunityListsTypeExtended, bool) {
	if o == nil || IsNil(o.Extended) {
		return nil, false
	}
	return o.Extended, true
}

// HasExtended returns a boolean if a field has been set.
func (o *RouteCommunityListsType) HasExtended() bool {
	if o != nil && !IsNil(o.Extended) {
		return true
	}

	return false
}

// SetExtended gets a reference to the given RouteCommunityListsTypeExtended and assigns it to the Extended field.
func (o *RouteCommunityListsType) SetExtended(v RouteCommunityListsTypeExtended) {
	o.Extended = &v
}

// GetLarge returns the Large field value if set, zero value otherwise.
func (o *RouteCommunityListsType) GetLarge() RouteCommunityListsTypeLarge {
	if o == nil || IsNil(o.Large) {
		var ret RouteCommunityListsTypeLarge
		return ret
	}
	return *o.Large
}

// GetLargeOk returns a tuple with the Large field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCommunityListsType) GetLargeOk() (*RouteCommunityListsTypeLarge, bool) {
	if o == nil || IsNil(o.Large) {
		return nil, false
	}
	return o.Large, true
}

// HasLarge returns a boolean if a field has been set.
func (o *RouteCommunityListsType) HasLarge() bool {
	if o != nil && !IsNil(o.Large) {
		return true
	}

	return false
}

// SetLarge gets a reference to the given RouteCommunityListsTypeLarge and assigns it to the Large field.
func (o *RouteCommunityListsType) SetLarge(v RouteCommunityListsTypeLarge) {
	o.Large = &v
}

// GetRegular returns the Regular field value if set, zero value otherwise.
func (o *RouteCommunityListsType) GetRegular() RouteCommunityListsTypeRegular {
	if o == nil || IsNil(o.Regular) {
		var ret RouteCommunityListsTypeRegular
		return ret
	}
	return *o.Regular
}

// GetRegularOk returns a tuple with the Regular field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteCommunityListsType) GetRegularOk() (*RouteCommunityListsTypeRegular, bool) {
	if o == nil || IsNil(o.Regular) {
		return nil, false
	}
	return o.Regular, true
}

// HasRegular returns a boolean if a field has been set.
func (o *RouteCommunityListsType) HasRegular() bool {
	if o != nil && !IsNil(o.Regular) {
		return true
	}

	return false
}

// SetRegular gets a reference to the given RouteCommunityListsTypeRegular and assigns it to the Regular field.
func (o *RouteCommunityListsType) SetRegular(v RouteCommunityListsTypeRegular) {
	o.Regular = &v
}

func (o RouteCommunityListsType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteCommunityListsType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Extended) {
		toSerialize["extended"] = o.Extended
	}
	if !IsNil(o.Large) {
		toSerialize["large"] = o.Large
	}
	if !IsNil(o.Regular) {
		toSerialize["regular"] = o.Regular
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RouteCommunityListsType) UnmarshalJSON(data []byte) (err error) {
	varRouteCommunityListsType := _RouteCommunityListsType{}

	err = json.Unmarshal(data, &varRouteCommunityListsType)

	if err != nil {
		return err
	}

	*o = RouteCommunityListsType(varRouteCommunityListsType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "extended")
		delete(additionalProperties, "large")
		delete(additionalProperties, "regular")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRouteCommunityListsType struct {
	value *RouteCommunityListsType
	isSet bool
}

func (v NullableRouteCommunityListsType) Get() *RouteCommunityListsType {
	return v.value
}

func (v *NullableRouteCommunityListsType) Set(val *RouteCommunityListsType) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteCommunityListsType) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteCommunityListsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteCommunityListsType(val *RouteCommunityListsType) *NullableRouteCommunityListsType {
	return &NullableRouteCommunityListsType{value: val, isSet: true}
}

func (v NullableRouteCommunityListsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteCommunityListsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
