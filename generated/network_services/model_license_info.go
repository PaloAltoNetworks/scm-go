/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the LicenseInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LicenseInfo{}

// LicenseInfo struct for LicenseInfo
type LicenseInfo struct {
	Count                *int32  `json:"count,omitempty"`
	LicenseType          *string `json:"license_type,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LicenseInfo LicenseInfo

// NewLicenseInfo instantiates a new LicenseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLicenseInfo() *LicenseInfo {
	this := LicenseInfo{}
	return &this
}

// NewLicenseInfoWithDefaults instantiates a new LicenseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLicenseInfoWithDefaults() *LicenseInfo {
	this := LicenseInfo{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *LicenseInfo) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *LicenseInfo) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *LicenseInfo) SetCount(v int32) {
	o.Count = &v
}

// GetLicenseType returns the LicenseType field value if set, zero value otherwise.
func (o *LicenseInfo) GetLicenseType() string {
	if o == nil || IsNil(o.LicenseType) {
		var ret string
		return ret
	}
	return *o.LicenseType
}

// GetLicenseTypeOk returns a tuple with the LicenseType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LicenseInfo) GetLicenseTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LicenseType) {
		return nil, false
	}
	return o.LicenseType, true
}

// HasLicenseType returns a boolean if a field has been set.
func (o *LicenseInfo) HasLicenseType() bool {
	if o != nil && !IsNil(o.LicenseType) {
		return true
	}

	return false
}

// SetLicenseType gets a reference to the given string and assigns it to the LicenseType field.
func (o *LicenseInfo) SetLicenseType(v string) {
	o.LicenseType = &v
}

func (o LicenseInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LicenseInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if !IsNil(o.LicenseType) {
		toSerialize["license_type"] = o.LicenseType
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LicenseInfo) UnmarshalJSON(data []byte) (err error) {
	varLicenseInfo := _LicenseInfo{}

	err = json.Unmarshal(data, &varLicenseInfo)

	if err != nil {
		return err
	}

	*o = LicenseInfo(varLicenseInfo)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "count")
		delete(additionalProperties, "license_type")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLicenseInfo struct {
	value *LicenseInfo
	isSet bool
}

func (v NullableLicenseInfo) Get() *LicenseInfo {
	return v.value
}

func (v *NullableLicenseInfo) Set(val *LicenseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLicenseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLicenseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLicenseInfo(val *LicenseInfo) *NullableLicenseInfo {
	return &NullableLicenseInfo{value: val, isSet: true}
}

func (v NullableLicenseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLicenseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
