/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the EthernetInterfacesLayer3 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EthernetInterfacesLayer3{}

// EthernetInterfacesLayer3 struct for EthernetInterfacesLayer3
type EthernetInterfacesLayer3 struct {
	// Ethernet Interfaces ARP configuration
	Arp        []EthernetInterfacesArpInner        `json:"arp,omitempty"`
	DdnsConfig *EthernetInterfacesLayer3DdnsConfig `json:"ddns_config,omitempty"`
	DhcpClient *EthernetInterfacesLayer3DhcpClient `json:"dhcp_client,omitempty"`
	// Interface management profile
	InterfaceManagementProfile *string `json:"interface_management_profile,omitempty"`
	// Interface IP addresses
	Ip []EthernetInterfacesLayer3IpInner `json:"ip,omitempty"`
	// MTU
	Mtu                  *int32                         `json:"mtu,omitempty"`
	Pppoe                *EthernetInterfacesLayer3Pppoe `json:"pppoe,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _EthernetInterfacesLayer3 EthernetInterfacesLayer3

// NewEthernetInterfacesLayer3 instantiates a new EthernetInterfacesLayer3 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEthernetInterfacesLayer3() *EthernetInterfacesLayer3 {
	this := EthernetInterfacesLayer3{}
	var mtu int32 = 1500
	this.Mtu = &mtu
	return &this
}

// NewEthernetInterfacesLayer3WithDefaults instantiates a new EthernetInterfacesLayer3 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEthernetInterfacesLayer3WithDefaults() *EthernetInterfacesLayer3 {
	this := EthernetInterfacesLayer3{}
	var mtu int32 = 1500
	this.Mtu = &mtu
	return &this
}

// GetArp returns the Arp field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetArp() []EthernetInterfacesArpInner {
	if o == nil || IsNil(o.Arp) {
		var ret []EthernetInterfacesArpInner
		return ret
	}
	return o.Arp
}

// GetArpOk returns a tuple with the Arp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetArpOk() ([]EthernetInterfacesArpInner, bool) {
	if o == nil || IsNil(o.Arp) {
		return nil, false
	}
	return o.Arp, true
}

// HasArp returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasArp() bool {
	if o != nil && !IsNil(o.Arp) {
		return true
	}

	return false
}

// SetArp gets a reference to the given []EthernetInterfacesArpInner and assigns it to the Arp field.
func (o *EthernetInterfacesLayer3) SetArp(v []EthernetInterfacesArpInner) {
	o.Arp = v
}

// GetDdnsConfig returns the DdnsConfig field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetDdnsConfig() EthernetInterfacesLayer3DdnsConfig {
	if o == nil || IsNil(o.DdnsConfig) {
		var ret EthernetInterfacesLayer3DdnsConfig
		return ret
	}
	return *o.DdnsConfig
}

// GetDdnsConfigOk returns a tuple with the DdnsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetDdnsConfigOk() (*EthernetInterfacesLayer3DdnsConfig, bool) {
	if o == nil || IsNil(o.DdnsConfig) {
		return nil, false
	}
	return o.DdnsConfig, true
}

// HasDdnsConfig returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasDdnsConfig() bool {
	if o != nil && !IsNil(o.DdnsConfig) {
		return true
	}

	return false
}

// SetDdnsConfig gets a reference to the given EthernetInterfacesLayer3DdnsConfig and assigns it to the DdnsConfig field.
func (o *EthernetInterfacesLayer3) SetDdnsConfig(v EthernetInterfacesLayer3DdnsConfig) {
	o.DdnsConfig = &v
}

// GetDhcpClient returns the DhcpClient field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetDhcpClient() EthernetInterfacesLayer3DhcpClient {
	if o == nil || IsNil(o.DhcpClient) {
		var ret EthernetInterfacesLayer3DhcpClient
		return ret
	}
	return *o.DhcpClient
}

// GetDhcpClientOk returns a tuple with the DhcpClient field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetDhcpClientOk() (*EthernetInterfacesLayer3DhcpClient, bool) {
	if o == nil || IsNil(o.DhcpClient) {
		return nil, false
	}
	return o.DhcpClient, true
}

// HasDhcpClient returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasDhcpClient() bool {
	if o != nil && !IsNil(o.DhcpClient) {
		return true
	}

	return false
}

// SetDhcpClient gets a reference to the given EthernetInterfacesLayer3DhcpClient and assigns it to the DhcpClient field.
func (o *EthernetInterfacesLayer3) SetDhcpClient(v EthernetInterfacesLayer3DhcpClient) {
	o.DhcpClient = &v
}

// GetInterfaceManagementProfile returns the InterfaceManagementProfile field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetInterfaceManagementProfile() string {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		var ret string
		return ret
	}
	return *o.InterfaceManagementProfile
}

// GetInterfaceManagementProfileOk returns a tuple with the InterfaceManagementProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetInterfaceManagementProfileOk() (*string, bool) {
	if o == nil || IsNil(o.InterfaceManagementProfile) {
		return nil, false
	}
	return o.InterfaceManagementProfile, true
}

// HasInterfaceManagementProfile returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasInterfaceManagementProfile() bool {
	if o != nil && !IsNil(o.InterfaceManagementProfile) {
		return true
	}

	return false
}

// SetInterfaceManagementProfile gets a reference to the given string and assigns it to the InterfaceManagementProfile field.
func (o *EthernetInterfacesLayer3) SetInterfaceManagementProfile(v string) {
	o.InterfaceManagementProfile = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetIp() []EthernetInterfacesLayer3IpInner {
	if o == nil || IsNil(o.Ip) {
		var ret []EthernetInterfacesLayer3IpInner
		return ret
	}
	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetIpOk() ([]EthernetInterfacesLayer3IpInner, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given []EthernetInterfacesLayer3IpInner and assigns it to the Ip field.
func (o *EthernetInterfacesLayer3) SetIp(v []EthernetInterfacesLayer3IpInner) {
	o.Ip = v
}

// GetMtu returns the Mtu field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu) {
		var ret int32
		return ret
	}
	return *o.Mtu
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetMtuOk() (*int32, bool) {
	if o == nil || IsNil(o.Mtu) {
		return nil, false
	}
	return o.Mtu, true
}

// HasMtu returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasMtu() bool {
	if o != nil && !IsNil(o.Mtu) {
		return true
	}

	return false
}

// SetMtu gets a reference to the given int32 and assigns it to the Mtu field.
func (o *EthernetInterfacesLayer3) SetMtu(v int32) {
	o.Mtu = &v
}

// GetPppoe returns the Pppoe field value if set, zero value otherwise.
func (o *EthernetInterfacesLayer3) GetPppoe() EthernetInterfacesLayer3Pppoe {
	if o == nil || IsNil(o.Pppoe) {
		var ret EthernetInterfacesLayer3Pppoe
		return ret
	}
	return *o.Pppoe
}

// GetPppoeOk returns a tuple with the Pppoe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EthernetInterfacesLayer3) GetPppoeOk() (*EthernetInterfacesLayer3Pppoe, bool) {
	if o == nil || IsNil(o.Pppoe) {
		return nil, false
	}
	return o.Pppoe, true
}

// HasPppoe returns a boolean if a field has been set.
func (o *EthernetInterfacesLayer3) HasPppoe() bool {
	if o != nil && !IsNil(o.Pppoe) {
		return true
	}

	return false
}

// SetPppoe gets a reference to the given EthernetInterfacesLayer3Pppoe and assigns it to the Pppoe field.
func (o *EthernetInterfacesLayer3) SetPppoe(v EthernetInterfacesLayer3Pppoe) {
	o.Pppoe = &v
}

func (o EthernetInterfacesLayer3) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EthernetInterfacesLayer3) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Arp) {
		toSerialize["arp"] = o.Arp
	}
	if !IsNil(o.DdnsConfig) {
		toSerialize["ddns_config"] = o.DdnsConfig
	}
	if !IsNil(o.DhcpClient) {
		toSerialize["dhcp_client"] = o.DhcpClient
	}
	if !IsNil(o.InterfaceManagementProfile) {
		toSerialize["interface_management_profile"] = o.InterfaceManagementProfile
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Mtu) {
		toSerialize["mtu"] = o.Mtu
	}
	if !IsNil(o.Pppoe) {
		toSerialize["pppoe"] = o.Pppoe
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *EthernetInterfacesLayer3) UnmarshalJSON(data []byte) (err error) {
	varEthernetInterfacesLayer3 := _EthernetInterfacesLayer3{}

	err = json.Unmarshal(data, &varEthernetInterfacesLayer3)

	if err != nil {
		return err
	}

	*o = EthernetInterfacesLayer3(varEthernetInterfacesLayer3)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "arp")
		delete(additionalProperties, "ddns_config")
		delete(additionalProperties, "dhcp_client")
		delete(additionalProperties, "interface_management_profile")
		delete(additionalProperties, "ip")
		delete(additionalProperties, "mtu")
		delete(additionalProperties, "pppoe")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableEthernetInterfacesLayer3 struct {
	value *EthernetInterfacesLayer3
	isSet bool
}

func (v NullableEthernetInterfacesLayer3) Get() *EthernetInterfacesLayer3 {
	return v.value
}

func (v *NullableEthernetInterfacesLayer3) Set(val *EthernetInterfacesLayer3) {
	v.value = val
	v.isSet = true
}

func (v NullableEthernetInterfacesLayer3) IsSet() bool {
	return v.isSet
}

func (v *NullableEthernetInterfacesLayer3) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEthernetInterfacesLayer3(val *EthernetInterfacesLayer3) *NullableEthernetInterfacesLayer3 {
	return &NullableEthernetInterfacesLayer3{value: val, isSet: true}
}

func (v NullableEthernetInterfacesLayer3) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEthernetInterfacesLayer3) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
