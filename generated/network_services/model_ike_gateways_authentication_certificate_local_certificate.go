/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysAuthenticationCertificateLocalCertificate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysAuthenticationCertificateLocalCertificate{}

// IkeGatewaysAuthenticationCertificateLocalCertificate struct for IkeGatewaysAuthenticationCertificateLocalCertificate
type IkeGatewaysAuthenticationCertificateLocalCertificate struct {
	LocalCertificateName *string `json:"local_certificate_name,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysAuthenticationCertificateLocalCertificate IkeGatewaysAuthenticationCertificateLocalCertificate

// NewIkeGatewaysAuthenticationCertificateLocalCertificate instantiates a new IkeGatewaysAuthenticationCertificateLocalCertificate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysAuthenticationCertificateLocalCertificate() *IkeGatewaysAuthenticationCertificateLocalCertificate {
	this := IkeGatewaysAuthenticationCertificateLocalCertificate{}
	return &this
}

// NewIkeGatewaysAuthenticationCertificateLocalCertificateWithDefaults instantiates a new IkeGatewaysAuthenticationCertificateLocalCertificate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysAuthenticationCertificateLocalCertificateWithDefaults() *IkeGatewaysAuthenticationCertificateLocalCertificate {
	this := IkeGatewaysAuthenticationCertificateLocalCertificate{}
	return &this
}

// GetLocalCertificateName returns the LocalCertificateName field value if set, zero value otherwise.
func (o *IkeGatewaysAuthenticationCertificateLocalCertificate) GetLocalCertificateName() string {
	if o == nil || IsNil(o.LocalCertificateName) {
		var ret string
		return ret
	}
	return *o.LocalCertificateName
}

// GetLocalCertificateNameOk returns a tuple with the LocalCertificateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysAuthenticationCertificateLocalCertificate) GetLocalCertificateNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocalCertificateName) {
		return nil, false
	}
	return o.LocalCertificateName, true
}

// HasLocalCertificateName returns a boolean if a field has been set.
func (o *IkeGatewaysAuthenticationCertificateLocalCertificate) HasLocalCertificateName() bool {
	if o != nil && !IsNil(o.LocalCertificateName) {
		return true
	}

	return false
}

// SetLocalCertificateName gets a reference to the given string and assigns it to the LocalCertificateName field.
func (o *IkeGatewaysAuthenticationCertificateLocalCertificate) SetLocalCertificateName(v string) {
	o.LocalCertificateName = &v
}

func (o IkeGatewaysAuthenticationCertificateLocalCertificate) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysAuthenticationCertificateLocalCertificate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocalCertificateName) {
		toSerialize["local_certificate_name"] = o.LocalCertificateName
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysAuthenticationCertificateLocalCertificate) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysAuthenticationCertificateLocalCertificate := _IkeGatewaysAuthenticationCertificateLocalCertificate{}

	err = json.Unmarshal(data, &varIkeGatewaysAuthenticationCertificateLocalCertificate)

	if err != nil {
		return err
	}

	*o = IkeGatewaysAuthenticationCertificateLocalCertificate(varIkeGatewaysAuthenticationCertificateLocalCertificate)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "local_certificate_name")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysAuthenticationCertificateLocalCertificate struct {
	value *IkeGatewaysAuthenticationCertificateLocalCertificate
	isSet bool
}

func (v NullableIkeGatewaysAuthenticationCertificateLocalCertificate) Get() *IkeGatewaysAuthenticationCertificateLocalCertificate {
	return v.value
}

func (v *NullableIkeGatewaysAuthenticationCertificateLocalCertificate) Set(val *IkeGatewaysAuthenticationCertificateLocalCertificate) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysAuthenticationCertificateLocalCertificate) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysAuthenticationCertificateLocalCertificate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysAuthenticationCertificateLocalCertificate(val *IkeGatewaysAuthenticationCertificateLocalCertificate) *NullableIkeGatewaysAuthenticationCertificateLocalCertificate {
	return &NullableIkeGatewaysAuthenticationCertificateLocalCertificate{value: val, isSet: true}
}

func (v NullableIkeGatewaysAuthenticationCertificateLocalCertificate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysAuthenticationCertificateLocalCertificate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
