/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the IkeCryptoProfiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeCryptoProfiles{}

// IkeCryptoProfiles struct for IkeCryptoProfiles
type IkeCryptoProfiles struct {
	// IKEv2 SA reauthentication interval equals authetication-multiple * rekey-lifetime; 0 means reauthentication disabled
	AuthenticationMultiple *int32 `json:"authentication_multiple,omitempty"`
	// The device in which the resource is defined
	Device  *string  `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	DhGroup []string `json:"dh_group"`
	// Encryption algorithm
	Encryption []string `json:"encryption"`
	// The folder in which the resource is defined
	Folder *string  `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	Hash   []string `json:"hash"`
	// UUID of the resource
	Id       *string                    `json:"id,omitempty"`
	Lifetime *IkeCryptoProfilesLifetime `json:"lifetime,omitempty"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]
	Name string `json:"name"`
	// The snippet in which the resource is defined
	Snippet              *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	AdditionalProperties map[string]interface{}
}

type _IkeCryptoProfiles IkeCryptoProfiles

// NewIkeCryptoProfiles instantiates a new IkeCryptoProfiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeCryptoProfiles(dhGroup []string, encryption []string, hash []string, name string) *IkeCryptoProfiles {
	this := IkeCryptoProfiles{}
	var authenticationMultiple int32 = 0
	this.AuthenticationMultiple = &authenticationMultiple
	this.DhGroup = dhGroup
	this.Encryption = encryption
	this.Hash = hash
	this.Name = name
	return &this
}

// NewIkeCryptoProfilesWithDefaults instantiates a new IkeCryptoProfiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeCryptoProfilesWithDefaults() *IkeCryptoProfiles {
	this := IkeCryptoProfiles{}
	var authenticationMultiple int32 = 0
	this.AuthenticationMultiple = &authenticationMultiple
	return &this
}

// GetAuthenticationMultiple returns the AuthenticationMultiple field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetAuthenticationMultiple() int32 {
	if o == nil || IsNil(o.AuthenticationMultiple) {
		var ret int32
		return ret
	}
	return *o.AuthenticationMultiple
}

// GetAuthenticationMultipleOk returns a tuple with the AuthenticationMultiple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetAuthenticationMultipleOk() (*int32, bool) {
	if o == nil || IsNil(o.AuthenticationMultiple) {
		return nil, false
	}
	return o.AuthenticationMultiple, true
}

// HasAuthenticationMultiple returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasAuthenticationMultiple() bool {
	if o != nil && !IsNil(o.AuthenticationMultiple) {
		return true
	}

	return false
}

// SetAuthenticationMultiple gets a reference to the given int32 and assigns it to the AuthenticationMultiple field.
func (o *IkeCryptoProfiles) SetAuthenticationMultiple(v int32) {
	o.AuthenticationMultiple = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *IkeCryptoProfiles) SetDevice(v string) {
	o.Device = &v
}

// GetDhGroup returns the DhGroup field value
func (o *IkeCryptoProfiles) GetDhGroup() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DhGroup
}

// GetDhGroupOk returns a tuple with the DhGroup field value
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetDhGroupOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DhGroup, true
}

// SetDhGroup sets field value
func (o *IkeCryptoProfiles) SetDhGroup(v []string) {
	o.DhGroup = v
}

// GetEncryption returns the Encryption field value
func (o *IkeCryptoProfiles) GetEncryption() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetEncryptionOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Encryption, true
}

// SetEncryption sets field value
func (o *IkeCryptoProfiles) SetEncryption(v []string) {
	o.Encryption = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *IkeCryptoProfiles) SetFolder(v string) {
	o.Folder = &v
}

// GetHash returns the Hash field value
func (o *IkeCryptoProfiles) GetHash() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hash
}

// GetHashOk returns a tuple with the Hash field value
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetHashOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hash, true
}

// SetHash sets field value
func (o *IkeCryptoProfiles) SetHash(v []string) {
	o.Hash = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *IkeCryptoProfiles) SetId(v string) {
	o.Id = &v
}

// GetLifetime returns the Lifetime field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetLifetime() IkeCryptoProfilesLifetime {
	if o == nil || IsNil(o.Lifetime) {
		var ret IkeCryptoProfilesLifetime
		return ret
	}
	return *o.Lifetime
}

// GetLifetimeOk returns a tuple with the Lifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetLifetimeOk() (*IkeCryptoProfilesLifetime, bool) {
	if o == nil || IsNil(o.Lifetime) {
		return nil, false
	}
	return o.Lifetime, true
}

// HasLifetime returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasLifetime() bool {
	if o != nil && !IsNil(o.Lifetime) {
		return true
	}

	return false
}

// SetLifetime gets a reference to the given IkeCryptoProfilesLifetime and assigns it to the Lifetime field.
func (o *IkeCryptoProfiles) SetLifetime(v IkeCryptoProfilesLifetime) {
	o.Lifetime = &v
}

// GetName returns the Name field value
func (o *IkeCryptoProfiles) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *IkeCryptoProfiles) SetName(v string) {
	o.Name = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *IkeCryptoProfiles) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeCryptoProfiles) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *IkeCryptoProfiles) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *IkeCryptoProfiles) SetSnippet(v string) {
	o.Snippet = &v
}

func (o IkeCryptoProfiles) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeCryptoProfiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthenticationMultiple) {
		toSerialize["authentication_multiple"] = o.AuthenticationMultiple
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	toSerialize["dh_group"] = o.DhGroup
	toSerialize["encryption"] = o.Encryption
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	toSerialize["hash"] = o.Hash
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Lifetime) {
		toSerialize["lifetime"] = o.Lifetime
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeCryptoProfiles) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dh_group",
		"encryption",
		"hash",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIkeCryptoProfiles := _IkeCryptoProfiles{}

	err = json.Unmarshal(data, &varIkeCryptoProfiles)

	if err != nil {
		return err
	}

	*o = IkeCryptoProfiles(varIkeCryptoProfiles)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "authentication_multiple")
		delete(additionalProperties, "device")
		delete(additionalProperties, "dh_group")
		delete(additionalProperties, "encryption")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "hash")
		delete(additionalProperties, "id")
		delete(additionalProperties, "lifetime")
		delete(additionalProperties, "name")
		delete(additionalProperties, "snippet")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeCryptoProfiles struct {
	value *IkeCryptoProfiles
	isSet bool
}

func (v NullableIkeCryptoProfiles) Get() *IkeCryptoProfiles {
	return v.value
}

func (v *NullableIkeCryptoProfiles) Set(val *IkeCryptoProfiles) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeCryptoProfiles) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeCryptoProfiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeCryptoProfiles(val *IkeCryptoProfiles) *NullableIkeCryptoProfiles {
	return &NullableIkeCryptoProfiles{value: val, isSet: true}
}

func (v NullableIkeCryptoProfiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeCryptoProfiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
