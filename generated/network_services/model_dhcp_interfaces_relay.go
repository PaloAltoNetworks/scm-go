/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the DhcpInterfacesRelay type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfacesRelay{}

// DhcpInterfacesRelay struct for DhcpInterfacesRelay
type DhcpInterfacesRelay struct {
	Ip                   DhcpInterfacesRelayIp `json:"ip"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfacesRelay DhcpInterfacesRelay

// NewDhcpInterfacesRelay instantiates a new DhcpInterfacesRelay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfacesRelay(ip DhcpInterfacesRelayIp) *DhcpInterfacesRelay {
	this := DhcpInterfacesRelay{}
	this.Ip = ip
	return &this
}

// NewDhcpInterfacesRelayWithDefaults instantiates a new DhcpInterfacesRelay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesRelayWithDefaults() *DhcpInterfacesRelay {
	this := DhcpInterfacesRelay{}
	return &this
}

// GetIp returns the Ip field value
func (o *DhcpInterfacesRelay) GetIp() DhcpInterfacesRelayIp {
	if o == nil {
		var ret DhcpInterfacesRelayIp
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesRelay) GetIpOk() (*DhcpInterfacesRelayIp, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *DhcpInterfacesRelay) SetIp(v DhcpInterfacesRelayIp) {
	o.Ip = v
}

func (o DhcpInterfacesRelay) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfacesRelay) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfacesRelay) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDhcpInterfacesRelay := _DhcpInterfacesRelay{}

	err = json.Unmarshal(data, &varDhcpInterfacesRelay)

	if err != nil {
		return err
	}

	*o = DhcpInterfacesRelay(varDhcpInterfacesRelay)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "ip")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfacesRelay struct {
	value *DhcpInterfacesRelay
	isSet bool
}

func (v NullableDhcpInterfacesRelay) Get() *DhcpInterfacesRelay {
	return v.value
}

func (v *NullableDhcpInterfacesRelay) Set(val *DhcpInterfacesRelay) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfacesRelay) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfacesRelay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfacesRelay(val *DhcpInterfacesRelay) *NullableDhcpInterfacesRelay {
	return &NullableDhcpInterfacesRelay{value: val, isSet: true}
}

func (v NullableDhcpInterfacesRelay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfacesRelay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
