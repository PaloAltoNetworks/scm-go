/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
	"fmt"
)

// checks if the Zones type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zones{}

// Zones struct for Zones
type Zones struct {
	// The device in which the resource is defined
	Device                     *string         `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	DeviceAcl                  *ZonesDeviceAcl `json:"device_acl,omitempty"`
	DosLogSetting              *string         `json:"dos_log_setting,omitempty"`
	DosProfile                 *string         `json:"dos_profile,omitempty"`
	EnableDeviceIdentification *bool           `json:"enable_device_identification,omitempty"`
	EnableUserIdentification   *bool           `json:"enable_user_identification,omitempty"`
	Folder                     *string         `json:"folder,omitempty"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// Alphanumeric string begin with letter: [0-9a-zA-Z._-]
	Name    string        `json:"name"`
	Network *ZonesNetwork `json:"network,omitempty"`
	// The snippet in which the resource is defined
	Snippet              *string         `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d\\\\-_\\\\. ]+$"`
	UserAcl              *ZonesDeviceAcl `json:"user_acl,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Zones Zones

// NewZones instantiates a new Zones object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZones(name string) *Zones {
	this := Zones{}
	this.Name = name
	return &this
}

// NewZonesWithDefaults instantiates a new Zones object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZonesWithDefaults() *Zones {
	this := Zones{}
	return &this
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Zones) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Zones) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Zones) SetDevice(v string) {
	o.Device = &v
}

// GetDeviceAcl returns the DeviceAcl field value if set, zero value otherwise.
func (o *Zones) GetDeviceAcl() ZonesDeviceAcl {
	if o == nil || IsNil(o.DeviceAcl) {
		var ret ZonesDeviceAcl
		return ret
	}
	return *o.DeviceAcl
}

// GetDeviceAclOk returns a tuple with the DeviceAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetDeviceAclOk() (*ZonesDeviceAcl, bool) {
	if o == nil || IsNil(o.DeviceAcl) {
		return nil, false
	}
	return o.DeviceAcl, true
}

// HasDeviceAcl returns a boolean if a field has been set.
func (o *Zones) HasDeviceAcl() bool {
	if o != nil && !IsNil(o.DeviceAcl) {
		return true
	}

	return false
}

// SetDeviceAcl gets a reference to the given ZonesDeviceAcl and assigns it to the DeviceAcl field.
func (o *Zones) SetDeviceAcl(v ZonesDeviceAcl) {
	o.DeviceAcl = &v
}

// GetDosLogSetting returns the DosLogSetting field value if set, zero value otherwise.
func (o *Zones) GetDosLogSetting() string {
	if o == nil || IsNil(o.DosLogSetting) {
		var ret string
		return ret
	}
	return *o.DosLogSetting
}

// GetDosLogSettingOk returns a tuple with the DosLogSetting field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetDosLogSettingOk() (*string, bool) {
	if o == nil || IsNil(o.DosLogSetting) {
		return nil, false
	}
	return o.DosLogSetting, true
}

// HasDosLogSetting returns a boolean if a field has been set.
func (o *Zones) HasDosLogSetting() bool {
	if o != nil && !IsNil(o.DosLogSetting) {
		return true
	}

	return false
}

// SetDosLogSetting gets a reference to the given string and assigns it to the DosLogSetting field.
func (o *Zones) SetDosLogSetting(v string) {
	o.DosLogSetting = &v
}

// GetDosProfile returns the DosProfile field value if set, zero value otherwise.
func (o *Zones) GetDosProfile() string {
	if o == nil || IsNil(o.DosProfile) {
		var ret string
		return ret
	}
	return *o.DosProfile
}

// GetDosProfileOk returns a tuple with the DosProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetDosProfileOk() (*string, bool) {
	if o == nil || IsNil(o.DosProfile) {
		return nil, false
	}
	return o.DosProfile, true
}

// HasDosProfile returns a boolean if a field has been set.
func (o *Zones) HasDosProfile() bool {
	if o != nil && !IsNil(o.DosProfile) {
		return true
	}

	return false
}

// SetDosProfile gets a reference to the given string and assigns it to the DosProfile field.
func (o *Zones) SetDosProfile(v string) {
	o.DosProfile = &v
}

// GetEnableDeviceIdentification returns the EnableDeviceIdentification field value if set, zero value otherwise.
func (o *Zones) GetEnableDeviceIdentification() bool {
	if o == nil || IsNil(o.EnableDeviceIdentification) {
		var ret bool
		return ret
	}
	return *o.EnableDeviceIdentification
}

// GetEnableDeviceIdentificationOk returns a tuple with the EnableDeviceIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetEnableDeviceIdentificationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableDeviceIdentification) {
		return nil, false
	}
	return o.EnableDeviceIdentification, true
}

// HasEnableDeviceIdentification returns a boolean if a field has been set.
func (o *Zones) HasEnableDeviceIdentification() bool {
	if o != nil && !IsNil(o.EnableDeviceIdentification) {
		return true
	}

	return false
}

// SetEnableDeviceIdentification gets a reference to the given bool and assigns it to the EnableDeviceIdentification field.
func (o *Zones) SetEnableDeviceIdentification(v bool) {
	o.EnableDeviceIdentification = &v
}

// GetEnableUserIdentification returns the EnableUserIdentification field value if set, zero value otherwise.
func (o *Zones) GetEnableUserIdentification() bool {
	if o == nil || IsNil(o.EnableUserIdentification) {
		var ret bool
		return ret
	}
	return *o.EnableUserIdentification
}

// GetEnableUserIdentificationOk returns a tuple with the EnableUserIdentification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetEnableUserIdentificationOk() (*bool, bool) {
	if o == nil || IsNil(o.EnableUserIdentification) {
		return nil, false
	}
	return o.EnableUserIdentification, true
}

// HasEnableUserIdentification returns a boolean if a field has been set.
func (o *Zones) HasEnableUserIdentification() bool {
	if o != nil && !IsNil(o.EnableUserIdentification) {
		return true
	}

	return false
}

// SetEnableUserIdentification gets a reference to the given bool and assigns it to the EnableUserIdentification field.
func (o *Zones) SetEnableUserIdentification(v bool) {
	o.EnableUserIdentification = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *Zones) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *Zones) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *Zones) SetFolder(v string) {
	o.Folder = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Zones) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Zones) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Zones) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Zones) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Zones) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Zones) SetName(v string) {
	o.Name = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *Zones) GetNetwork() ZonesNetwork {
	if o == nil || IsNil(o.Network) {
		var ret ZonesNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetNetworkOk() (*ZonesNetwork, bool) {
	if o == nil || IsNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *Zones) HasNetwork() bool {
	if o != nil && !IsNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given ZonesNetwork and assigns it to the Network field.
func (o *Zones) SetNetwork(v ZonesNetwork) {
	o.Network = &v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *Zones) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *Zones) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *Zones) SetSnippet(v string) {
	o.Snippet = &v
}

// GetUserAcl returns the UserAcl field value if set, zero value otherwise.
func (o *Zones) GetUserAcl() ZonesDeviceAcl {
	if o == nil || IsNil(o.UserAcl) {
		var ret ZonesDeviceAcl
		return ret
	}
	return *o.UserAcl
}

// GetUserAclOk returns a tuple with the UserAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zones) GetUserAclOk() (*ZonesDeviceAcl, bool) {
	if o == nil || IsNil(o.UserAcl) {
		return nil, false
	}
	return o.UserAcl, true
}

// HasUserAcl returns a boolean if a field has been set.
func (o *Zones) HasUserAcl() bool {
	if o != nil && !IsNil(o.UserAcl) {
		return true
	}

	return false
}

// SetUserAcl gets a reference to the given ZonesDeviceAcl and assigns it to the UserAcl field.
func (o *Zones) SetUserAcl(v ZonesDeviceAcl) {
	o.UserAcl = &v
}

func (o Zones) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Zones) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.DeviceAcl) {
		toSerialize["device_acl"] = o.DeviceAcl
	}
	if !IsNil(o.DosLogSetting) {
		toSerialize["dos_log_setting"] = o.DosLogSetting
	}
	if !IsNil(o.DosProfile) {
		toSerialize["dos_profile"] = o.DosProfile
	}
	if !IsNil(o.EnableDeviceIdentification) {
		toSerialize["enable_device_identification"] = o.EnableDeviceIdentification
	}
	if !IsNil(o.EnableUserIdentification) {
		toSerialize["enable_user_identification"] = o.EnableUserIdentification
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.UserAcl) {
		toSerialize["user_acl"] = o.UserAcl
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Zones) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varZones := _Zones{}

	err = json.Unmarshal(data, &varZones)

	if err != nil {
		return err
	}

	*o = Zones(varZones)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "device")
		delete(additionalProperties, "device_acl")
		delete(additionalProperties, "dos_log_setting")
		delete(additionalProperties, "dos_profile")
		delete(additionalProperties, "enable_device_identification")
		delete(additionalProperties, "enable_user_identification")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "network")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "user_acl")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableZones struct {
	value *Zones
	isSet bool
}

func (v NullableZones) Get() *Zones {
	return v.value
}

func (v *NullableZones) Set(val *Zones) {
	v.value = val
	v.isSet = true
}

func (v NullableZones) IsSet() bool {
	return v.isSet
}

func (v *NullableZones) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZones(val *Zones) *NullableZones {
	return &NullableZones{value: val, isSet: true}
}

func (v NullableZones) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZones) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
