/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the DhcpInterfacesServerOptionLease type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DhcpInterfacesServerOptionLease{}

// DhcpInterfacesServerOptionLease struct for DhcpInterfacesServerOptionLease
type DhcpInterfacesServerOptionLease struct {
	// DHCP lease timeout (minutes)
	Timeout              *int32                 `json:"timeout,omitempty"`
	Unlimited            map[string]interface{} `json:"unlimited,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _DhcpInterfacesServerOptionLease DhcpInterfacesServerOptionLease

// NewDhcpInterfacesServerOptionLease instantiates a new DhcpInterfacesServerOptionLease object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDhcpInterfacesServerOptionLease() *DhcpInterfacesServerOptionLease {
	this := DhcpInterfacesServerOptionLease{}
	return &this
}

// NewDhcpInterfacesServerOptionLeaseWithDefaults instantiates a new DhcpInterfacesServerOptionLease object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDhcpInterfacesServerOptionLeaseWithDefaults() *DhcpInterfacesServerOptionLease {
	this := DhcpInterfacesServerOptionLease{}
	return &this
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOptionLease) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOptionLease) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOptionLease) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *DhcpInterfacesServerOptionLease) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetUnlimited returns the Unlimited field value if set, zero value otherwise.
func (o *DhcpInterfacesServerOptionLease) GetUnlimited() map[string]interface{} {
	if o == nil || IsNil(o.Unlimited) {
		var ret map[string]interface{}
		return ret
	}
	return o.Unlimited
}

// GetUnlimitedOk returns a tuple with the Unlimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DhcpInterfacesServerOptionLease) GetUnlimitedOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Unlimited) {
		return map[string]interface{}{}, false
	}
	return o.Unlimited, true
}

// HasUnlimited returns a boolean if a field has been set.
func (o *DhcpInterfacesServerOptionLease) HasUnlimited() bool {
	if o != nil && !IsNil(o.Unlimited) {
		return true
	}

	return false
}

// SetUnlimited gets a reference to the given map[string]interface{} and assigns it to the Unlimited field.
func (o *DhcpInterfacesServerOptionLease) SetUnlimited(v map[string]interface{}) {
	o.Unlimited = v
}

func (o DhcpInterfacesServerOptionLease) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DhcpInterfacesServerOptionLease) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.Unlimited) {
		toSerialize["unlimited"] = o.Unlimited
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *DhcpInterfacesServerOptionLease) UnmarshalJSON(data []byte) (err error) {
	varDhcpInterfacesServerOptionLease := _DhcpInterfacesServerOptionLease{}

	err = json.Unmarshal(data, &varDhcpInterfacesServerOptionLease)

	if err != nil {
		return err
	}

	*o = DhcpInterfacesServerOptionLease(varDhcpInterfacesServerOptionLease)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "unlimited")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableDhcpInterfacesServerOptionLease struct {
	value *DhcpInterfacesServerOptionLease
	isSet bool
}

func (v NullableDhcpInterfacesServerOptionLease) Get() *DhcpInterfacesServerOptionLease {
	return v.value
}

func (v *NullableDhcpInterfacesServerOptionLease) Set(val *DhcpInterfacesServerOptionLease) {
	v.value = val
	v.isSet = true
}

func (v NullableDhcpInterfacesServerOptionLease) IsSet() bool {
	return v.isSet
}

func (v *NullableDhcpInterfacesServerOptionLease) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDhcpInterfacesServerOptionLease(val *DhcpInterfacesServerOptionLease) *NullableDhcpInterfacesServerOptionLease {
	return &NullableDhcpInterfacesServerOptionLease{value: val, isSet: true}
}

func (v NullableDhcpInterfacesServerOptionLease) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDhcpInterfacesServerOptionLease) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
