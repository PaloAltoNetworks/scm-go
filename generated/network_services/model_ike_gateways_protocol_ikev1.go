/*
Network Services

These APIs are used for defining and managing network services configuration within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package network_services

import (
	"encoding/json"
)

// checks if the IkeGatewaysProtocolIkev1 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IkeGatewaysProtocolIkev1{}

// IkeGatewaysProtocolIkev1 struct for IkeGatewaysProtocolIkev1
type IkeGatewaysProtocolIkev1 struct {
	Dpd                  *IkeGatewaysProtocolIkev1Dpd `json:"dpd,omitempty"`
	IkeCryptoProfile     *string                      `json:"ike_crypto_profile,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _IkeGatewaysProtocolIkev1 IkeGatewaysProtocolIkev1

// NewIkeGatewaysProtocolIkev1 instantiates a new IkeGatewaysProtocolIkev1 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIkeGatewaysProtocolIkev1() *IkeGatewaysProtocolIkev1 {
	this := IkeGatewaysProtocolIkev1{}
	return &this
}

// NewIkeGatewaysProtocolIkev1WithDefaults instantiates a new IkeGatewaysProtocolIkev1 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIkeGatewaysProtocolIkev1WithDefaults() *IkeGatewaysProtocolIkev1 {
	this := IkeGatewaysProtocolIkev1{}
	return &this
}

// GetDpd returns the Dpd field value if set, zero value otherwise.
func (o *IkeGatewaysProtocolIkev1) GetDpd() IkeGatewaysProtocolIkev1Dpd {
	if o == nil || IsNil(o.Dpd) {
		var ret IkeGatewaysProtocolIkev1Dpd
		return ret
	}
	return *o.Dpd
}

// GetDpdOk returns a tuple with the Dpd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocolIkev1) GetDpdOk() (*IkeGatewaysProtocolIkev1Dpd, bool) {
	if o == nil || IsNil(o.Dpd) {
		return nil, false
	}
	return o.Dpd, true
}

// HasDpd returns a boolean if a field has been set.
func (o *IkeGatewaysProtocolIkev1) HasDpd() bool {
	if o != nil && !IsNil(o.Dpd) {
		return true
	}

	return false
}

// SetDpd gets a reference to the given IkeGatewaysProtocolIkev1Dpd and assigns it to the Dpd field.
func (o *IkeGatewaysProtocolIkev1) SetDpd(v IkeGatewaysProtocolIkev1Dpd) {
	o.Dpd = &v
}

// GetIkeCryptoProfile returns the IkeCryptoProfile field value if set, zero value otherwise.
func (o *IkeGatewaysProtocolIkev1) GetIkeCryptoProfile() string {
	if o == nil || IsNil(o.IkeCryptoProfile) {
		var ret string
		return ret
	}
	return *o.IkeCryptoProfile
}

// GetIkeCryptoProfileOk returns a tuple with the IkeCryptoProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IkeGatewaysProtocolIkev1) GetIkeCryptoProfileOk() (*string, bool) {
	if o == nil || IsNil(o.IkeCryptoProfile) {
		return nil, false
	}
	return o.IkeCryptoProfile, true
}

// HasIkeCryptoProfile returns a boolean if a field has been set.
func (o *IkeGatewaysProtocolIkev1) HasIkeCryptoProfile() bool {
	if o != nil && !IsNil(o.IkeCryptoProfile) {
		return true
	}

	return false
}

// SetIkeCryptoProfile gets a reference to the given string and assigns it to the IkeCryptoProfile field.
func (o *IkeGatewaysProtocolIkev1) SetIkeCryptoProfile(v string) {
	o.IkeCryptoProfile = &v
}

func (o IkeGatewaysProtocolIkev1) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IkeGatewaysProtocolIkev1) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dpd) {
		toSerialize["dpd"] = o.Dpd
	}
	if !IsNil(o.IkeCryptoProfile) {
		toSerialize["ike_crypto_profile"] = o.IkeCryptoProfile
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IkeGatewaysProtocolIkev1) UnmarshalJSON(data []byte) (err error) {
	varIkeGatewaysProtocolIkev1 := _IkeGatewaysProtocolIkev1{}

	err = json.Unmarshal(data, &varIkeGatewaysProtocolIkev1)

	if err != nil {
		return err
	}

	*o = IkeGatewaysProtocolIkev1(varIkeGatewaysProtocolIkev1)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "dpd")
		delete(additionalProperties, "ike_crypto_profile")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIkeGatewaysProtocolIkev1 struct {
	value *IkeGatewaysProtocolIkev1
	isSet bool
}

func (v NullableIkeGatewaysProtocolIkev1) Get() *IkeGatewaysProtocolIkev1 {
	return v.value
}

func (v *NullableIkeGatewaysProtocolIkev1) Set(val *IkeGatewaysProtocolIkev1) {
	v.value = val
	v.isSet = true
}

func (v NullableIkeGatewaysProtocolIkev1) IsSet() bool {
	return v.isSet
}

func (v *NullableIkeGatewaysProtocolIkev1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIkeGatewaysProtocolIkev1(val *IkeGatewaysProtocolIkev1) *NullableIkeGatewaysProtocolIkev1 {
	return &NullableIkeGatewaysProtocolIkev1{value: val, isSet: true}
}

func (v NullableIkeGatewaysProtocolIkev1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIkeGatewaysProtocolIkev1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
