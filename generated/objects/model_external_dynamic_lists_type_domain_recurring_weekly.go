/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the ExternalDynamicListsTypeDomainRecurringWeekly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExternalDynamicListsTypeDomainRecurringWeekly{}

// ExternalDynamicListsTypeDomainRecurringWeekly struct for ExternalDynamicListsTypeDomainRecurringWeekly
type ExternalDynamicListsTypeDomainRecurringWeekly struct {
	// Time specification hh (e.g. 20)
	At                   string `json:"at" validate:"regexp=([01][0-9]|[2][0-3])"`
	DayOfWeek            string `json:"day_of_week"`
	AdditionalProperties map[string]interface{}
}

type _ExternalDynamicListsTypeDomainRecurringWeekly ExternalDynamicListsTypeDomainRecurringWeekly

// NewExternalDynamicListsTypeDomainRecurringWeekly instantiates a new ExternalDynamicListsTypeDomainRecurringWeekly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalDynamicListsTypeDomainRecurringWeekly(at string, dayOfWeek string) *ExternalDynamicListsTypeDomainRecurringWeekly {
	this := ExternalDynamicListsTypeDomainRecurringWeekly{}
	this.At = at
	this.DayOfWeek = dayOfWeek
	return &this
}

// NewExternalDynamicListsTypeDomainRecurringWeeklyWithDefaults instantiates a new ExternalDynamicListsTypeDomainRecurringWeekly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalDynamicListsTypeDomainRecurringWeeklyWithDefaults() *ExternalDynamicListsTypeDomainRecurringWeekly {
	this := ExternalDynamicListsTypeDomainRecurringWeekly{}
	var at string = "00"
	this.At = at
	return &this
}

// GetAt returns the At field value
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) GetAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.At
}

// GetAtOk returns a tuple with the At field value
// and a boolean to check if the value has been set.
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) GetAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.At, true
}

// SetAt sets field value
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) SetAt(v string) {
	o.At = v
}

// GetDayOfWeek returns the DayOfWeek field value
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) GetDayOfWeek() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) GetDayOfWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *ExternalDynamicListsTypeDomainRecurringWeekly) SetDayOfWeek(v string) {
	o.DayOfWeek = v
}

func (o ExternalDynamicListsTypeDomainRecurringWeekly) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExternalDynamicListsTypeDomainRecurringWeekly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["at"] = o.At
	toSerialize["day_of_week"] = o.DayOfWeek

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ExternalDynamicListsTypeDomainRecurringWeekly) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"at",
		"day_of_week",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExternalDynamicListsTypeDomainRecurringWeekly := _ExternalDynamicListsTypeDomainRecurringWeekly{}

	err = json.Unmarshal(data, &varExternalDynamicListsTypeDomainRecurringWeekly)

	if err != nil {
		return err
	}

	*o = ExternalDynamicListsTypeDomainRecurringWeekly(varExternalDynamicListsTypeDomainRecurringWeekly)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "at")
		delete(additionalProperties, "day_of_week")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableExternalDynamicListsTypeDomainRecurringWeekly struct {
	value *ExternalDynamicListsTypeDomainRecurringWeekly
	isSet bool
}

func (v NullableExternalDynamicListsTypeDomainRecurringWeekly) Get() *ExternalDynamicListsTypeDomainRecurringWeekly {
	return v.value
}

func (v *NullableExternalDynamicListsTypeDomainRecurringWeekly) Set(val *ExternalDynamicListsTypeDomainRecurringWeekly) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalDynamicListsTypeDomainRecurringWeekly) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalDynamicListsTypeDomainRecurringWeekly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalDynamicListsTypeDomainRecurringWeekly(val *ExternalDynamicListsTypeDomainRecurringWeekly) *NullableExternalDynamicListsTypeDomainRecurringWeekly {
	return &NullableExternalDynamicListsTypeDomainRecurringWeekly{value: val, isSet: true}
}

func (v NullableExternalDynamicListsTypeDomainRecurringWeekly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalDynamicListsTypeDomainRecurringWeekly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
