/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the LogForwardingProfilesMatchListInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogForwardingProfilesMatchListInner{}

// LogForwardingProfilesMatchListInner struct for LogForwardingProfilesMatchListInner
type LogForwardingProfilesMatchListInner struct {
	// Match profile description
	ActionDesc *string `json:"action_desc,omitempty"`
	// Filter match criteria
	Filter *string `json:"filter,omitempty"`
	// Log type
	LogType *string `json:"log_type,omitempty"`
	// Name of the match profile
	Name *string `json:"name,omitempty"`
	// A list of HTTP server profiles
	SendHttp []string `json:"send_http,omitempty"`
	// A list of syslog server profiles
	SendSyslog           []string `json:"send_syslog,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _LogForwardingProfilesMatchListInner LogForwardingProfilesMatchListInner

// NewLogForwardingProfilesMatchListInner instantiates a new LogForwardingProfilesMatchListInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogForwardingProfilesMatchListInner() *LogForwardingProfilesMatchListInner {
	this := LogForwardingProfilesMatchListInner{}
	return &this
}

// NewLogForwardingProfilesMatchListInnerWithDefaults instantiates a new LogForwardingProfilesMatchListInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogForwardingProfilesMatchListInnerWithDefaults() *LogForwardingProfilesMatchListInner {
	this := LogForwardingProfilesMatchListInner{}
	return &this
}

// GetActionDesc returns the ActionDesc field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetActionDesc() string {
	if o == nil || IsNil(o.ActionDesc) {
		var ret string
		return ret
	}
	return *o.ActionDesc
}

// GetActionDescOk returns a tuple with the ActionDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetActionDescOk() (*string, bool) {
	if o == nil || IsNil(o.ActionDesc) {
		return nil, false
	}
	return o.ActionDesc, true
}

// HasActionDesc returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasActionDesc() bool {
	if o != nil && !IsNil(o.ActionDesc) {
		return true
	}

	return false
}

// SetActionDesc gets a reference to the given string and assigns it to the ActionDesc field.
func (o *LogForwardingProfilesMatchListInner) SetActionDesc(v string) {
	o.ActionDesc = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetFilter() string {
	if o == nil || IsNil(o.Filter) {
		var ret string
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetFilterOk() (*string, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given string and assigns it to the Filter field.
func (o *LogForwardingProfilesMatchListInner) SetFilter(v string) {
	o.Filter = &v
}

// GetLogType returns the LogType field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetLogType() string {
	if o == nil || IsNil(o.LogType) {
		var ret string
		return ret
	}
	return *o.LogType
}

// GetLogTypeOk returns a tuple with the LogType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetLogTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LogType) {
		return nil, false
	}
	return o.LogType, true
}

// HasLogType returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasLogType() bool {
	if o != nil && !IsNil(o.LogType) {
		return true
	}

	return false
}

// SetLogType gets a reference to the given string and assigns it to the LogType field.
func (o *LogForwardingProfilesMatchListInner) SetLogType(v string) {
	o.LogType = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *LogForwardingProfilesMatchListInner) SetName(v string) {
	o.Name = &v
}

// GetSendHttp returns the SendHttp field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetSendHttp() []string {
	if o == nil || IsNil(o.SendHttp) {
		var ret []string
		return ret
	}
	return o.SendHttp
}

// GetSendHttpOk returns a tuple with the SendHttp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetSendHttpOk() ([]string, bool) {
	if o == nil || IsNil(o.SendHttp) {
		return nil, false
	}
	return o.SendHttp, true
}

// HasSendHttp returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasSendHttp() bool {
	if o != nil && !IsNil(o.SendHttp) {
		return true
	}

	return false
}

// SetSendHttp gets a reference to the given []string and assigns it to the SendHttp field.
func (o *LogForwardingProfilesMatchListInner) SetSendHttp(v []string) {
	o.SendHttp = v
}

// GetSendSyslog returns the SendSyslog field value if set, zero value otherwise.
func (o *LogForwardingProfilesMatchListInner) GetSendSyslog() []string {
	if o == nil || IsNil(o.SendSyslog) {
		var ret []string
		return ret
	}
	return o.SendSyslog
}

// GetSendSyslogOk returns a tuple with the SendSyslog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogForwardingProfilesMatchListInner) GetSendSyslogOk() ([]string, bool) {
	if o == nil || IsNil(o.SendSyslog) {
		return nil, false
	}
	return o.SendSyslog, true
}

// HasSendSyslog returns a boolean if a field has been set.
func (o *LogForwardingProfilesMatchListInner) HasSendSyslog() bool {
	if o != nil && !IsNil(o.SendSyslog) {
		return true
	}

	return false
}

// SetSendSyslog gets a reference to the given []string and assigns it to the SendSyslog field.
func (o *LogForwardingProfilesMatchListInner) SetSendSyslog(v []string) {
	o.SendSyslog = v
}

func (o LogForwardingProfilesMatchListInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogForwardingProfilesMatchListInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionDesc) {
		toSerialize["action_desc"] = o.ActionDesc
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.LogType) {
		toSerialize["log_type"] = o.LogType
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.SendHttp) {
		toSerialize["send_http"] = o.SendHttp
	}
	if !IsNil(o.SendSyslog) {
		toSerialize["send_syslog"] = o.SendSyslog
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *LogForwardingProfilesMatchListInner) UnmarshalJSON(data []byte) (err error) {
	varLogForwardingProfilesMatchListInner := _LogForwardingProfilesMatchListInner{}

	err = json.Unmarshal(data, &varLogForwardingProfilesMatchListInner)

	if err != nil {
		return err
	}

	*o = LogForwardingProfilesMatchListInner(varLogForwardingProfilesMatchListInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "action_desc")
		delete(additionalProperties, "filter")
		delete(additionalProperties, "log_type")
		delete(additionalProperties, "name")
		delete(additionalProperties, "send_http")
		delete(additionalProperties, "send_syslog")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableLogForwardingProfilesMatchListInner struct {
	value *LogForwardingProfilesMatchListInner
	isSet bool
}

func (v NullableLogForwardingProfilesMatchListInner) Get() *LogForwardingProfilesMatchListInner {
	return v.value
}

func (v *NullableLogForwardingProfilesMatchListInner) Set(val *LogForwardingProfilesMatchListInner) {
	v.value = val
	v.isSet = true
}

func (v NullableLogForwardingProfilesMatchListInner) IsSet() bool {
	return v.isSet
}

func (v *NullableLogForwardingProfilesMatchListInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogForwardingProfilesMatchListInner(val *LogForwardingProfilesMatchListInner) *NullableLogForwardingProfilesMatchListInner {
	return &NullableLogForwardingProfilesMatchListInner{value: val, isSet: true}
}

func (v NullableLogForwardingProfilesMatchListInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogForwardingProfilesMatchListInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
