/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the ServicesProtocolTcp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesProtocolTcp{}

// ServicesProtocolTcp struct for ServicesProtocolTcp
type ServicesProtocolTcp struct {
	Override             *ServicesProtocolTcpOverride `json:"override,omitempty"`
	Port                 string                       `json:"port"`
	SourcePort           *string                      `json:"source_port,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesProtocolTcp ServicesProtocolTcp

// NewServicesProtocolTcp instantiates a new ServicesProtocolTcp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesProtocolTcp(port string) *ServicesProtocolTcp {
	this := ServicesProtocolTcp{}
	this.Port = port
	return &this
}

// NewServicesProtocolTcpWithDefaults instantiates a new ServicesProtocolTcp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesProtocolTcpWithDefaults() *ServicesProtocolTcp {
	this := ServicesProtocolTcp{}
	return &this
}

// GetOverride returns the Override field value if set, zero value otherwise.
func (o *ServicesProtocolTcp) GetOverride() ServicesProtocolTcpOverride {
	if o == nil || IsNil(o.Override) {
		var ret ServicesProtocolTcpOverride
		return ret
	}
	return *o.Override
}

// GetOverrideOk returns a tuple with the Override field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesProtocolTcp) GetOverrideOk() (*ServicesProtocolTcpOverride, bool) {
	if o == nil || IsNil(o.Override) {
		return nil, false
	}
	return o.Override, true
}

// HasOverride returns a boolean if a field has been set.
func (o *ServicesProtocolTcp) HasOverride() bool {
	if o != nil && !IsNil(o.Override) {
		return true
	}

	return false
}

// SetOverride gets a reference to the given ServicesProtocolTcpOverride and assigns it to the Override field.
func (o *ServicesProtocolTcp) SetOverride(v ServicesProtocolTcpOverride) {
	o.Override = &v
}

// GetPort returns the Port field value
func (o *ServicesProtocolTcp) GetPort() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *ServicesProtocolTcp) GetPortOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *ServicesProtocolTcp) SetPort(v string) {
	o.Port = v
}

// GetSourcePort returns the SourcePort field value if set, zero value otherwise.
func (o *ServicesProtocolTcp) GetSourcePort() string {
	if o == nil || IsNil(o.SourcePort) {
		var ret string
		return ret
	}
	return *o.SourcePort
}

// GetSourcePortOk returns a tuple with the SourcePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesProtocolTcp) GetSourcePortOk() (*string, bool) {
	if o == nil || IsNil(o.SourcePort) {
		return nil, false
	}
	return o.SourcePort, true
}

// HasSourcePort returns a boolean if a field has been set.
func (o *ServicesProtocolTcp) HasSourcePort() bool {
	if o != nil && !IsNil(o.SourcePort) {
		return true
	}

	return false
}

// SetSourcePort gets a reference to the given string and assigns it to the SourcePort field.
func (o *ServicesProtocolTcp) SetSourcePort(v string) {
	o.SourcePort = &v
}

func (o ServicesProtocolTcp) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesProtocolTcp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Override) {
		toSerialize["override"] = o.Override
	}
	toSerialize["port"] = o.Port
	if !IsNil(o.SourcePort) {
		toSerialize["source_port"] = o.SourcePort
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesProtocolTcp) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varServicesProtocolTcp := _ServicesProtocolTcp{}

	err = json.Unmarshal(data, &varServicesProtocolTcp)

	if err != nil {
		return err
	}

	*o = ServicesProtocolTcp(varServicesProtocolTcp)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "override")
		delete(additionalProperties, "port")
		delete(additionalProperties, "source_port")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesProtocolTcp struct {
	value *ServicesProtocolTcp
	isSet bool
}

func (v NullableServicesProtocolTcp) Get() *ServicesProtocolTcp {
	return v.value
}

func (v *NullableServicesProtocolTcp) Set(val *ServicesProtocolTcp) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesProtocolTcp) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesProtocolTcp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesProtocolTcp(val *ServicesProtocolTcp) *NullableServicesProtocolTcp {
	return &NullableServicesProtocolTcp{value: val, isSet: true}
}

func (v NullableServicesProtocolTcp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesProtocolTcp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
