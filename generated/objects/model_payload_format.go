/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the PayloadFormat type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PayloadFormat{}

// PayloadFormat struct for PayloadFormat
type PayloadFormat struct {
	Headers []PayloadFormatHeadersInner `json:"headers,omitempty"`
	// The name of the payload format
	Name   *string                    `json:"name,omitempty"`
	Params []PayloadFormatParamsInner `json:"params,omitempty"`
	// The log payload format.  The accepted log field values are as follows. * `receive_time` * `serial` * `seqno` * `actionflags` * `type` * `subtype` * `time_generated` * `high_res_timestamp` * `dg_hier_level_1` * `dg_hier_level_2` * `dg_hier_level_3` * `dg_hier_level_4` * `vsys_name` * `device_name` * `vsys_id` * `host` * `vsys` * `cmd` * `admin` * `client` * `result` * `path` * `dg_id` * `comment` * `tpl_id` * `sender_sw_version` * `cef-formatted-receive_time` * `cef-formatted-time_generated` * `before-change-detail` * `after-change-detail`
	Payload *string `json:"payload,omitempty"`
	// The URL path of the HTTP server
	UrlFormat            *string `json:"url_format,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _PayloadFormat PayloadFormat

// NewPayloadFormat instantiates a new PayloadFormat object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPayloadFormat() *PayloadFormat {
	this := PayloadFormat{}
	var name string = "Default"
	this.Name = &name
	return &this
}

// NewPayloadFormatWithDefaults instantiates a new PayloadFormat object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPayloadFormatWithDefaults() *PayloadFormat {
	this := PayloadFormat{}
	var name string = "Default"
	this.Name = &name
	return &this
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *PayloadFormat) GetHeaders() []PayloadFormatHeadersInner {
	if o == nil || IsNil(o.Headers) {
		var ret []PayloadFormatHeadersInner
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadFormat) GetHeadersOk() ([]PayloadFormatHeadersInner, bool) {
	if o == nil || IsNil(o.Headers) {
		return nil, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *PayloadFormat) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given []PayloadFormatHeadersInner and assigns it to the Headers field.
func (o *PayloadFormat) SetHeaders(v []PayloadFormatHeadersInner) {
	o.Headers = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PayloadFormat) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadFormat) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PayloadFormat) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PayloadFormat) SetName(v string) {
	o.Name = &v
}

// GetParams returns the Params field value if set, zero value otherwise.
func (o *PayloadFormat) GetParams() []PayloadFormatParamsInner {
	if o == nil || IsNil(o.Params) {
		var ret []PayloadFormatParamsInner
		return ret
	}
	return o.Params
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadFormat) GetParamsOk() ([]PayloadFormatParamsInner, bool) {
	if o == nil || IsNil(o.Params) {
		return nil, false
	}
	return o.Params, true
}

// HasParams returns a boolean if a field has been set.
func (o *PayloadFormat) HasParams() bool {
	if o != nil && !IsNil(o.Params) {
		return true
	}

	return false
}

// SetParams gets a reference to the given []PayloadFormatParamsInner and assigns it to the Params field.
func (o *PayloadFormat) SetParams(v []PayloadFormatParamsInner) {
	o.Params = v
}

// GetPayload returns the Payload field value if set, zero value otherwise.
func (o *PayloadFormat) GetPayload() string {
	if o == nil || IsNil(o.Payload) {
		var ret string
		return ret
	}
	return *o.Payload
}

// GetPayloadOk returns a tuple with the Payload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadFormat) GetPayloadOk() (*string, bool) {
	if o == nil || IsNil(o.Payload) {
		return nil, false
	}
	return o.Payload, true
}

// HasPayload returns a boolean if a field has been set.
func (o *PayloadFormat) HasPayload() bool {
	if o != nil && !IsNil(o.Payload) {
		return true
	}

	return false
}

// SetPayload gets a reference to the given string and assigns it to the Payload field.
func (o *PayloadFormat) SetPayload(v string) {
	o.Payload = &v
}

// GetUrlFormat returns the UrlFormat field value if set, zero value otherwise.
func (o *PayloadFormat) GetUrlFormat() string {
	if o == nil || IsNil(o.UrlFormat) {
		var ret string
		return ret
	}
	return *o.UrlFormat
}

// GetUrlFormatOk returns a tuple with the UrlFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PayloadFormat) GetUrlFormatOk() (*string, bool) {
	if o == nil || IsNil(o.UrlFormat) {
		return nil, false
	}
	return o.UrlFormat, true
}

// HasUrlFormat returns a boolean if a field has been set.
func (o *PayloadFormat) HasUrlFormat() bool {
	if o != nil && !IsNil(o.UrlFormat) {
		return true
	}

	return false
}

// SetUrlFormat gets a reference to the given string and assigns it to the UrlFormat field.
func (o *PayloadFormat) SetUrlFormat(v string) {
	o.UrlFormat = &v
}

func (o PayloadFormat) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PayloadFormat) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Params) {
		toSerialize["params"] = o.Params
	}
	if !IsNil(o.Payload) {
		toSerialize["payload"] = o.Payload
	}
	if !IsNil(o.UrlFormat) {
		toSerialize["url_format"] = o.UrlFormat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *PayloadFormat) UnmarshalJSON(data []byte) (err error) {
	varPayloadFormat := _PayloadFormat{}

	err = json.Unmarshal(data, &varPayloadFormat)

	if err != nil {
		return err
	}

	*o = PayloadFormat(varPayloadFormat)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "headers")
		delete(additionalProperties, "name")
		delete(additionalProperties, "params")
		delete(additionalProperties, "payload")
		delete(additionalProperties, "url_format")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullablePayloadFormat struct {
	value *PayloadFormat
	isSet bool
}

func (v NullablePayloadFormat) Get() *PayloadFormat {
	return v.value
}

func (v *NullablePayloadFormat) Set(val *PayloadFormat) {
	v.value = val
	v.isSet = true
}

func (v NullablePayloadFormat) IsSet() bool {
	return v.isSet
}

func (v *NullablePayloadFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePayloadFormat(val *PayloadFormat) *NullablePayloadFormat {
	return &NullablePayloadFormat{value: val, isSet: true}
}

func (v NullablePayloadFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePayloadFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
