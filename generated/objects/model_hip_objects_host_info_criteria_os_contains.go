/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the HipObjectsHostInfoCriteriaOsContains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HipObjectsHostInfoCriteriaOsContains{}

// HipObjectsHostInfoCriteriaOsContains struct for HipObjectsHostInfoCriteriaOsContains
type HipObjectsHostInfoCriteriaOsContains struct {
	// Apple vendor
	Apple *string `json:"Apple,omitempty"`
	// Google vendor
	Google *string `json:"Google,omitempty"`
	// Linux vendor
	Linux *string `json:"Linux,omitempty"`
	// Microsoft vendor
	Microsoft *string `json:"Microsoft,omitempty"`
	// Other vendor
	Other                *string `json:"Other,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HipObjectsHostInfoCriteriaOsContains HipObjectsHostInfoCriteriaOsContains

// NewHipObjectsHostInfoCriteriaOsContains instantiates a new HipObjectsHostInfoCriteriaOsContains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHipObjectsHostInfoCriteriaOsContains() *HipObjectsHostInfoCriteriaOsContains {
	this := HipObjectsHostInfoCriteriaOsContains{}
	var apple string = "All"
	this.Apple = &apple
	var google string = "All"
	this.Google = &google
	var linux string = "All"
	this.Linux = &linux
	var microsoft string = "All"
	this.Microsoft = &microsoft
	return &this
}

// NewHipObjectsHostInfoCriteriaOsContainsWithDefaults instantiates a new HipObjectsHostInfoCriteriaOsContains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHipObjectsHostInfoCriteriaOsContainsWithDefaults() *HipObjectsHostInfoCriteriaOsContains {
	this := HipObjectsHostInfoCriteriaOsContains{}
	var apple string = "All"
	this.Apple = &apple
	var google string = "All"
	this.Google = &google
	var linux string = "All"
	this.Linux = &linux
	var microsoft string = "All"
	this.Microsoft = &microsoft
	return &this
}

// GetApple returns the Apple field value if set, zero value otherwise.
func (o *HipObjectsHostInfoCriteriaOsContains) GetApple() string {
	if o == nil || IsNil(o.Apple) {
		var ret string
		return ret
	}
	return *o.Apple
}

// GetAppleOk returns a tuple with the Apple field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) GetAppleOk() (*string, bool) {
	if o == nil || IsNil(o.Apple) {
		return nil, false
	}
	return o.Apple, true
}

// HasApple returns a boolean if a field has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) HasApple() bool {
	if o != nil && !IsNil(o.Apple) {
		return true
	}

	return false
}

// SetApple gets a reference to the given string and assigns it to the Apple field.
func (o *HipObjectsHostInfoCriteriaOsContains) SetApple(v string) {
	o.Apple = &v
}

// GetGoogle returns the Google field value if set, zero value otherwise.
func (o *HipObjectsHostInfoCriteriaOsContains) GetGoogle() string {
	if o == nil || IsNil(o.Google) {
		var ret string
		return ret
	}
	return *o.Google
}

// GetGoogleOk returns a tuple with the Google field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) GetGoogleOk() (*string, bool) {
	if o == nil || IsNil(o.Google) {
		return nil, false
	}
	return o.Google, true
}

// HasGoogle returns a boolean if a field has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) HasGoogle() bool {
	if o != nil && !IsNil(o.Google) {
		return true
	}

	return false
}

// SetGoogle gets a reference to the given string and assigns it to the Google field.
func (o *HipObjectsHostInfoCriteriaOsContains) SetGoogle(v string) {
	o.Google = &v
}

// GetLinux returns the Linux field value if set, zero value otherwise.
func (o *HipObjectsHostInfoCriteriaOsContains) GetLinux() string {
	if o == nil || IsNil(o.Linux) {
		var ret string
		return ret
	}
	return *o.Linux
}

// GetLinuxOk returns a tuple with the Linux field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) GetLinuxOk() (*string, bool) {
	if o == nil || IsNil(o.Linux) {
		return nil, false
	}
	return o.Linux, true
}

// HasLinux returns a boolean if a field has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) HasLinux() bool {
	if o != nil && !IsNil(o.Linux) {
		return true
	}

	return false
}

// SetLinux gets a reference to the given string and assigns it to the Linux field.
func (o *HipObjectsHostInfoCriteriaOsContains) SetLinux(v string) {
	o.Linux = &v
}

// GetMicrosoft returns the Microsoft field value if set, zero value otherwise.
func (o *HipObjectsHostInfoCriteriaOsContains) GetMicrosoft() string {
	if o == nil || IsNil(o.Microsoft) {
		var ret string
		return ret
	}
	return *o.Microsoft
}

// GetMicrosoftOk returns a tuple with the Microsoft field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) GetMicrosoftOk() (*string, bool) {
	if o == nil || IsNil(o.Microsoft) {
		return nil, false
	}
	return o.Microsoft, true
}

// HasMicrosoft returns a boolean if a field has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) HasMicrosoft() bool {
	if o != nil && !IsNil(o.Microsoft) {
		return true
	}

	return false
}

// SetMicrosoft gets a reference to the given string and assigns it to the Microsoft field.
func (o *HipObjectsHostInfoCriteriaOsContains) SetMicrosoft(v string) {
	o.Microsoft = &v
}

// GetOther returns the Other field value if set, zero value otherwise.
func (o *HipObjectsHostInfoCriteriaOsContains) GetOther() string {
	if o == nil || IsNil(o.Other) {
		var ret string
		return ret
	}
	return *o.Other
}

// GetOtherOk returns a tuple with the Other field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) GetOtherOk() (*string, bool) {
	if o == nil || IsNil(o.Other) {
		return nil, false
	}
	return o.Other, true
}

// HasOther returns a boolean if a field has been set.
func (o *HipObjectsHostInfoCriteriaOsContains) HasOther() bool {
	if o != nil && !IsNil(o.Other) {
		return true
	}

	return false
}

// SetOther gets a reference to the given string and assigns it to the Other field.
func (o *HipObjectsHostInfoCriteriaOsContains) SetOther(v string) {
	o.Other = &v
}

func (o HipObjectsHostInfoCriteriaOsContains) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HipObjectsHostInfoCriteriaOsContains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Apple) {
		toSerialize["Apple"] = o.Apple
	}
	if !IsNil(o.Google) {
		toSerialize["Google"] = o.Google
	}
	if !IsNil(o.Linux) {
		toSerialize["Linux"] = o.Linux
	}
	if !IsNil(o.Microsoft) {
		toSerialize["Microsoft"] = o.Microsoft
	}
	if !IsNil(o.Other) {
		toSerialize["Other"] = o.Other
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HipObjectsHostInfoCriteriaOsContains) UnmarshalJSON(data []byte) (err error) {
	varHipObjectsHostInfoCriteriaOsContains := _HipObjectsHostInfoCriteriaOsContains{}

	err = json.Unmarshal(data, &varHipObjectsHostInfoCriteriaOsContains)

	if err != nil {
		return err
	}

	*o = HipObjectsHostInfoCriteriaOsContains(varHipObjectsHostInfoCriteriaOsContains)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "Apple")
		delete(additionalProperties, "Google")
		delete(additionalProperties, "Linux")
		delete(additionalProperties, "Microsoft")
		delete(additionalProperties, "Other")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHipObjectsHostInfoCriteriaOsContains struct {
	value *HipObjectsHostInfoCriteriaOsContains
	isSet bool
}

func (v NullableHipObjectsHostInfoCriteriaOsContains) Get() *HipObjectsHostInfoCriteriaOsContains {
	return v.value
}

func (v *NullableHipObjectsHostInfoCriteriaOsContains) Set(val *HipObjectsHostInfoCriteriaOsContains) {
	v.value = val
	v.isSet = true
}

func (v NullableHipObjectsHostInfoCriteriaOsContains) IsSet() bool {
	return v.isSet
}

func (v *NullableHipObjectsHostInfoCriteriaOsContains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHipObjectsHostInfoCriteriaOsContains(val *HipObjectsHostInfoCriteriaOsContains) *NullableHipObjectsHostInfoCriteriaOsContains {
	return &NullableHipObjectsHostInfoCriteriaOsContains{value: val, isSet: true}
}

func (v NullableHipObjectsHostInfoCriteriaOsContains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHipObjectsHostInfoCriteriaOsContains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
