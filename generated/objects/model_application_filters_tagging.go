/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the ApplicationFiltersTagging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationFiltersTagging{}

// ApplicationFiltersTagging struct for ApplicationFiltersTagging
type ApplicationFiltersTagging struct {
	NoTag                *bool    `json:"no_tag,omitempty"`
	Tag                  []string `json:"tag,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationFiltersTagging ApplicationFiltersTagging

// NewApplicationFiltersTagging instantiates a new ApplicationFiltersTagging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationFiltersTagging() *ApplicationFiltersTagging {
	this := ApplicationFiltersTagging{}
	return &this
}

// NewApplicationFiltersTaggingWithDefaults instantiates a new ApplicationFiltersTagging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationFiltersTaggingWithDefaults() *ApplicationFiltersTagging {
	this := ApplicationFiltersTagging{}
	return &this
}

// GetNoTag returns the NoTag field value if set, zero value otherwise.
func (o *ApplicationFiltersTagging) GetNoTag() bool {
	if o == nil || IsNil(o.NoTag) {
		var ret bool
		return ret
	}
	return *o.NoTag
}

// GetNoTagOk returns a tuple with the NoTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFiltersTagging) GetNoTagOk() (*bool, bool) {
	if o == nil || IsNil(o.NoTag) {
		return nil, false
	}
	return o.NoTag, true
}

// HasNoTag returns a boolean if a field has been set.
func (o *ApplicationFiltersTagging) HasNoTag() bool {
	if o != nil && !IsNil(o.NoTag) {
		return true
	}

	return false
}

// SetNoTag gets a reference to the given bool and assigns it to the NoTag field.
func (o *ApplicationFiltersTagging) SetNoTag(v bool) {
	o.NoTag = &v
}

// GetTag returns the Tag field value if set, zero value otherwise.
func (o *ApplicationFiltersTagging) GetTag() []string {
	if o == nil || IsNil(o.Tag) {
		var ret []string
		return ret
	}
	return o.Tag
}

// GetTagOk returns a tuple with the Tag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFiltersTagging) GetTagOk() ([]string, bool) {
	if o == nil || IsNil(o.Tag) {
		return nil, false
	}
	return o.Tag, true
}

// HasTag returns a boolean if a field has been set.
func (o *ApplicationFiltersTagging) HasTag() bool {
	if o != nil && !IsNil(o.Tag) {
		return true
	}

	return false
}

// SetTag gets a reference to the given []string and assigns it to the Tag field.
func (o *ApplicationFiltersTagging) SetTag(v []string) {
	o.Tag = v
}

func (o ApplicationFiltersTagging) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationFiltersTagging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NoTag) {
		toSerialize["no_tag"] = o.NoTag
	}
	if !IsNil(o.Tag) {
		toSerialize["tag"] = o.Tag
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplicationFiltersTagging) UnmarshalJSON(data []byte) (err error) {
	varApplicationFiltersTagging := _ApplicationFiltersTagging{}

	err = json.Unmarshal(data, &varApplicationFiltersTagging)

	if err != nil {
		return err
	}

	*o = ApplicationFiltersTagging(varApplicationFiltersTagging)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "no_tag")
		delete(additionalProperties, "tag")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationFiltersTagging struct {
	value *ApplicationFiltersTagging
	isSet bool
}

func (v NullableApplicationFiltersTagging) Get() *ApplicationFiltersTagging {
	return v.value
}

func (v *NullableApplicationFiltersTagging) Set(val *ApplicationFiltersTagging) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationFiltersTagging) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationFiltersTagging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationFiltersTagging(val *ApplicationFiltersTagging) *NullableApplicationFiltersTagging {
	return &NullableApplicationFiltersTagging{value: val, isSet: true}
}

func (v NullableApplicationFiltersTagging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationFiltersTagging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
