/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the ApplicationsSignatureInnerAndConditionInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationsSignatureInnerAndConditionInner{}

// ApplicationsSignatureInnerAndConditionInner struct for ApplicationsSignatureInnerAndConditionInner
type ApplicationsSignatureInnerAndConditionInner struct {
	// Alphanumeric string [ 0-9a-zA-Z._-]
	Name                 string                                                        `json:"name"`
	OrCondition          []ApplicationsSignatureInnerAndConditionInnerOrConditionInner `json:"or_condition,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationsSignatureInnerAndConditionInner ApplicationsSignatureInnerAndConditionInner

// NewApplicationsSignatureInnerAndConditionInner instantiates a new ApplicationsSignatureInnerAndConditionInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationsSignatureInnerAndConditionInner(name string) *ApplicationsSignatureInnerAndConditionInner {
	this := ApplicationsSignatureInnerAndConditionInner{}
	this.Name = name
	return &this
}

// NewApplicationsSignatureInnerAndConditionInnerWithDefaults instantiates a new ApplicationsSignatureInnerAndConditionInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationsSignatureInnerAndConditionInnerWithDefaults() *ApplicationsSignatureInnerAndConditionInner {
	this := ApplicationsSignatureInnerAndConditionInner{}
	return &this
}

// GetName returns the Name field value
func (o *ApplicationsSignatureInnerAndConditionInner) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationsSignatureInnerAndConditionInner) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationsSignatureInnerAndConditionInner) SetName(v string) {
	o.Name = v
}

// GetOrCondition returns the OrCondition field value if set, zero value otherwise.
func (o *ApplicationsSignatureInnerAndConditionInner) GetOrCondition() []ApplicationsSignatureInnerAndConditionInnerOrConditionInner {
	if o == nil || IsNil(o.OrCondition) {
		var ret []ApplicationsSignatureInnerAndConditionInnerOrConditionInner
		return ret
	}
	return o.OrCondition
}

// GetOrConditionOk returns a tuple with the OrCondition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationsSignatureInnerAndConditionInner) GetOrConditionOk() ([]ApplicationsSignatureInnerAndConditionInnerOrConditionInner, bool) {
	if o == nil || IsNil(o.OrCondition) {
		return nil, false
	}
	return o.OrCondition, true
}

// HasOrCondition returns a boolean if a field has been set.
func (o *ApplicationsSignatureInnerAndConditionInner) HasOrCondition() bool {
	if o != nil && !IsNil(o.OrCondition) {
		return true
	}

	return false
}

// SetOrCondition gets a reference to the given []ApplicationsSignatureInnerAndConditionInnerOrConditionInner and assigns it to the OrCondition field.
func (o *ApplicationsSignatureInnerAndConditionInner) SetOrCondition(v []ApplicationsSignatureInnerAndConditionInnerOrConditionInner) {
	o.OrCondition = v
}

func (o ApplicationsSignatureInnerAndConditionInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationsSignatureInnerAndConditionInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.OrCondition) {
		toSerialize["or_condition"] = o.OrCondition
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplicationsSignatureInnerAndConditionInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationsSignatureInnerAndConditionInner := _ApplicationsSignatureInnerAndConditionInner{}

	err = json.Unmarshal(data, &varApplicationsSignatureInnerAndConditionInner)

	if err != nil {
		return err
	}

	*o = ApplicationsSignatureInnerAndConditionInner(varApplicationsSignatureInnerAndConditionInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "or_condition")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationsSignatureInnerAndConditionInner struct {
	value *ApplicationsSignatureInnerAndConditionInner
	isSet bool
}

func (v NullableApplicationsSignatureInnerAndConditionInner) Get() *ApplicationsSignatureInnerAndConditionInner {
	return v.value
}

func (v *NullableApplicationsSignatureInnerAndConditionInner) Set(val *ApplicationsSignatureInnerAndConditionInner) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationsSignatureInnerAndConditionInner) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationsSignatureInnerAndConditionInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationsSignatureInnerAndConditionInner(val *ApplicationsSignatureInnerAndConditionInner) *NullableApplicationsSignatureInnerAndConditionInner {
	return &NullableApplicationsSignatureInnerAndConditionInner{value: val, isSet: true}
}

func (v NullableApplicationsSignatureInnerAndConditionInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationsSignatureInnerAndConditionInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
