/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the SyslogServerProfilesFormatEscaping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SyslogServerProfilesFormatEscaping{}

// SyslogServerProfilesFormatEscaping struct for SyslogServerProfilesFormatEscaping
type SyslogServerProfilesFormatEscaping struct {
	// Escape sequence delimiter
	EscapeCharacter *string `json:"escape_character,omitempty"`
	// A list of all the characters to be escaped (without spaces).
	EscapedCharacters    *string `json:"escaped_characters,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SyslogServerProfilesFormatEscaping SyslogServerProfilesFormatEscaping

// NewSyslogServerProfilesFormatEscaping instantiates a new SyslogServerProfilesFormatEscaping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSyslogServerProfilesFormatEscaping() *SyslogServerProfilesFormatEscaping {
	this := SyslogServerProfilesFormatEscaping{}
	return &this
}

// NewSyslogServerProfilesFormatEscapingWithDefaults instantiates a new SyslogServerProfilesFormatEscaping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSyslogServerProfilesFormatEscapingWithDefaults() *SyslogServerProfilesFormatEscaping {
	this := SyslogServerProfilesFormatEscaping{}
	return &this
}

// GetEscapeCharacter returns the EscapeCharacter field value if set, zero value otherwise.
func (o *SyslogServerProfilesFormatEscaping) GetEscapeCharacter() string {
	if o == nil || IsNil(o.EscapeCharacter) {
		var ret string
		return ret
	}
	return *o.EscapeCharacter
}

// GetEscapeCharacterOk returns a tuple with the EscapeCharacter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogServerProfilesFormatEscaping) GetEscapeCharacterOk() (*string, bool) {
	if o == nil || IsNil(o.EscapeCharacter) {
		return nil, false
	}
	return o.EscapeCharacter, true
}

// HasEscapeCharacter returns a boolean if a field has been set.
func (o *SyslogServerProfilesFormatEscaping) HasEscapeCharacter() bool {
	if o != nil && !IsNil(o.EscapeCharacter) {
		return true
	}

	return false
}

// SetEscapeCharacter gets a reference to the given string and assigns it to the EscapeCharacter field.
func (o *SyslogServerProfilesFormatEscaping) SetEscapeCharacter(v string) {
	o.EscapeCharacter = &v
}

// GetEscapedCharacters returns the EscapedCharacters field value if set, zero value otherwise.
func (o *SyslogServerProfilesFormatEscaping) GetEscapedCharacters() string {
	if o == nil || IsNil(o.EscapedCharacters) {
		var ret string
		return ret
	}
	return *o.EscapedCharacters
}

// GetEscapedCharactersOk returns a tuple with the EscapedCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SyslogServerProfilesFormatEscaping) GetEscapedCharactersOk() (*string, bool) {
	if o == nil || IsNil(o.EscapedCharacters) {
		return nil, false
	}
	return o.EscapedCharacters, true
}

// HasEscapedCharacters returns a boolean if a field has been set.
func (o *SyslogServerProfilesFormatEscaping) HasEscapedCharacters() bool {
	if o != nil && !IsNil(o.EscapedCharacters) {
		return true
	}

	return false
}

// SetEscapedCharacters gets a reference to the given string and assigns it to the EscapedCharacters field.
func (o *SyslogServerProfilesFormatEscaping) SetEscapedCharacters(v string) {
	o.EscapedCharacters = &v
}

func (o SyslogServerProfilesFormatEscaping) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SyslogServerProfilesFormatEscaping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EscapeCharacter) {
		toSerialize["escape_character"] = o.EscapeCharacter
	}
	if !IsNil(o.EscapedCharacters) {
		toSerialize["escaped_characters"] = o.EscapedCharacters
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SyslogServerProfilesFormatEscaping) UnmarshalJSON(data []byte) (err error) {
	varSyslogServerProfilesFormatEscaping := _SyslogServerProfilesFormatEscaping{}

	err = json.Unmarshal(data, &varSyslogServerProfilesFormatEscaping)

	if err != nil {
		return err
	}

	*o = SyslogServerProfilesFormatEscaping(varSyslogServerProfilesFormatEscaping)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "escape_character")
		delete(additionalProperties, "escaped_characters")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSyslogServerProfilesFormatEscaping struct {
	value *SyslogServerProfilesFormatEscaping
	isSet bool
}

func (v NullableSyslogServerProfilesFormatEscaping) Get() *SyslogServerProfilesFormatEscaping {
	return v.value
}

func (v *NullableSyslogServerProfilesFormatEscaping) Set(val *SyslogServerProfilesFormatEscaping) {
	v.value = val
	v.isSet = true
}

func (v NullableSyslogServerProfilesFormatEscaping) IsSet() bool {
	return v.isSet
}

func (v *NullableSyslogServerProfilesFormatEscaping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSyslogServerProfilesFormatEscaping(val *SyslogServerProfilesFormatEscaping) *NullableSyslogServerProfilesFormatEscaping {
	return &NullableSyslogServerProfilesFormatEscaping{value: val, isSet: true}
}

func (v NullableSyslogServerProfilesFormatEscaping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSyslogServerProfilesFormatEscaping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
