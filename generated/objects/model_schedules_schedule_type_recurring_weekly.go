/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the SchedulesScheduleTypeRecurringWeekly type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulesScheduleTypeRecurringWeekly{}

// SchedulesScheduleTypeRecurringWeekly struct for SchedulesScheduleTypeRecurringWeekly
type SchedulesScheduleTypeRecurringWeekly struct {
	Friday               []string `json:"friday,omitempty"`
	Monday               []string `json:"monday,omitempty"`
	Saturday             []string `json:"saturday,omitempty"`
	Sunday               []string `json:"sunday,omitempty"`
	Thursday             []string `json:"thursday,omitempty"`
	Tuesday              []string `json:"tuesday,omitempty"`
	Wednesday            []string `json:"wednesday,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulesScheduleTypeRecurringWeekly SchedulesScheduleTypeRecurringWeekly

// NewSchedulesScheduleTypeRecurringWeekly instantiates a new SchedulesScheduleTypeRecurringWeekly object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulesScheduleTypeRecurringWeekly() *SchedulesScheduleTypeRecurringWeekly {
	this := SchedulesScheduleTypeRecurringWeekly{}
	return &this
}

// NewSchedulesScheduleTypeRecurringWeeklyWithDefaults instantiates a new SchedulesScheduleTypeRecurringWeekly object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulesScheduleTypeRecurringWeeklyWithDefaults() *SchedulesScheduleTypeRecurringWeekly {
	this := SchedulesScheduleTypeRecurringWeekly{}
	return &this
}

// GetFriday returns the Friday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetFriday() []string {
	if o == nil || IsNil(o.Friday) {
		var ret []string
		return ret
	}
	return o.Friday
}

// GetFridayOk returns a tuple with the Friday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetFridayOk() ([]string, bool) {
	if o == nil || IsNil(o.Friday) {
		return nil, false
	}
	return o.Friday, true
}

// HasFriday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasFriday() bool {
	if o != nil && !IsNil(o.Friday) {
		return true
	}

	return false
}

// SetFriday gets a reference to the given []string and assigns it to the Friday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetFriday(v []string) {
	o.Friday = v
}

// GetMonday returns the Monday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetMonday() []string {
	if o == nil || IsNil(o.Monday) {
		var ret []string
		return ret
	}
	return o.Monday
}

// GetMondayOk returns a tuple with the Monday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetMondayOk() ([]string, bool) {
	if o == nil || IsNil(o.Monday) {
		return nil, false
	}
	return o.Monday, true
}

// HasMonday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasMonday() bool {
	if o != nil && !IsNil(o.Monday) {
		return true
	}

	return false
}

// SetMonday gets a reference to the given []string and assigns it to the Monday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetMonday(v []string) {
	o.Monday = v
}

// GetSaturday returns the Saturday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetSaturday() []string {
	if o == nil || IsNil(o.Saturday) {
		var ret []string
		return ret
	}
	return o.Saturday
}

// GetSaturdayOk returns a tuple with the Saturday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetSaturdayOk() ([]string, bool) {
	if o == nil || IsNil(o.Saturday) {
		return nil, false
	}
	return o.Saturday, true
}

// HasSaturday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasSaturday() bool {
	if o != nil && !IsNil(o.Saturday) {
		return true
	}

	return false
}

// SetSaturday gets a reference to the given []string and assigns it to the Saturday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetSaturday(v []string) {
	o.Saturday = v
}

// GetSunday returns the Sunday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetSunday() []string {
	if o == nil || IsNil(o.Sunday) {
		var ret []string
		return ret
	}
	return o.Sunday
}

// GetSundayOk returns a tuple with the Sunday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetSundayOk() ([]string, bool) {
	if o == nil || IsNil(o.Sunday) {
		return nil, false
	}
	return o.Sunday, true
}

// HasSunday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasSunday() bool {
	if o != nil && !IsNil(o.Sunday) {
		return true
	}

	return false
}

// SetSunday gets a reference to the given []string and assigns it to the Sunday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetSunday(v []string) {
	o.Sunday = v
}

// GetThursday returns the Thursday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetThursday() []string {
	if o == nil || IsNil(o.Thursday) {
		var ret []string
		return ret
	}
	return o.Thursday
}

// GetThursdayOk returns a tuple with the Thursday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetThursdayOk() ([]string, bool) {
	if o == nil || IsNil(o.Thursday) {
		return nil, false
	}
	return o.Thursday, true
}

// HasThursday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasThursday() bool {
	if o != nil && !IsNil(o.Thursday) {
		return true
	}

	return false
}

// SetThursday gets a reference to the given []string and assigns it to the Thursday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetThursday(v []string) {
	o.Thursday = v
}

// GetTuesday returns the Tuesday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetTuesday() []string {
	if o == nil || IsNil(o.Tuesday) {
		var ret []string
		return ret
	}
	return o.Tuesday
}

// GetTuesdayOk returns a tuple with the Tuesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetTuesdayOk() ([]string, bool) {
	if o == nil || IsNil(o.Tuesday) {
		return nil, false
	}
	return o.Tuesday, true
}

// HasTuesday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasTuesday() bool {
	if o != nil && !IsNil(o.Tuesday) {
		return true
	}

	return false
}

// SetTuesday gets a reference to the given []string and assigns it to the Tuesday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetTuesday(v []string) {
	o.Tuesday = v
}

// GetWednesday returns the Wednesday field value if set, zero value otherwise.
func (o *SchedulesScheduleTypeRecurringWeekly) GetWednesday() []string {
	if o == nil || IsNil(o.Wednesday) {
		var ret []string
		return ret
	}
	return o.Wednesday
}

// GetWednesdayOk returns a tuple with the Wednesday field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) GetWednesdayOk() ([]string, bool) {
	if o == nil || IsNil(o.Wednesday) {
		return nil, false
	}
	return o.Wednesday, true
}

// HasWednesday returns a boolean if a field has been set.
func (o *SchedulesScheduleTypeRecurringWeekly) HasWednesday() bool {
	if o != nil && !IsNil(o.Wednesday) {
		return true
	}

	return false
}

// SetWednesday gets a reference to the given []string and assigns it to the Wednesday field.
func (o *SchedulesScheduleTypeRecurringWeekly) SetWednesday(v []string) {
	o.Wednesday = v
}

func (o SchedulesScheduleTypeRecurringWeekly) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulesScheduleTypeRecurringWeekly) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Friday) {
		toSerialize["friday"] = o.Friday
	}
	if !IsNil(o.Monday) {
		toSerialize["monday"] = o.Monday
	}
	if !IsNil(o.Saturday) {
		toSerialize["saturday"] = o.Saturday
	}
	if !IsNil(o.Sunday) {
		toSerialize["sunday"] = o.Sunday
	}
	if !IsNil(o.Thursday) {
		toSerialize["thursday"] = o.Thursday
	}
	if !IsNil(o.Tuesday) {
		toSerialize["tuesday"] = o.Tuesday
	}
	if !IsNil(o.Wednesday) {
		toSerialize["wednesday"] = o.Wednesday
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchedulesScheduleTypeRecurringWeekly) UnmarshalJSON(data []byte) (err error) {
	varSchedulesScheduleTypeRecurringWeekly := _SchedulesScheduleTypeRecurringWeekly{}

	err = json.Unmarshal(data, &varSchedulesScheduleTypeRecurringWeekly)

	if err != nil {
		return err
	}

	*o = SchedulesScheduleTypeRecurringWeekly(varSchedulesScheduleTypeRecurringWeekly)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "friday")
		delete(additionalProperties, "monday")
		delete(additionalProperties, "saturday")
		delete(additionalProperties, "sunday")
		delete(additionalProperties, "thursday")
		delete(additionalProperties, "tuesday")
		delete(additionalProperties, "wednesday")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulesScheduleTypeRecurringWeekly struct {
	value *SchedulesScheduleTypeRecurringWeekly
	isSet bool
}

func (v NullableSchedulesScheduleTypeRecurringWeekly) Get() *SchedulesScheduleTypeRecurringWeekly {
	return v.value
}

func (v *NullableSchedulesScheduleTypeRecurringWeekly) Set(val *SchedulesScheduleTypeRecurringWeekly) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulesScheduleTypeRecurringWeekly) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulesScheduleTypeRecurringWeekly) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulesScheduleTypeRecurringWeekly(val *SchedulesScheduleTypeRecurringWeekly) *NullableSchedulesScheduleTypeRecurringWeekly {
	return &NullableSchedulesScheduleTypeRecurringWeekly{value: val, isSet: true}
}

func (v NullableSchedulesScheduleTypeRecurringWeekly) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulesScheduleTypeRecurringWeekly) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
