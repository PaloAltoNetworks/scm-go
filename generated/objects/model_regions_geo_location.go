/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the RegionsGeoLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegionsGeoLocation{}

// RegionsGeoLocation struct for RegionsGeoLocation
type RegionsGeoLocation struct {
	// The latitudinal position of the region
	Latitude float32 `json:"latitude"`
	// The longitudinal postition of the region
	Longitude            float32 `json:"longitude"`
	AdditionalProperties map[string]interface{}
}

type _RegionsGeoLocation RegionsGeoLocation

// NewRegionsGeoLocation instantiates a new RegionsGeoLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegionsGeoLocation(latitude float32, longitude float32) *RegionsGeoLocation {
	this := RegionsGeoLocation{}
	this.Latitude = latitude
	this.Longitude = longitude
	return &this
}

// NewRegionsGeoLocationWithDefaults instantiates a new RegionsGeoLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegionsGeoLocationWithDefaults() *RegionsGeoLocation {
	this := RegionsGeoLocation{}
	return &this
}

// GetLatitude returns the Latitude field value
func (o *RegionsGeoLocation) GetLatitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *RegionsGeoLocation) GetLatitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *RegionsGeoLocation) SetLatitude(v float32) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *RegionsGeoLocation) GetLongitude() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *RegionsGeoLocation) GetLongitudeOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *RegionsGeoLocation) SetLongitude(v float32) {
	o.Longitude = v
}

func (o RegionsGeoLocation) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegionsGeoLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *RegionsGeoLocation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegionsGeoLocation := _RegionsGeoLocation{}

	err = json.Unmarshal(data, &varRegionsGeoLocation)

	if err != nil {
		return err
	}

	*o = RegionsGeoLocation(varRegionsGeoLocation)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "latitude")
		delete(additionalProperties, "longitude")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableRegionsGeoLocation struct {
	value *RegionsGeoLocation
	isSet bool
}

func (v NullableRegionsGeoLocation) Get() *RegionsGeoLocation {
	return v.value
}

func (v *NullableRegionsGeoLocation) Set(val *RegionsGeoLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionsGeoLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionsGeoLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionsGeoLocation(val *RegionsGeoLocation) *NullableRegionsGeoLocation {
	return &NullableRegionsGeoLocation{value: val, isSet: true}
}

func (v NullableRegionsGeoLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionsGeoLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
