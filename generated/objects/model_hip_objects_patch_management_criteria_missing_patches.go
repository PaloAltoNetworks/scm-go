/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the HipObjectsPatchManagementCriteriaMissingPatches type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HipObjectsPatchManagementCriteriaMissingPatches{}

// HipObjectsPatchManagementCriteriaMissingPatches struct for HipObjectsPatchManagementCriteriaMissingPatches
type HipObjectsPatchManagementCriteriaMissingPatches struct {
	Check                string                                                   `json:"check"`
	Patches              []string                                                 `json:"patches,omitempty"`
	Severity             *HipObjectsPatchManagementCriteriaMissingPatchesSeverity `json:"severity,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _HipObjectsPatchManagementCriteriaMissingPatches HipObjectsPatchManagementCriteriaMissingPatches

// NewHipObjectsPatchManagementCriteriaMissingPatches instantiates a new HipObjectsPatchManagementCriteriaMissingPatches object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHipObjectsPatchManagementCriteriaMissingPatches(check string) *HipObjectsPatchManagementCriteriaMissingPatches {
	this := HipObjectsPatchManagementCriteriaMissingPatches{}
	this.Check = check
	return &this
}

// NewHipObjectsPatchManagementCriteriaMissingPatchesWithDefaults instantiates a new HipObjectsPatchManagementCriteriaMissingPatches object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHipObjectsPatchManagementCriteriaMissingPatchesWithDefaults() *HipObjectsPatchManagementCriteriaMissingPatches {
	this := HipObjectsPatchManagementCriteriaMissingPatches{}
	var check string = "has-any"
	this.Check = check
	return &this
}

// GetCheck returns the Check field value
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetCheck() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Check
}

// GetCheckOk returns a tuple with the Check field value
// and a boolean to check if the value has been set.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetCheckOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Check, true
}

// SetCheck sets field value
func (o *HipObjectsPatchManagementCriteriaMissingPatches) SetCheck(v string) {
	o.Check = v
}

// GetPatches returns the Patches field value if set, zero value otherwise.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetPatches() []string {
	if o == nil || IsNil(o.Patches) {
		var ret []string
		return ret
	}
	return o.Patches
}

// GetPatchesOk returns a tuple with the Patches field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetPatchesOk() ([]string, bool) {
	if o == nil || IsNil(o.Patches) {
		return nil, false
	}
	return o.Patches, true
}

// HasPatches returns a boolean if a field has been set.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) HasPatches() bool {
	if o != nil && !IsNil(o.Patches) {
		return true
	}

	return false
}

// SetPatches gets a reference to the given []string and assigns it to the Patches field.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) SetPatches(v []string) {
	o.Patches = v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetSeverity() HipObjectsPatchManagementCriteriaMissingPatchesSeverity {
	if o == nil || IsNil(o.Severity) {
		var ret HipObjectsPatchManagementCriteriaMissingPatchesSeverity
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) GetSeverityOk() (*HipObjectsPatchManagementCriteriaMissingPatchesSeverity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given HipObjectsPatchManagementCriteriaMissingPatchesSeverity and assigns it to the Severity field.
func (o *HipObjectsPatchManagementCriteriaMissingPatches) SetSeverity(v HipObjectsPatchManagementCriteriaMissingPatchesSeverity) {
	o.Severity = &v
}

func (o HipObjectsPatchManagementCriteriaMissingPatches) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HipObjectsPatchManagementCriteriaMissingPatches) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["check"] = o.Check
	if !IsNil(o.Patches) {
		toSerialize["patches"] = o.Patches
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *HipObjectsPatchManagementCriteriaMissingPatches) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"check",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHipObjectsPatchManagementCriteriaMissingPatches := _HipObjectsPatchManagementCriteriaMissingPatches{}

	err = json.Unmarshal(data, &varHipObjectsPatchManagementCriteriaMissingPatches)

	if err != nil {
		return err
	}

	*o = HipObjectsPatchManagementCriteriaMissingPatches(varHipObjectsPatchManagementCriteriaMissingPatches)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "check")
		delete(additionalProperties, "patches")
		delete(additionalProperties, "severity")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableHipObjectsPatchManagementCriteriaMissingPatches struct {
	value *HipObjectsPatchManagementCriteriaMissingPatches
	isSet bool
}

func (v NullableHipObjectsPatchManagementCriteriaMissingPatches) Get() *HipObjectsPatchManagementCriteriaMissingPatches {
	return v.value
}

func (v *NullableHipObjectsPatchManagementCriteriaMissingPatches) Set(val *HipObjectsPatchManagementCriteriaMissingPatches) {
	v.value = val
	v.isSet = true
}

func (v NullableHipObjectsPatchManagementCriteriaMissingPatches) IsSet() bool {
	return v.isSet
}

func (v *NullableHipObjectsPatchManagementCriteriaMissingPatches) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHipObjectsPatchManagementCriteriaMissingPatches(val *HipObjectsPatchManagementCriteriaMissingPatches) *NullableHipObjectsPatchManagementCriteriaMissingPatches {
	return &NullableHipObjectsPatchManagementCriteriaMissingPatches{value: val, isSet: true}
}

func (v NullableHipObjectsPatchManagementCriteriaMissingPatches) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHipObjectsPatchManagementCriteriaMissingPatches) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
