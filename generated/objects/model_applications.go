/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the Applications type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Applications{}

// Applications struct for Applications
type Applications struct {
	AbleToTransferFile   *bool                `json:"able_to_transfer_file,omitempty"`
	AlgDisableCapability *string              `json:"alg_disable_capability,omitempty"`
	Category             string               `json:"category"`
	ConsumeBigBandwidth  *bool                `json:"consume_big_bandwidth,omitempty"`
	DataIdent            *bool                `json:"data_ident,omitempty"`
	Default              *ApplicationsDefault `json:"default,omitempty"`
	Description          *string              `json:"description,omitempty"`
	// The device in which the resource is defined
	Device          *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	EvasiveBehavior *bool   `json:"evasive_behavior,omitempty"`
	FileTypeIdent   *bool   `json:"file_type_ident,omitempty"`
	// The folder in which the resource is defined
	Folder                *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	HasKnownVulnerability *bool   `json:"has_known_vulnerability,omitempty"`
	// The UUID of the application
	Id *string `json:"id,omitempty"`
	// The name of the application
	Name           string                       `json:"name"`
	NoAppidCaching *bool                        `json:"no_appid_caching,omitempty"`
	ParentApp      *string                      `json:"parent_app,omitempty"`
	PervasiveUse   *bool                        `json:"pervasive_use,omitempty"`
	ProneToMisuse  *bool                        `json:"prone_to_misuse,omitempty"`
	Risk           interface{}                  `json:"risk"`
	Signature      []ApplicationsSignatureInner `json:"signature,omitempty"`
	// The snippet in which the resource is defined
	Snippet     *string `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	Subcategory *string `json:"subcategory,omitempty"`
	// timeout for half-close session in seconds
	TcpHalfClosedTimeout *int32 `json:"tcp_half_closed_timeout,omitempty"`
	// timeout for session in time_wait state in seconds
	TcpTimeWaitTimeout *int32 `json:"tcp_time_wait_timeout,omitempty"`
	// timeout in seconds
	TcpTimeout *int32  `json:"tcp_timeout,omitempty"`
	Technology *string `json:"technology,omitempty"`
	// timeout in seconds
	Timeout                *int32 `json:"timeout,omitempty"`
	TunnelApplications     *bool  `json:"tunnel_applications,omitempty"`
	TunnelOtherApplication *bool  `json:"tunnel_other_application,omitempty"`
	// timeout in seconds
	UdpTimeout           *int32 `json:"udp_timeout,omitempty"`
	UsedByMalware        *bool  `json:"used_by_malware,omitempty"`
	VirusIdent           *bool  `json:"virus_ident,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _Applications Applications

// NewApplications instantiates a new Applications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplications(category string, name string, risk interface{}) *Applications {
	this := Applications{}
	this.Category = category
	this.Name = name
	this.Risk = risk
	return &this
}

// NewApplicationsWithDefaults instantiates a new Applications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationsWithDefaults() *Applications {
	this := Applications{}
	return &this
}

// GetAbleToTransferFile returns the AbleToTransferFile field value if set, zero value otherwise.
func (o *Applications) GetAbleToTransferFile() bool {
	if o == nil || IsNil(o.AbleToTransferFile) {
		var ret bool
		return ret
	}
	return *o.AbleToTransferFile
}

// GetAbleToTransferFileOk returns a tuple with the AbleToTransferFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetAbleToTransferFileOk() (*bool, bool) {
	if o == nil || IsNil(o.AbleToTransferFile) {
		return nil, false
	}
	return o.AbleToTransferFile, true
}

// HasAbleToTransferFile returns a boolean if a field has been set.
func (o *Applications) HasAbleToTransferFile() bool {
	if o != nil && !IsNil(o.AbleToTransferFile) {
		return true
	}

	return false
}

// SetAbleToTransferFile gets a reference to the given bool and assigns it to the AbleToTransferFile field.
func (o *Applications) SetAbleToTransferFile(v bool) {
	o.AbleToTransferFile = &v
}

// GetAlgDisableCapability returns the AlgDisableCapability field value if set, zero value otherwise.
func (o *Applications) GetAlgDisableCapability() string {
	if o == nil || IsNil(o.AlgDisableCapability) {
		var ret string
		return ret
	}
	return *o.AlgDisableCapability
}

// GetAlgDisableCapabilityOk returns a tuple with the AlgDisableCapability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetAlgDisableCapabilityOk() (*string, bool) {
	if o == nil || IsNil(o.AlgDisableCapability) {
		return nil, false
	}
	return o.AlgDisableCapability, true
}

// HasAlgDisableCapability returns a boolean if a field has been set.
func (o *Applications) HasAlgDisableCapability() bool {
	if o != nil && !IsNil(o.AlgDisableCapability) {
		return true
	}

	return false
}

// SetAlgDisableCapability gets a reference to the given string and assigns it to the AlgDisableCapability field.
func (o *Applications) SetAlgDisableCapability(v string) {
	o.AlgDisableCapability = &v
}

// GetCategory returns the Category field value
func (o *Applications) GetCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
func (o *Applications) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Category, true
}

// SetCategory sets field value
func (o *Applications) SetCategory(v string) {
	o.Category = v
}

// GetConsumeBigBandwidth returns the ConsumeBigBandwidth field value if set, zero value otherwise.
func (o *Applications) GetConsumeBigBandwidth() bool {
	if o == nil || IsNil(o.ConsumeBigBandwidth) {
		var ret bool
		return ret
	}
	return *o.ConsumeBigBandwidth
}

// GetConsumeBigBandwidthOk returns a tuple with the ConsumeBigBandwidth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetConsumeBigBandwidthOk() (*bool, bool) {
	if o == nil || IsNil(o.ConsumeBigBandwidth) {
		return nil, false
	}
	return o.ConsumeBigBandwidth, true
}

// HasConsumeBigBandwidth returns a boolean if a field has been set.
func (o *Applications) HasConsumeBigBandwidth() bool {
	if o != nil && !IsNil(o.ConsumeBigBandwidth) {
		return true
	}

	return false
}

// SetConsumeBigBandwidth gets a reference to the given bool and assigns it to the ConsumeBigBandwidth field.
func (o *Applications) SetConsumeBigBandwidth(v bool) {
	o.ConsumeBigBandwidth = &v
}

// GetDataIdent returns the DataIdent field value if set, zero value otherwise.
func (o *Applications) GetDataIdent() bool {
	if o == nil || IsNil(o.DataIdent) {
		var ret bool
		return ret
	}
	return *o.DataIdent
}

// GetDataIdentOk returns a tuple with the DataIdent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetDataIdentOk() (*bool, bool) {
	if o == nil || IsNil(o.DataIdent) {
		return nil, false
	}
	return o.DataIdent, true
}

// HasDataIdent returns a boolean if a field has been set.
func (o *Applications) HasDataIdent() bool {
	if o != nil && !IsNil(o.DataIdent) {
		return true
	}

	return false
}

// SetDataIdent gets a reference to the given bool and assigns it to the DataIdent field.
func (o *Applications) SetDataIdent(v bool) {
	o.DataIdent = &v
}

// GetDefault returns the Default field value if set, zero value otherwise.
func (o *Applications) GetDefault() ApplicationsDefault {
	if o == nil || IsNil(o.Default) {
		var ret ApplicationsDefault
		return ret
	}
	return *o.Default
}

// GetDefaultOk returns a tuple with the Default field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetDefaultOk() (*ApplicationsDefault, bool) {
	if o == nil || IsNil(o.Default) {
		return nil, false
	}
	return o.Default, true
}

// HasDefault returns a boolean if a field has been set.
func (o *Applications) HasDefault() bool {
	if o != nil && !IsNil(o.Default) {
		return true
	}

	return false
}

// SetDefault gets a reference to the given ApplicationsDefault and assigns it to the Default field.
func (o *Applications) SetDefault(v ApplicationsDefault) {
	o.Default = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Applications) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Applications) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Applications) SetDescription(v string) {
	o.Description = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *Applications) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *Applications) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *Applications) SetDevice(v string) {
	o.Device = &v
}

// GetEvasiveBehavior returns the EvasiveBehavior field value if set, zero value otherwise.
func (o *Applications) GetEvasiveBehavior() bool {
	if o == nil || IsNil(o.EvasiveBehavior) {
		var ret bool
		return ret
	}
	return *o.EvasiveBehavior
}

// GetEvasiveBehaviorOk returns a tuple with the EvasiveBehavior field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetEvasiveBehaviorOk() (*bool, bool) {
	if o == nil || IsNil(o.EvasiveBehavior) {
		return nil, false
	}
	return o.EvasiveBehavior, true
}

// HasEvasiveBehavior returns a boolean if a field has been set.
func (o *Applications) HasEvasiveBehavior() bool {
	if o != nil && !IsNil(o.EvasiveBehavior) {
		return true
	}

	return false
}

// SetEvasiveBehavior gets a reference to the given bool and assigns it to the EvasiveBehavior field.
func (o *Applications) SetEvasiveBehavior(v bool) {
	o.EvasiveBehavior = &v
}

// GetFileTypeIdent returns the FileTypeIdent field value if set, zero value otherwise.
func (o *Applications) GetFileTypeIdent() bool {
	if o == nil || IsNil(o.FileTypeIdent) {
		var ret bool
		return ret
	}
	return *o.FileTypeIdent
}

// GetFileTypeIdentOk returns a tuple with the FileTypeIdent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetFileTypeIdentOk() (*bool, bool) {
	if o == nil || IsNil(o.FileTypeIdent) {
		return nil, false
	}
	return o.FileTypeIdent, true
}

// HasFileTypeIdent returns a boolean if a field has been set.
func (o *Applications) HasFileTypeIdent() bool {
	if o != nil && !IsNil(o.FileTypeIdent) {
		return true
	}

	return false
}

// SetFileTypeIdent gets a reference to the given bool and assigns it to the FileTypeIdent field.
func (o *Applications) SetFileTypeIdent(v bool) {
	o.FileTypeIdent = &v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *Applications) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *Applications) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *Applications) SetFolder(v string) {
	o.Folder = &v
}

// GetHasKnownVulnerability returns the HasKnownVulnerability field value if set, zero value otherwise.
func (o *Applications) GetHasKnownVulnerability() bool {
	if o == nil || IsNil(o.HasKnownVulnerability) {
		var ret bool
		return ret
	}
	return *o.HasKnownVulnerability
}

// GetHasKnownVulnerabilityOk returns a tuple with the HasKnownVulnerability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetHasKnownVulnerabilityOk() (*bool, bool) {
	if o == nil || IsNil(o.HasKnownVulnerability) {
		return nil, false
	}
	return o.HasKnownVulnerability, true
}

// HasHasKnownVulnerability returns a boolean if a field has been set.
func (o *Applications) HasHasKnownVulnerability() bool {
	if o != nil && !IsNil(o.HasKnownVulnerability) {
		return true
	}

	return false
}

// SetHasKnownVulnerability gets a reference to the given bool and assigns it to the HasKnownVulnerability field.
func (o *Applications) SetHasKnownVulnerability(v bool) {
	o.HasKnownVulnerability = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Applications) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Applications) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Applications) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value
func (o *Applications) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Applications) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Applications) SetName(v string) {
	o.Name = v
}

// GetNoAppidCaching returns the NoAppidCaching field value if set, zero value otherwise.
func (o *Applications) GetNoAppidCaching() bool {
	if o == nil || IsNil(o.NoAppidCaching) {
		var ret bool
		return ret
	}
	return *o.NoAppidCaching
}

// GetNoAppidCachingOk returns a tuple with the NoAppidCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetNoAppidCachingOk() (*bool, bool) {
	if o == nil || IsNil(o.NoAppidCaching) {
		return nil, false
	}
	return o.NoAppidCaching, true
}

// HasNoAppidCaching returns a boolean if a field has been set.
func (o *Applications) HasNoAppidCaching() bool {
	if o != nil && !IsNil(o.NoAppidCaching) {
		return true
	}

	return false
}

// SetNoAppidCaching gets a reference to the given bool and assigns it to the NoAppidCaching field.
func (o *Applications) SetNoAppidCaching(v bool) {
	o.NoAppidCaching = &v
}

// GetParentApp returns the ParentApp field value if set, zero value otherwise.
func (o *Applications) GetParentApp() string {
	if o == nil || IsNil(o.ParentApp) {
		var ret string
		return ret
	}
	return *o.ParentApp
}

// GetParentAppOk returns a tuple with the ParentApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetParentAppOk() (*string, bool) {
	if o == nil || IsNil(o.ParentApp) {
		return nil, false
	}
	return o.ParentApp, true
}

// HasParentApp returns a boolean if a field has been set.
func (o *Applications) HasParentApp() bool {
	if o != nil && !IsNil(o.ParentApp) {
		return true
	}

	return false
}

// SetParentApp gets a reference to the given string and assigns it to the ParentApp field.
func (o *Applications) SetParentApp(v string) {
	o.ParentApp = &v
}

// GetPervasiveUse returns the PervasiveUse field value if set, zero value otherwise.
func (o *Applications) GetPervasiveUse() bool {
	if o == nil || IsNil(o.PervasiveUse) {
		var ret bool
		return ret
	}
	return *o.PervasiveUse
}

// GetPervasiveUseOk returns a tuple with the PervasiveUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetPervasiveUseOk() (*bool, bool) {
	if o == nil || IsNil(o.PervasiveUse) {
		return nil, false
	}
	return o.PervasiveUse, true
}

// HasPervasiveUse returns a boolean if a field has been set.
func (o *Applications) HasPervasiveUse() bool {
	if o != nil && !IsNil(o.PervasiveUse) {
		return true
	}

	return false
}

// SetPervasiveUse gets a reference to the given bool and assigns it to the PervasiveUse field.
func (o *Applications) SetPervasiveUse(v bool) {
	o.PervasiveUse = &v
}

// GetProneToMisuse returns the ProneToMisuse field value if set, zero value otherwise.
func (o *Applications) GetProneToMisuse() bool {
	if o == nil || IsNil(o.ProneToMisuse) {
		var ret bool
		return ret
	}
	return *o.ProneToMisuse
}

// GetProneToMisuseOk returns a tuple with the ProneToMisuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetProneToMisuseOk() (*bool, bool) {
	if o == nil || IsNil(o.ProneToMisuse) {
		return nil, false
	}
	return o.ProneToMisuse, true
}

// HasProneToMisuse returns a boolean if a field has been set.
func (o *Applications) HasProneToMisuse() bool {
	if o != nil && !IsNil(o.ProneToMisuse) {
		return true
	}

	return false
}

// SetProneToMisuse gets a reference to the given bool and assigns it to the ProneToMisuse field.
func (o *Applications) SetProneToMisuse(v bool) {
	o.ProneToMisuse = &v
}

// GetRisk returns the Risk field value
// If the value is explicit nil, the zero value for interface{} will be returned
func (o *Applications) GetRisk() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}

	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Applications) GetRiskOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Risk) {
		return nil, false
	}
	return &o.Risk, true
}

// SetRisk sets field value
func (o *Applications) SetRisk(v interface{}) {
	o.Risk = v
}

// GetSignature returns the Signature field value if set, zero value otherwise.
func (o *Applications) GetSignature() []ApplicationsSignatureInner {
	if o == nil || IsNil(o.Signature) {
		var ret []ApplicationsSignatureInner
		return ret
	}
	return o.Signature
}

// GetSignatureOk returns a tuple with the Signature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetSignatureOk() ([]ApplicationsSignatureInner, bool) {
	if o == nil || IsNil(o.Signature) {
		return nil, false
	}
	return o.Signature, true
}

// HasSignature returns a boolean if a field has been set.
func (o *Applications) HasSignature() bool {
	if o != nil && !IsNil(o.Signature) {
		return true
	}

	return false
}

// SetSignature gets a reference to the given []ApplicationsSignatureInner and assigns it to the Signature field.
func (o *Applications) SetSignature(v []ApplicationsSignatureInner) {
	o.Signature = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *Applications) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *Applications) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *Applications) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSubcategory returns the Subcategory field value if set, zero value otherwise.
func (o *Applications) GetSubcategory() string {
	if o == nil || IsNil(o.Subcategory) {
		var ret string
		return ret
	}
	return *o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetSubcategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Subcategory) {
		return nil, false
	}
	return o.Subcategory, true
}

// HasSubcategory returns a boolean if a field has been set.
func (o *Applications) HasSubcategory() bool {
	if o != nil && !IsNil(o.Subcategory) {
		return true
	}

	return false
}

// SetSubcategory gets a reference to the given string and assigns it to the Subcategory field.
func (o *Applications) SetSubcategory(v string) {
	o.Subcategory = &v
}

// GetTcpHalfClosedTimeout returns the TcpHalfClosedTimeout field value if set, zero value otherwise.
func (o *Applications) GetTcpHalfClosedTimeout() int32 {
	if o == nil || IsNil(o.TcpHalfClosedTimeout) {
		var ret int32
		return ret
	}
	return *o.TcpHalfClosedTimeout
}

// GetTcpHalfClosedTimeoutOk returns a tuple with the TcpHalfClosedTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTcpHalfClosedTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpHalfClosedTimeout) {
		return nil, false
	}
	return o.TcpHalfClosedTimeout, true
}

// HasTcpHalfClosedTimeout returns a boolean if a field has been set.
func (o *Applications) HasTcpHalfClosedTimeout() bool {
	if o != nil && !IsNil(o.TcpHalfClosedTimeout) {
		return true
	}

	return false
}

// SetTcpHalfClosedTimeout gets a reference to the given int32 and assigns it to the TcpHalfClosedTimeout field.
func (o *Applications) SetTcpHalfClosedTimeout(v int32) {
	o.TcpHalfClosedTimeout = &v
}

// GetTcpTimeWaitTimeout returns the TcpTimeWaitTimeout field value if set, zero value otherwise.
func (o *Applications) GetTcpTimeWaitTimeout() int32 {
	if o == nil || IsNil(o.TcpTimeWaitTimeout) {
		var ret int32
		return ret
	}
	return *o.TcpTimeWaitTimeout
}

// GetTcpTimeWaitTimeoutOk returns a tuple with the TcpTimeWaitTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTcpTimeWaitTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpTimeWaitTimeout) {
		return nil, false
	}
	return o.TcpTimeWaitTimeout, true
}

// HasTcpTimeWaitTimeout returns a boolean if a field has been set.
func (o *Applications) HasTcpTimeWaitTimeout() bool {
	if o != nil && !IsNil(o.TcpTimeWaitTimeout) {
		return true
	}

	return false
}

// SetTcpTimeWaitTimeout gets a reference to the given int32 and assigns it to the TcpTimeWaitTimeout field.
func (o *Applications) SetTcpTimeWaitTimeout(v int32) {
	o.TcpTimeWaitTimeout = &v
}

// GetTcpTimeout returns the TcpTimeout field value if set, zero value otherwise.
func (o *Applications) GetTcpTimeout() int32 {
	if o == nil || IsNil(o.TcpTimeout) {
		var ret int32
		return ret
	}
	return *o.TcpTimeout
}

// GetTcpTimeoutOk returns a tuple with the TcpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTcpTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.TcpTimeout) {
		return nil, false
	}
	return o.TcpTimeout, true
}

// HasTcpTimeout returns a boolean if a field has been set.
func (o *Applications) HasTcpTimeout() bool {
	if o != nil && !IsNil(o.TcpTimeout) {
		return true
	}

	return false
}

// SetTcpTimeout gets a reference to the given int32 and assigns it to the TcpTimeout field.
func (o *Applications) SetTcpTimeout(v int32) {
	o.TcpTimeout = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *Applications) GetTechnology() string {
	if o == nil || IsNil(o.Technology) {
		var ret string
		return ret
	}
	return *o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTechnologyOk() (*string, bool) {
	if o == nil || IsNil(o.Technology) {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *Applications) HasTechnology() bool {
	if o != nil && !IsNil(o.Technology) {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given string and assigns it to the Technology field.
func (o *Applications) SetTechnology(v string) {
	o.Technology = &v
}

// GetTimeout returns the Timeout field value if set, zero value otherwise.
func (o *Applications) GetTimeout() int32 {
	if o == nil || IsNil(o.Timeout) {
		var ret int32
		return ret
	}
	return *o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.Timeout) {
		return nil, false
	}
	return o.Timeout, true
}

// HasTimeout returns a boolean if a field has been set.
func (o *Applications) HasTimeout() bool {
	if o != nil && !IsNil(o.Timeout) {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given int32 and assigns it to the Timeout field.
func (o *Applications) SetTimeout(v int32) {
	o.Timeout = &v
}

// GetTunnelApplications returns the TunnelApplications field value if set, zero value otherwise.
func (o *Applications) GetTunnelApplications() bool {
	if o == nil || IsNil(o.TunnelApplications) {
		var ret bool
		return ret
	}
	return *o.TunnelApplications
}

// GetTunnelApplicationsOk returns a tuple with the TunnelApplications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTunnelApplicationsOk() (*bool, bool) {
	if o == nil || IsNil(o.TunnelApplications) {
		return nil, false
	}
	return o.TunnelApplications, true
}

// HasTunnelApplications returns a boolean if a field has been set.
func (o *Applications) HasTunnelApplications() bool {
	if o != nil && !IsNil(o.TunnelApplications) {
		return true
	}

	return false
}

// SetTunnelApplications gets a reference to the given bool and assigns it to the TunnelApplications field.
func (o *Applications) SetTunnelApplications(v bool) {
	o.TunnelApplications = &v
}

// GetTunnelOtherApplication returns the TunnelOtherApplication field value if set, zero value otherwise.
func (o *Applications) GetTunnelOtherApplication() bool {
	if o == nil || IsNil(o.TunnelOtherApplication) {
		var ret bool
		return ret
	}
	return *o.TunnelOtherApplication
}

// GetTunnelOtherApplicationOk returns a tuple with the TunnelOtherApplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetTunnelOtherApplicationOk() (*bool, bool) {
	if o == nil || IsNil(o.TunnelOtherApplication) {
		return nil, false
	}
	return o.TunnelOtherApplication, true
}

// HasTunnelOtherApplication returns a boolean if a field has been set.
func (o *Applications) HasTunnelOtherApplication() bool {
	if o != nil && !IsNil(o.TunnelOtherApplication) {
		return true
	}

	return false
}

// SetTunnelOtherApplication gets a reference to the given bool and assigns it to the TunnelOtherApplication field.
func (o *Applications) SetTunnelOtherApplication(v bool) {
	o.TunnelOtherApplication = &v
}

// GetUdpTimeout returns the UdpTimeout field value if set, zero value otherwise.
func (o *Applications) GetUdpTimeout() int32 {
	if o == nil || IsNil(o.UdpTimeout) {
		var ret int32
		return ret
	}
	return *o.UdpTimeout
}

// GetUdpTimeoutOk returns a tuple with the UdpTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetUdpTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.UdpTimeout) {
		return nil, false
	}
	return o.UdpTimeout, true
}

// HasUdpTimeout returns a boolean if a field has been set.
func (o *Applications) HasUdpTimeout() bool {
	if o != nil && !IsNil(o.UdpTimeout) {
		return true
	}

	return false
}

// SetUdpTimeout gets a reference to the given int32 and assigns it to the UdpTimeout field.
func (o *Applications) SetUdpTimeout(v int32) {
	o.UdpTimeout = &v
}

// GetUsedByMalware returns the UsedByMalware field value if set, zero value otherwise.
func (o *Applications) GetUsedByMalware() bool {
	if o == nil || IsNil(o.UsedByMalware) {
		var ret bool
		return ret
	}
	return *o.UsedByMalware
}

// GetUsedByMalwareOk returns a tuple with the UsedByMalware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetUsedByMalwareOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedByMalware) {
		return nil, false
	}
	return o.UsedByMalware, true
}

// HasUsedByMalware returns a boolean if a field has been set.
func (o *Applications) HasUsedByMalware() bool {
	if o != nil && !IsNil(o.UsedByMalware) {
		return true
	}

	return false
}

// SetUsedByMalware gets a reference to the given bool and assigns it to the UsedByMalware field.
func (o *Applications) SetUsedByMalware(v bool) {
	o.UsedByMalware = &v
}

// GetVirusIdent returns the VirusIdent field value if set, zero value otherwise.
func (o *Applications) GetVirusIdent() bool {
	if o == nil || IsNil(o.VirusIdent) {
		var ret bool
		return ret
	}
	return *o.VirusIdent
}

// GetVirusIdentOk returns a tuple with the VirusIdent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Applications) GetVirusIdentOk() (*bool, bool) {
	if o == nil || IsNil(o.VirusIdent) {
		return nil, false
	}
	return o.VirusIdent, true
}

// HasVirusIdent returns a boolean if a field has been set.
func (o *Applications) HasVirusIdent() bool {
	if o != nil && !IsNil(o.VirusIdent) {
		return true
	}

	return false
}

// SetVirusIdent gets a reference to the given bool and assigns it to the VirusIdent field.
func (o *Applications) SetVirusIdent(v bool) {
	o.VirusIdent = &v
}

func (o Applications) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Applications) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbleToTransferFile) {
		toSerialize["able_to_transfer_file"] = o.AbleToTransferFile
	}
	if !IsNil(o.AlgDisableCapability) {
		toSerialize["alg_disable_capability"] = o.AlgDisableCapability
	}
	toSerialize["category"] = o.Category
	if !IsNil(o.ConsumeBigBandwidth) {
		toSerialize["consume_big_bandwidth"] = o.ConsumeBigBandwidth
	}
	if !IsNil(o.DataIdent) {
		toSerialize["data_ident"] = o.DataIdent
	}
	if !IsNil(o.Default) {
		toSerialize["default"] = o.Default
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.EvasiveBehavior) {
		toSerialize["evasive_behavior"] = o.EvasiveBehavior
	}
	if !IsNil(o.FileTypeIdent) {
		toSerialize["file_type_ident"] = o.FileTypeIdent
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.HasKnownVulnerability) {
		toSerialize["has_known_vulnerability"] = o.HasKnownVulnerability
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NoAppidCaching) {
		toSerialize["no_appid_caching"] = o.NoAppidCaching
	}
	if !IsNil(o.ParentApp) {
		toSerialize["parent_app"] = o.ParentApp
	}
	if !IsNil(o.PervasiveUse) {
		toSerialize["pervasive_use"] = o.PervasiveUse
	}
	if !IsNil(o.ProneToMisuse) {
		toSerialize["prone_to_misuse"] = o.ProneToMisuse
	}
	if o.Risk != nil {
		toSerialize["risk"] = o.Risk
	}
	if !IsNil(o.Signature) {
		toSerialize["signature"] = o.Signature
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Subcategory) {
		toSerialize["subcategory"] = o.Subcategory
	}
	if !IsNil(o.TcpHalfClosedTimeout) {
		toSerialize["tcp_half_closed_timeout"] = o.TcpHalfClosedTimeout
	}
	if !IsNil(o.TcpTimeWaitTimeout) {
		toSerialize["tcp_time_wait_timeout"] = o.TcpTimeWaitTimeout
	}
	if !IsNil(o.TcpTimeout) {
		toSerialize["tcp_timeout"] = o.TcpTimeout
	}
	if !IsNil(o.Technology) {
		toSerialize["technology"] = o.Technology
	}
	if !IsNil(o.Timeout) {
		toSerialize["timeout"] = o.Timeout
	}
	if !IsNil(o.TunnelApplications) {
		toSerialize["tunnel_applications"] = o.TunnelApplications
	}
	if !IsNil(o.TunnelOtherApplication) {
		toSerialize["tunnel_other_application"] = o.TunnelOtherApplication
	}
	if !IsNil(o.UdpTimeout) {
		toSerialize["udp_timeout"] = o.UdpTimeout
	}
	if !IsNil(o.UsedByMalware) {
		toSerialize["used_by_malware"] = o.UsedByMalware
	}
	if !IsNil(o.VirusIdent) {
		toSerialize["virus_ident"] = o.VirusIdent
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *Applications) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"name",
		"risk",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplications := _Applications{}

	err = json.Unmarshal(data, &varApplications)

	if err != nil {
		return err
	}

	*o = Applications(varApplications)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "able_to_transfer_file")
		delete(additionalProperties, "alg_disable_capability")
		delete(additionalProperties, "category")
		delete(additionalProperties, "consume_big_bandwidth")
		delete(additionalProperties, "data_ident")
		delete(additionalProperties, "default")
		delete(additionalProperties, "description")
		delete(additionalProperties, "device")
		delete(additionalProperties, "evasive_behavior")
		delete(additionalProperties, "file_type_ident")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "has_known_vulnerability")
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "no_appid_caching")
		delete(additionalProperties, "parent_app")
		delete(additionalProperties, "pervasive_use")
		delete(additionalProperties, "prone_to_misuse")
		delete(additionalProperties, "risk")
		delete(additionalProperties, "signature")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "subcategory")
		delete(additionalProperties, "tcp_half_closed_timeout")
		delete(additionalProperties, "tcp_time_wait_timeout")
		delete(additionalProperties, "tcp_timeout")
		delete(additionalProperties, "technology")
		delete(additionalProperties, "timeout")
		delete(additionalProperties, "tunnel_applications")
		delete(additionalProperties, "tunnel_other_application")
		delete(additionalProperties, "udp_timeout")
		delete(additionalProperties, "used_by_malware")
		delete(additionalProperties, "virus_ident")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplications struct {
	value *Applications
	isSet bool
}

func (v NullableApplications) Get() *Applications {
	return v.value
}

func (v *NullableApplications) Set(val *Applications) {
	v.value = val
	v.isSet = true
}

func (v NullableApplications) IsSet() bool {
	return v.isSet
}

func (v *NullableApplications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplications(val *Applications) *NullableApplications {
	return &NullableApplications{value: val, isSet: true}
}

func (v NullableApplications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
