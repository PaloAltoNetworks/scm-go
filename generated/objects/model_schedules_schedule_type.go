/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the SchedulesScheduleType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SchedulesScheduleType{}

// SchedulesScheduleType struct for SchedulesScheduleType
type SchedulesScheduleType struct {
	NonRecurring         []string                        `json:"non_recurring,omitempty"`
	Recurring            *SchedulesScheduleTypeRecurring `json:"recurring,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SchedulesScheduleType SchedulesScheduleType

// NewSchedulesScheduleType instantiates a new SchedulesScheduleType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulesScheduleType() *SchedulesScheduleType {
	this := SchedulesScheduleType{}
	return &this
}

// NewSchedulesScheduleTypeWithDefaults instantiates a new SchedulesScheduleType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulesScheduleTypeWithDefaults() *SchedulesScheduleType {
	this := SchedulesScheduleType{}
	return &this
}

// GetNonRecurring returns the NonRecurring field value if set, zero value otherwise.
func (o *SchedulesScheduleType) GetNonRecurring() []string {
	if o == nil || IsNil(o.NonRecurring) {
		var ret []string
		return ret
	}
	return o.NonRecurring
}

// GetNonRecurringOk returns a tuple with the NonRecurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleType) GetNonRecurringOk() ([]string, bool) {
	if o == nil || IsNil(o.NonRecurring) {
		return nil, false
	}
	return o.NonRecurring, true
}

// HasNonRecurring returns a boolean if a field has been set.
func (o *SchedulesScheduleType) HasNonRecurring() bool {
	if o != nil && !IsNil(o.NonRecurring) {
		return true
	}

	return false
}

// SetNonRecurring gets a reference to the given []string and assigns it to the NonRecurring field.
func (o *SchedulesScheduleType) SetNonRecurring(v []string) {
	o.NonRecurring = v
}

// GetRecurring returns the Recurring field value if set, zero value otherwise.
func (o *SchedulesScheduleType) GetRecurring() SchedulesScheduleTypeRecurring {
	if o == nil || IsNil(o.Recurring) {
		var ret SchedulesScheduleTypeRecurring
		return ret
	}
	return *o.Recurring
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulesScheduleType) GetRecurringOk() (*SchedulesScheduleTypeRecurring, bool) {
	if o == nil || IsNil(o.Recurring) {
		return nil, false
	}
	return o.Recurring, true
}

// HasRecurring returns a boolean if a field has been set.
func (o *SchedulesScheduleType) HasRecurring() bool {
	if o != nil && !IsNil(o.Recurring) {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given SchedulesScheduleTypeRecurring and assigns it to the Recurring field.
func (o *SchedulesScheduleType) SetRecurring(v SchedulesScheduleTypeRecurring) {
	o.Recurring = &v
}

func (o SchedulesScheduleType) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SchedulesScheduleType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NonRecurring) {
		toSerialize["non_recurring"] = o.NonRecurring
	}
	if !IsNil(o.Recurring) {
		toSerialize["recurring"] = o.Recurring
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SchedulesScheduleType) UnmarshalJSON(data []byte) (err error) {
	varSchedulesScheduleType := _SchedulesScheduleType{}

	err = json.Unmarshal(data, &varSchedulesScheduleType)

	if err != nil {
		return err
	}

	*o = SchedulesScheduleType(varSchedulesScheduleType)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "non_recurring")
		delete(additionalProperties, "recurring")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSchedulesScheduleType struct {
	value *SchedulesScheduleType
	isSet bool
}

func (v NullableSchedulesScheduleType) Get() *SchedulesScheduleType {
	return v.value
}

func (v *NullableSchedulesScheduleType) Set(val *SchedulesScheduleType) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulesScheduleType) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulesScheduleType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulesScheduleType(val *SchedulesScheduleType) *NullableSchedulesScheduleType {
	return &NullableSchedulesScheduleType{value: val, isSet: true}
}

func (v NullableSchedulesScheduleType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulesScheduleType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
