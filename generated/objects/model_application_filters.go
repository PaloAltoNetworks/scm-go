/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the ApplicationFilters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationFilters{}

// ApplicationFilters struct for ApplicationFilters
type ApplicationFilters struct {
	Category []string `json:"category,omitempty"`
	// The device in which the resource is defined
	Device *string `json:"device,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// only True is a valid value
	Evasive *bool `json:"evasive,omitempty"`
	// only True is a valid value
	ExcessiveBandwidthUse *bool    `json:"excessive_bandwidth_use,omitempty"`
	Exclude               []string `json:"exclude,omitempty"`
	// The folder in which the resource is defined
	Folder *string `json:"folder,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	// only True is a valid value
	HasKnownVulnerabilities *bool `json:"has_known_vulnerabilities,omitempty"`
	// UUID of the resource
	Id *string `json:"id,omitempty"`
	// only True is a valid value
	IsSaas *bool `json:"is_saas,omitempty"`
	// Alphanumeric string [ 0-9a-zA-Z._-]
	Name string `json:"name"`
	// only True is a valid value
	NewAppid *bool `json:"new_appid,omitempty"`
	// only True is a valid value
	Pervasive *bool `json:"pervasive,omitempty"`
	// only True is a valid value
	ProneToMisuse      *bool    `json:"prone_to_misuse,omitempty"`
	Risk               []int32  `json:"risk,omitempty"`
	SaasCertifications []string `json:"saas_certifications,omitempty"`
	SaasRisk           []string `json:"saas_risk,omitempty"`
	// The snippet in which the resource is defined
	Snippet     *string                    `json:"snippet,omitempty" validate:"regexp=^[a-zA-Z\\\\d-_\\\\. ]+$"`
	Subcategory []string                   `json:"subcategory,omitempty"`
	Tagging     *ApplicationFiltersTagging `json:"tagging,omitempty"`
	Technology  []string                   `json:"technology,omitempty"`
	// only True is a valid value
	TransfersFiles *bool `json:"transfers_files,omitempty"`
	// only True is a valid value
	TunnelsOtherApps *bool `json:"tunnels_other_apps,omitempty"`
	// only True is a valid value
	UsedByMalware        *bool `json:"used_by_malware,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ApplicationFilters ApplicationFilters

// NewApplicationFilters instantiates a new ApplicationFilters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationFilters(name string) *ApplicationFilters {
	this := ApplicationFilters{}
	this.Name = name
	return &this
}

// NewApplicationFiltersWithDefaults instantiates a new ApplicationFilters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationFiltersWithDefaults() *ApplicationFilters {
	this := ApplicationFilters{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *ApplicationFilters) GetCategory() []string {
	if o == nil || IsNil(o.Category) {
		var ret []string
		return ret
	}
	return o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetCategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *ApplicationFilters) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given []string and assigns it to the Category field.
func (o *ApplicationFilters) SetCategory(v []string) {
	o.Category = v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *ApplicationFilters) GetDevice() string {
	if o == nil || IsNil(o.Device) {
		var ret string
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetDeviceOk() (*string, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *ApplicationFilters) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given string and assigns it to the Device field.
func (o *ApplicationFilters) SetDevice(v string) {
	o.Device = &v
}

// GetEvasive returns the Evasive field value if set, zero value otherwise.
func (o *ApplicationFilters) GetEvasive() bool {
	if o == nil || IsNil(o.Evasive) {
		var ret bool
		return ret
	}
	return *o.Evasive
}

// GetEvasiveOk returns a tuple with the Evasive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetEvasiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Evasive) {
		return nil, false
	}
	return o.Evasive, true
}

// HasEvasive returns a boolean if a field has been set.
func (o *ApplicationFilters) HasEvasive() bool {
	if o != nil && !IsNil(o.Evasive) {
		return true
	}

	return false
}

// SetEvasive gets a reference to the given bool and assigns it to the Evasive field.
func (o *ApplicationFilters) SetEvasive(v bool) {
	o.Evasive = &v
}

// GetExcessiveBandwidthUse returns the ExcessiveBandwidthUse field value if set, zero value otherwise.
func (o *ApplicationFilters) GetExcessiveBandwidthUse() bool {
	if o == nil || IsNil(o.ExcessiveBandwidthUse) {
		var ret bool
		return ret
	}
	return *o.ExcessiveBandwidthUse
}

// GetExcessiveBandwidthUseOk returns a tuple with the ExcessiveBandwidthUse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetExcessiveBandwidthUseOk() (*bool, bool) {
	if o == nil || IsNil(o.ExcessiveBandwidthUse) {
		return nil, false
	}
	return o.ExcessiveBandwidthUse, true
}

// HasExcessiveBandwidthUse returns a boolean if a field has been set.
func (o *ApplicationFilters) HasExcessiveBandwidthUse() bool {
	if o != nil && !IsNil(o.ExcessiveBandwidthUse) {
		return true
	}

	return false
}

// SetExcessiveBandwidthUse gets a reference to the given bool and assigns it to the ExcessiveBandwidthUse field.
func (o *ApplicationFilters) SetExcessiveBandwidthUse(v bool) {
	o.ExcessiveBandwidthUse = &v
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *ApplicationFilters) GetExclude() []string {
	if o == nil || IsNil(o.Exclude) {
		var ret []string
		return ret
	}
	return o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetExcludeOk() ([]string, bool) {
	if o == nil || IsNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *ApplicationFilters) HasExclude() bool {
	if o != nil && !IsNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given []string and assigns it to the Exclude field.
func (o *ApplicationFilters) SetExclude(v []string) {
	o.Exclude = v
}

// GetFolder returns the Folder field value if set, zero value otherwise.
func (o *ApplicationFilters) GetFolder() string {
	if o == nil || IsNil(o.Folder) {
		var ret string
		return ret
	}
	return *o.Folder
}

// GetFolderOk returns a tuple with the Folder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetFolderOk() (*string, bool) {
	if o == nil || IsNil(o.Folder) {
		return nil, false
	}
	return o.Folder, true
}

// HasFolder returns a boolean if a field has been set.
func (o *ApplicationFilters) HasFolder() bool {
	if o != nil && !IsNil(o.Folder) {
		return true
	}

	return false
}

// SetFolder gets a reference to the given string and assigns it to the Folder field.
func (o *ApplicationFilters) SetFolder(v string) {
	o.Folder = &v
}

// GetHasKnownVulnerabilities returns the HasKnownVulnerabilities field value if set, zero value otherwise.
func (o *ApplicationFilters) GetHasKnownVulnerabilities() bool {
	if o == nil || IsNil(o.HasKnownVulnerabilities) {
		var ret bool
		return ret
	}
	return *o.HasKnownVulnerabilities
}

// GetHasKnownVulnerabilitiesOk returns a tuple with the HasKnownVulnerabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetHasKnownVulnerabilitiesOk() (*bool, bool) {
	if o == nil || IsNil(o.HasKnownVulnerabilities) {
		return nil, false
	}
	return o.HasKnownVulnerabilities, true
}

// HasHasKnownVulnerabilities returns a boolean if a field has been set.
func (o *ApplicationFilters) HasHasKnownVulnerabilities() bool {
	if o != nil && !IsNil(o.HasKnownVulnerabilities) {
		return true
	}

	return false
}

// SetHasKnownVulnerabilities gets a reference to the given bool and assigns it to the HasKnownVulnerabilities field.
func (o *ApplicationFilters) SetHasKnownVulnerabilities(v bool) {
	o.HasKnownVulnerabilities = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ApplicationFilters) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ApplicationFilters) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ApplicationFilters) SetId(v string) {
	o.Id = &v
}

// GetIsSaas returns the IsSaas field value if set, zero value otherwise.
func (o *ApplicationFilters) GetIsSaas() bool {
	if o == nil || IsNil(o.IsSaas) {
		var ret bool
		return ret
	}
	return *o.IsSaas
}

// GetIsSaasOk returns a tuple with the IsSaas field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetIsSaasOk() (*bool, bool) {
	if o == nil || IsNil(o.IsSaas) {
		return nil, false
	}
	return o.IsSaas, true
}

// HasIsSaas returns a boolean if a field has been set.
func (o *ApplicationFilters) HasIsSaas() bool {
	if o != nil && !IsNil(o.IsSaas) {
		return true
	}

	return false
}

// SetIsSaas gets a reference to the given bool and assigns it to the IsSaas field.
func (o *ApplicationFilters) SetIsSaas(v bool) {
	o.IsSaas = &v
}

// GetName returns the Name field value
func (o *ApplicationFilters) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationFilters) SetName(v string) {
	o.Name = v
}

// GetNewAppid returns the NewAppid field value if set, zero value otherwise.
func (o *ApplicationFilters) GetNewAppid() bool {
	if o == nil || IsNil(o.NewAppid) {
		var ret bool
		return ret
	}
	return *o.NewAppid
}

// GetNewAppidOk returns a tuple with the NewAppid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetNewAppidOk() (*bool, bool) {
	if o == nil || IsNil(o.NewAppid) {
		return nil, false
	}
	return o.NewAppid, true
}

// HasNewAppid returns a boolean if a field has been set.
func (o *ApplicationFilters) HasNewAppid() bool {
	if o != nil && !IsNil(o.NewAppid) {
		return true
	}

	return false
}

// SetNewAppid gets a reference to the given bool and assigns it to the NewAppid field.
func (o *ApplicationFilters) SetNewAppid(v bool) {
	o.NewAppid = &v
}

// GetPervasive returns the Pervasive field value if set, zero value otherwise.
func (o *ApplicationFilters) GetPervasive() bool {
	if o == nil || IsNil(o.Pervasive) {
		var ret bool
		return ret
	}
	return *o.Pervasive
}

// GetPervasiveOk returns a tuple with the Pervasive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetPervasiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Pervasive) {
		return nil, false
	}
	return o.Pervasive, true
}

// HasPervasive returns a boolean if a field has been set.
func (o *ApplicationFilters) HasPervasive() bool {
	if o != nil && !IsNil(o.Pervasive) {
		return true
	}

	return false
}

// SetPervasive gets a reference to the given bool and assigns it to the Pervasive field.
func (o *ApplicationFilters) SetPervasive(v bool) {
	o.Pervasive = &v
}

// GetProneToMisuse returns the ProneToMisuse field value if set, zero value otherwise.
func (o *ApplicationFilters) GetProneToMisuse() bool {
	if o == nil || IsNil(o.ProneToMisuse) {
		var ret bool
		return ret
	}
	return *o.ProneToMisuse
}

// GetProneToMisuseOk returns a tuple with the ProneToMisuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetProneToMisuseOk() (*bool, bool) {
	if o == nil || IsNil(o.ProneToMisuse) {
		return nil, false
	}
	return o.ProneToMisuse, true
}

// HasProneToMisuse returns a boolean if a field has been set.
func (o *ApplicationFilters) HasProneToMisuse() bool {
	if o != nil && !IsNil(o.ProneToMisuse) {
		return true
	}

	return false
}

// SetProneToMisuse gets a reference to the given bool and assigns it to the ProneToMisuse field.
func (o *ApplicationFilters) SetProneToMisuse(v bool) {
	o.ProneToMisuse = &v
}

// GetRisk returns the Risk field value if set, zero value otherwise.
func (o *ApplicationFilters) GetRisk() []int32 {
	if o == nil || IsNil(o.Risk) {
		var ret []int32
		return ret
	}
	return o.Risk
}

// GetRiskOk returns a tuple with the Risk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetRiskOk() ([]int32, bool) {
	if o == nil || IsNil(o.Risk) {
		return nil, false
	}
	return o.Risk, true
}

// HasRisk returns a boolean if a field has been set.
func (o *ApplicationFilters) HasRisk() bool {
	if o != nil && !IsNil(o.Risk) {
		return true
	}

	return false
}

// SetRisk gets a reference to the given []int32 and assigns it to the Risk field.
func (o *ApplicationFilters) SetRisk(v []int32) {
	o.Risk = v
}

// GetSaasCertifications returns the SaasCertifications field value if set, zero value otherwise.
func (o *ApplicationFilters) GetSaasCertifications() []string {
	if o == nil || IsNil(o.SaasCertifications) {
		var ret []string
		return ret
	}
	return o.SaasCertifications
}

// GetSaasCertificationsOk returns a tuple with the SaasCertifications field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetSaasCertificationsOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasCertifications) {
		return nil, false
	}
	return o.SaasCertifications, true
}

// HasSaasCertifications returns a boolean if a field has been set.
func (o *ApplicationFilters) HasSaasCertifications() bool {
	if o != nil && !IsNil(o.SaasCertifications) {
		return true
	}

	return false
}

// SetSaasCertifications gets a reference to the given []string and assigns it to the SaasCertifications field.
func (o *ApplicationFilters) SetSaasCertifications(v []string) {
	o.SaasCertifications = v
}

// GetSaasRisk returns the SaasRisk field value if set, zero value otherwise.
func (o *ApplicationFilters) GetSaasRisk() []string {
	if o == nil || IsNil(o.SaasRisk) {
		var ret []string
		return ret
	}
	return o.SaasRisk
}

// GetSaasRiskOk returns a tuple with the SaasRisk field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetSaasRiskOk() ([]string, bool) {
	if o == nil || IsNil(o.SaasRisk) {
		return nil, false
	}
	return o.SaasRisk, true
}

// HasSaasRisk returns a boolean if a field has been set.
func (o *ApplicationFilters) HasSaasRisk() bool {
	if o != nil && !IsNil(o.SaasRisk) {
		return true
	}

	return false
}

// SetSaasRisk gets a reference to the given []string and assigns it to the SaasRisk field.
func (o *ApplicationFilters) SetSaasRisk(v []string) {
	o.SaasRisk = v
}

// GetSnippet returns the Snippet field value if set, zero value otherwise.
func (o *ApplicationFilters) GetSnippet() string {
	if o == nil || IsNil(o.Snippet) {
		var ret string
		return ret
	}
	return *o.Snippet
}

// GetSnippetOk returns a tuple with the Snippet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetSnippetOk() (*string, bool) {
	if o == nil || IsNil(o.Snippet) {
		return nil, false
	}
	return o.Snippet, true
}

// HasSnippet returns a boolean if a field has been set.
func (o *ApplicationFilters) HasSnippet() bool {
	if o != nil && !IsNil(o.Snippet) {
		return true
	}

	return false
}

// SetSnippet gets a reference to the given string and assigns it to the Snippet field.
func (o *ApplicationFilters) SetSnippet(v string) {
	o.Snippet = &v
}

// GetSubcategory returns the Subcategory field value if set, zero value otherwise.
func (o *ApplicationFilters) GetSubcategory() []string {
	if o == nil || IsNil(o.Subcategory) {
		var ret []string
		return ret
	}
	return o.Subcategory
}

// GetSubcategoryOk returns a tuple with the Subcategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetSubcategoryOk() ([]string, bool) {
	if o == nil || IsNil(o.Subcategory) {
		return nil, false
	}
	return o.Subcategory, true
}

// HasSubcategory returns a boolean if a field has been set.
func (o *ApplicationFilters) HasSubcategory() bool {
	if o != nil && !IsNil(o.Subcategory) {
		return true
	}

	return false
}

// SetSubcategory gets a reference to the given []string and assigns it to the Subcategory field.
func (o *ApplicationFilters) SetSubcategory(v []string) {
	o.Subcategory = v
}

// GetTagging returns the Tagging field value if set, zero value otherwise.
func (o *ApplicationFilters) GetTagging() ApplicationFiltersTagging {
	if o == nil || IsNil(o.Tagging) {
		var ret ApplicationFiltersTagging
		return ret
	}
	return *o.Tagging
}

// GetTaggingOk returns a tuple with the Tagging field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetTaggingOk() (*ApplicationFiltersTagging, bool) {
	if o == nil || IsNil(o.Tagging) {
		return nil, false
	}
	return o.Tagging, true
}

// HasTagging returns a boolean if a field has been set.
func (o *ApplicationFilters) HasTagging() bool {
	if o != nil && !IsNil(o.Tagging) {
		return true
	}

	return false
}

// SetTagging gets a reference to the given ApplicationFiltersTagging and assigns it to the Tagging field.
func (o *ApplicationFilters) SetTagging(v ApplicationFiltersTagging) {
	o.Tagging = &v
}

// GetTechnology returns the Technology field value if set, zero value otherwise.
func (o *ApplicationFilters) GetTechnology() []string {
	if o == nil || IsNil(o.Technology) {
		var ret []string
		return ret
	}
	return o.Technology
}

// GetTechnologyOk returns a tuple with the Technology field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetTechnologyOk() ([]string, bool) {
	if o == nil || IsNil(o.Technology) {
		return nil, false
	}
	return o.Technology, true
}

// HasTechnology returns a boolean if a field has been set.
func (o *ApplicationFilters) HasTechnology() bool {
	if o != nil && !IsNil(o.Technology) {
		return true
	}

	return false
}

// SetTechnology gets a reference to the given []string and assigns it to the Technology field.
func (o *ApplicationFilters) SetTechnology(v []string) {
	o.Technology = v
}

// GetTransfersFiles returns the TransfersFiles field value if set, zero value otherwise.
func (o *ApplicationFilters) GetTransfersFiles() bool {
	if o == nil || IsNil(o.TransfersFiles) {
		var ret bool
		return ret
	}
	return *o.TransfersFiles
}

// GetTransfersFilesOk returns a tuple with the TransfersFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetTransfersFilesOk() (*bool, bool) {
	if o == nil || IsNil(o.TransfersFiles) {
		return nil, false
	}
	return o.TransfersFiles, true
}

// HasTransfersFiles returns a boolean if a field has been set.
func (o *ApplicationFilters) HasTransfersFiles() bool {
	if o != nil && !IsNil(o.TransfersFiles) {
		return true
	}

	return false
}

// SetTransfersFiles gets a reference to the given bool and assigns it to the TransfersFiles field.
func (o *ApplicationFilters) SetTransfersFiles(v bool) {
	o.TransfersFiles = &v
}

// GetTunnelsOtherApps returns the TunnelsOtherApps field value if set, zero value otherwise.
func (o *ApplicationFilters) GetTunnelsOtherApps() bool {
	if o == nil || IsNil(o.TunnelsOtherApps) {
		var ret bool
		return ret
	}
	return *o.TunnelsOtherApps
}

// GetTunnelsOtherAppsOk returns a tuple with the TunnelsOtherApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetTunnelsOtherAppsOk() (*bool, bool) {
	if o == nil || IsNil(o.TunnelsOtherApps) {
		return nil, false
	}
	return o.TunnelsOtherApps, true
}

// HasTunnelsOtherApps returns a boolean if a field has been set.
func (o *ApplicationFilters) HasTunnelsOtherApps() bool {
	if o != nil && !IsNil(o.TunnelsOtherApps) {
		return true
	}

	return false
}

// SetTunnelsOtherApps gets a reference to the given bool and assigns it to the TunnelsOtherApps field.
func (o *ApplicationFilters) SetTunnelsOtherApps(v bool) {
	o.TunnelsOtherApps = &v
}

// GetUsedByMalware returns the UsedByMalware field value if set, zero value otherwise.
func (o *ApplicationFilters) GetUsedByMalware() bool {
	if o == nil || IsNil(o.UsedByMalware) {
		var ret bool
		return ret
	}
	return *o.UsedByMalware
}

// GetUsedByMalwareOk returns a tuple with the UsedByMalware field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ApplicationFilters) GetUsedByMalwareOk() (*bool, bool) {
	if o == nil || IsNil(o.UsedByMalware) {
		return nil, false
	}
	return o.UsedByMalware, true
}

// HasUsedByMalware returns a boolean if a field has been set.
func (o *ApplicationFilters) HasUsedByMalware() bool {
	if o != nil && !IsNil(o.UsedByMalware) {
		return true
	}

	return false
}

// SetUsedByMalware gets a reference to the given bool and assigns it to the UsedByMalware field.
func (o *ApplicationFilters) SetUsedByMalware(v bool) {
	o.UsedByMalware = &v
}

func (o ApplicationFilters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationFilters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Evasive) {
		toSerialize["evasive"] = o.Evasive
	}
	if !IsNil(o.ExcessiveBandwidthUse) {
		toSerialize["excessive_bandwidth_use"] = o.ExcessiveBandwidthUse
	}
	if !IsNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !IsNil(o.Folder) {
		toSerialize["folder"] = o.Folder
	}
	if !IsNil(o.HasKnownVulnerabilities) {
		toSerialize["has_known_vulnerabilities"] = o.HasKnownVulnerabilities
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IsSaas) {
		toSerialize["is_saas"] = o.IsSaas
	}
	toSerialize["name"] = o.Name
	if !IsNil(o.NewAppid) {
		toSerialize["new_appid"] = o.NewAppid
	}
	if !IsNil(o.Pervasive) {
		toSerialize["pervasive"] = o.Pervasive
	}
	if !IsNil(o.ProneToMisuse) {
		toSerialize["prone_to_misuse"] = o.ProneToMisuse
	}
	if !IsNil(o.Risk) {
		toSerialize["risk"] = o.Risk
	}
	if !IsNil(o.SaasCertifications) {
		toSerialize["saas_certifications"] = o.SaasCertifications
	}
	if !IsNil(o.SaasRisk) {
		toSerialize["saas_risk"] = o.SaasRisk
	}
	if !IsNil(o.Snippet) {
		toSerialize["snippet"] = o.Snippet
	}
	if !IsNil(o.Subcategory) {
		toSerialize["subcategory"] = o.Subcategory
	}
	if !IsNil(o.Tagging) {
		toSerialize["tagging"] = o.Tagging
	}
	if !IsNil(o.Technology) {
		toSerialize["technology"] = o.Technology
	}
	if !IsNil(o.TransfersFiles) {
		toSerialize["transfers_files"] = o.TransfersFiles
	}
	if !IsNil(o.TunnelsOtherApps) {
		toSerialize["tunnels_other_apps"] = o.TunnelsOtherApps
	}
	if !IsNil(o.UsedByMalware) {
		toSerialize["used_by_malware"] = o.UsedByMalware
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ApplicationFilters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varApplicationFilters := _ApplicationFilters{}

	err = json.Unmarshal(data, &varApplicationFilters)

	if err != nil {
		return err
	}

	*o = ApplicationFilters(varApplicationFilters)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "category")
		delete(additionalProperties, "device")
		delete(additionalProperties, "evasive")
		delete(additionalProperties, "excessive_bandwidth_use")
		delete(additionalProperties, "exclude")
		delete(additionalProperties, "folder")
		delete(additionalProperties, "has_known_vulnerabilities")
		delete(additionalProperties, "id")
		delete(additionalProperties, "is_saas")
		delete(additionalProperties, "name")
		delete(additionalProperties, "new_appid")
		delete(additionalProperties, "pervasive")
		delete(additionalProperties, "prone_to_misuse")
		delete(additionalProperties, "risk")
		delete(additionalProperties, "saas_certifications")
		delete(additionalProperties, "saas_risk")
		delete(additionalProperties, "snippet")
		delete(additionalProperties, "subcategory")
		delete(additionalProperties, "tagging")
		delete(additionalProperties, "technology")
		delete(additionalProperties, "transfers_files")
		delete(additionalProperties, "tunnels_other_apps")
		delete(additionalProperties, "used_by_malware")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableApplicationFilters struct {
	value *ApplicationFilters
	isSet bool
}

func (v NullableApplicationFilters) Get() *ApplicationFilters {
	return v.value
}

func (v *NullableApplicationFilters) Set(val *ApplicationFilters) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationFilters) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationFilters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationFilters(val *ApplicationFilters) *NullableApplicationFilters {
	return &NullableApplicationFilters{value: val, isSet: true}
}

func (v NullableApplicationFilters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationFilters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
