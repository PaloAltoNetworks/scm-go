/*
Objects Testing TagsAPIService
*/
package objects

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/paloaltonetworks/scm-go/common"
	"github.com/paloaltonetworks/scm-go/generated/objects"
)

// Test_objects_TagsAPIService_Create tests the creation of a tag object
// This test creates a new tag and then deletes it to ensure proper cleanup
func Test_objects_TagsAPIService_Create(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create a valid tag object with unique name to avoid conflicts
	createdTagName := "test-tag-create-" + common.GenerateRandomString(10)
	tag := objects.Tags{
		Color:                common.StringPtr("Red"),                             // Tag color
		Comments:             common.StringPtr("Test tag for create API testing"), // Tag description
		Device:               nil,                                                 // Not using device-level scope
		Folder:               common.StringPtr("Prisma Access"),                   // Using Prisma Access folder scope
		Id:                   nil,                                                 // ID will be generated by server
		Name:                 createdTagName,                                      // Unique test name
		Snippet:              nil,                                                 // Not using snippet scope
		AdditionalProperties: nil,
	}

	fmt.Printf("Creating tag with name: %s\n", tag.Name)

	// Make the create request to the API
	req := client.TagsAPI.CreateTags(context.Background()).Tags(tag)
	res, httpRes, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}

	// Verify the creation was successful
	require.NoError(t, err, "Failed to create tag")
	assert.Equal(t, 201, httpRes.StatusCode, "Expected 201 Created status")

	// Assert response object properties
	require.NotNil(t, res, "Response should not be nil")
	assert.Equal(t, createdTagName, res.Name, "Created tag name should match")
	assert.Equal(t, common.StringPtr("Test tag for create API testing"), res.Comments, "Comments should match")
	assert.True(t, *res.Folder == "Shared" || *res.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, common.StringPtr("Red"), res.Color, "Color should match")
	assert.NotNil(t, res.Id, "Created tag should have an ID")
	assert.NotEmpty(t, *res.Id, "Created tag ID should not be empty")

	// Use the ID from the response object
	createdTagID := *res.Id
	t.Logf("Successfully created tag: %s with ID: %s", tag.Name, createdTagID)

	// Cleanup: Delete the created tag to maintain test isolation
	reqDel := client.TagsAPI.DeleteTagsByID(context.Background(), createdTagID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete tag during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up tag: %s", createdTagID)
}

// Test_objects_TagsAPIService_GetByID tests retrieving a tag by its ID
// This test creates a tag, retrieves it by ID, then deletes it
func Test_objects_TagsAPIService_GetByID(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create a tag first to have something to retrieve
	createdTagName := "test-tag-getbyid-" + common.GenerateRandomString(10)
	tag := objects.Tags{
		Color:    common.StringPtr("Blue"),                               // Tag color
		Comments: common.StringPtr("Test tag for get by ID API testing"), // Tag description
		Folder:   common.StringPtr("Prisma Access"),                      // Using Prisma Access folder scope
		Name:     createdTagName,                                         // Unique test name
	}

	// Create the tag via API
	req := client.TagsAPI.CreateTags(context.Background()).Tags(tag)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create tag for get test")
	require.NotNil(t, createRes, "Create response should not be nil")
	require.NotNil(t, createRes.Id, "Created tag should have an ID")
	createdTagID := *createRes.Id
	require.NotEmpty(t, createdTagID, "Created tag ID should not be empty")

	// Test Get by ID operation
	reqGetById := client.TagsAPI.GetTagsByID(context.Background(), createdTagID)
	getRes, httpResGet, err := reqGetById.Execute()
	if err != nil {
		handleAPIError(err)
	}

	// Verify the get operation was successful
	require.NoError(t, err, "Failed to get tag by ID")
	assert.Equal(t, 200, httpResGet.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, getRes, "Get response should not be nil")
	assert.Equal(t, createdTagName, getRes.Name, "Tag name should match")
	assert.Equal(t, common.StringPtr("Test tag for get by ID API testing"), getRes.Comments, "Comments should match")
	assert.True(t, *getRes.Folder == "Shared" || *getRes.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, common.StringPtr("Blue"), getRes.Color, "Color should match")
	require.NotNil(t, getRes.Id, "Tag ID should not be nil")
	assert.Equal(t, createdTagID, *getRes.Id, "Tag ID should match")

	t.Logf("Successfully retrieved tag: %s", getRes.Name)

	// Cleanup: Delete the created tag
	reqDel := client.TagsAPI.DeleteTagsByID(context.Background(), createdTagID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete tag during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up tag: %s", createdTagID)
}

// Test_objects_TagsAPIService_Update tests updating an existing tag
// This test creates a tag, updates it, then deletes it
func Test_objects_TagsAPIService_Update(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create a tag first to have something to update
	createdTagName := "test-tag-update-" + common.GenerateRandomString(10)
	tag := objects.Tags{
		Color:    common.StringPtr("Green"),                           // Initial color
		Comments: common.StringPtr("Test tag for update API testing"), // Initial description
		Folder:   common.StringPtr("Prisma Access"),                   // Using Prisma Access folder scope
		Name:     createdTagName,                                      // Unique test name
	}

	// Create the tag via API
	req := client.TagsAPI.CreateTags(context.Background()).Tags(tag)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create tag for update test")
	require.NotNil(t, createRes, "Create response should not be nil")
	require.NotNil(t, createRes.Id, "Created tag should have an ID")
	createdTagID := *createRes.Id
	require.NotEmpty(t, createdTagID, "Created tag ID should not be empty")

	// Test Update operation with modified fields
	updatedTag := objects.Tags{
		Color:    common.StringPtr("Yellow"),                       // Updated color
		Comments: common.StringPtr("Updated test tag description"), // Updated description
		Folder:   common.StringPtr("Prisma Access"),                // Keep same folder scope
		Name:     createdTagName,                                   // Keep same name (required for update)
	}

	reqUpdate := client.TagsAPI.UpdateTagsByID(context.Background(), createdTagID).Tags(updatedTag)
	updateRes, httpResUpdate, errUpdate := reqUpdate.Execute()
	if errUpdate != nil {
		handleAPIError(errUpdate)
	}

	// Verify the update operation was successful
	require.NoError(t, errUpdate, "Failed to update tag")
	assert.Equal(t, 200, httpResUpdate.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, updateRes, "Update response should not be nil")
	assert.Equal(t, createdTagName, updateRes.Name, "Tag name should remain the same")
	assert.Equal(t, common.StringPtr("Updated test tag description"), updateRes.Comments, "Comments should be updated")
	assert.True(t, *updateRes.Folder == "Shared" || *updateRes.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, common.StringPtr("Yellow"), updateRes.Color, "Color should be updated")
	require.NotNil(t, updateRes.Id, "Tag ID should not be nil")
	assert.Equal(t, createdTagID, *updateRes.Id, "Tag ID should remain the same")

	t.Logf("Successfully updated tag: %s", createdTagName)

	// Cleanup: Delete the created tag
	reqDel := client.TagsAPI.DeleteTagsByID(context.Background(), createdTagID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete tag during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up tag: %s", createdTagID)
}

// Test_objects_TagsAPIService_List tests listing tags with folder filter
// This test creates a tag, lists tags to verify it's included, then deletes it
func Test_objects_TagsAPIService_List(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create a tag first to have something to list
	createdTagName := "test-tag-list-" + common.GenerateRandomString(10)
	tag := objects.Tags{
		Color:    common.StringPtr("Purple"),                        // Tag color
		Comments: common.StringPtr("Test tag for list API testing"), // Tag description
		Folder:   common.StringPtr("Prisma Access"),                 // Using Prisma Access folder scope
		Name:     createdTagName,                                    // Unique test name
	}

	// Create the tag via API
	req := client.TagsAPI.CreateTags(context.Background()).Tags(tag)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create tag for list test")
	require.NotNil(t, createRes, "Create response should not be nil")
	require.NotNil(t, createRes.Id, "Created tag should have an ID")
	createdTagID := *createRes.Id
	require.NotEmpty(t, createdTagID, "Created tag ID should not be empty")

	// Test List operation with folder filter
	reqList := client.TagsAPI.ListTags(context.Background()).Folder("Prisma Access")
	listRes, httpResList, errList := reqList.Execute()
	if errList != nil {
		handleAPIError(errList)
	}

	// Verify the list operation was successful
	require.NoError(t, errList, "Failed to list tags")
	assert.Equal(t, 200, httpResList.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, listRes, "List response should not be nil")
	assert.NotNil(t, listRes.Data, "List response data should not be nil")
	assert.Greater(t, len(listRes.Data), 0, "Should have at least one tag in the list")

	t.Logf("Successfully listed tags, found created tag: %s", createdTagName)

	// Cleanup: Delete the created tag
	reqDel := client.TagsAPI.DeleteTagsByID(context.Background(), createdTagID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete tag during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up tag: %s", createdTagID)
}

// Test_objects_TagsAPIService_DeleteByID tests deleting a tag by its ID
// This test creates a tag, deletes it, then verifies the deletion was successful
func Test_objects_TagsAPIService_DeleteByID(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create a tag first to have something to delete
	createdTagName := "test-tag-delete-" + common.GenerateRandomString(10)
	tag := objects.Tags{
		Color:    common.StringPtr("Orange"),                          // Tag color
		Comments: common.StringPtr("Test tag for delete API testing"), // Tag description
		Folder:   common.StringPtr("Prisma Access"),                   // Using Prisma Access folder scope
		Name:     createdTagName,                                      // Unique test name
	}

	// Create the tag via API
	req := client.TagsAPI.CreateTags(context.Background()).Tags(tag)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create tag for delete test")
	require.NotNil(t, createRes, "Create response should not be nil")
	require.NotNil(t, createRes.Id, "Created tag should have an ID")
	createdTagID := *createRes.Id
	require.NotEmpty(t, createdTagID, "Created tag ID should not be empty")

	// Test Delete by ID operation
	reqDel := client.TagsAPI.DeleteTagsByID(context.Background(), createdTagID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	// Verify the delete operation was successful
	require.NoError(t, errDel, "Failed to delete tag")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status")

	t.Logf("Successfully deleted tag: %s", createdTagID)
}
