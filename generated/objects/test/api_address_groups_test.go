/*
Objects Testing AddressGroupsAPIService
*/
package objects

import (
	"context"
	"fmt"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/paloaltonetworks/scm-go/common"
	"github.com/paloaltonetworks/scm-go/generated/objects"
)

// Test_objects_AddressGroupsAPIService_Create tests the creation of an address group object
// This test creates addresses, then creates a new address group, and then deletes everything for cleanup
func Test_objects_AddressGroupsAPIService_Create(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create test addresses first
	randomSuffix := common.GenerateRandomString(10)
	address1Name := "test-address-1-create-" + randomSuffix
	address2Name := "test-address-2-create-" + randomSuffix
	address1ID := createTestAddress(t, client, address1Name, "192.168.1.1/32")
	address2ID := createTestAddress(t, client, address2Name, "192.168.1.2/32")

	// Create a valid address group object with unique name to avoid conflicts
	createdAddressGroupName := "test-address-group-create-" + randomSuffix
	addressGroup := objects.AddressGroups{
		Description:          common.StringPtr("Test address group for create API testing"),
		Device:               nil,                                  // Not using device-level scope
		Folder:               common.StringPtr("Prisma Access"),    // Using Prisma Access folder scope
		Id:                   "",                                   // ID will be generated by server
		Name:                 createdAddressGroupName,              // Unique test name
		Snippet:              nil,                                  // Not using snippet scope
		Static:               []string{address1Name, address2Name}, // Static address list using created address names
		Tag:                  nil,                                  // No tags for this test
		AdditionalProperties: nil,
	}

	fmt.Printf("Creating address group with name: %s\n", addressGroup.Name)

	// Make the create request to the API
	req := client.AddressGroupsAPI.CreateAddressGroups(context.Background()).AddressGroups(addressGroup)
	res, httpRes, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}

	// Verify the creation was successful
	require.NoError(t, err, "Failed to create address group")
	assert.Equal(t, 201, httpRes.StatusCode, "Expected 201 Created status")

	// Assert response object properties
	require.NotNil(t, res, "Response should not be nil")
	assert.Equal(t, createdAddressGroupName, res.Name, "Created address group name should match")
	assert.Equal(t, common.StringPtr("Test address group for create API testing"), res.Description, "Description should match")
	assert.True(t, *res.Folder == "Shared" || *res.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, []string{address1Name, address2Name}, res.Static, "Static address list should match")
	assert.NotEmpty(t, res.Id, "Created address group should have an ID")

	// Use the ID from the response object
	createdAddressGroupID := res.Id
	t.Logf("Successfully created address group: %s with ID: %s", addressGroup.Name, createdAddressGroupID)

	// Cleanup: Delete the created address group first
	reqDel := client.AddressGroupsAPI.DeleteAddressGroupsByID(context.Background(), createdAddressGroupID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete address group during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up address group: %s", createdAddressGroupID)

	// Cleanup: Delete the test addresses
	deleteTestAddress(t, client, address1ID, address1Name)
	deleteTestAddress(t, client, address2ID, address2Name)
}

// Test_objects_AddressGroupsAPIService_GetByID tests retrieving an address group by its ID
// This test creates addresses, creates an address group, retrieves it by ID, then deletes everything
func Test_objects_AddressGroupsAPIService_GetByID(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create test addresses first
	randomSuffix := common.GenerateRandomString(10)
	address1Name := "test-address-getbyid-1-" + randomSuffix
	address2Name := "test-address-getbyid-2-" + randomSuffix
	address1ID := createTestAddress(t, client, address1Name, "192.168.2.1/32")
	address2ID := createTestAddress(t, client, address2Name, "192.168.2.2/32")

	// Create an address group first to have something to retrieve
	createdAddressGroupName := "test-address-group-getbyid-" + randomSuffix
	addressGroup := objects.AddressGroups{
		Description: common.StringPtr("Test address group for get by ID API testing"),
		Folder:      common.StringPtr("Prisma Access"),    // Using Prisma Access folder scope
		Name:        createdAddressGroupName,              // Unique test name
		Static:      []string{address1Name, address2Name}, // Static address list using created address names
	}

	// Create the address group via API
	req := client.AddressGroupsAPI.CreateAddressGroups(context.Background()).AddressGroups(addressGroup)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create address group for get test")
	require.NotNil(t, createRes, "Create response should not be nil")
	createdAddressGroupID := createRes.Id
	require.NotEmpty(t, createdAddressGroupID, "Created address group should have an ID")

	// Test Get by ID operation
	reqGetById := client.AddressGroupsAPI.GetAddressGroupsByID(context.Background(), createdAddressGroupID)
	getRes, httpResGet, err := reqGetById.Execute()
	if err != nil {
		handleAPIError(err)
	}

	// Verify the get operation was successful
	require.NoError(t, err, "Failed to get address group by ID")
	assert.Equal(t, 200, httpResGet.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, getRes, "Get response should not be nil")
	assert.Equal(t, createdAddressGroupName, getRes.Name, "Address group name should match")
	assert.Equal(t, common.StringPtr("Test address group for get by ID API testing"), getRes.Description, "Description should match")
	assert.True(t, *getRes.Folder == "Shared" || *getRes.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, []string{address1Name, address2Name}, getRes.Static, "Static address list should match")
	assert.Equal(t, createdAddressGroupID, getRes.Id, "Address group ID should match")

	t.Logf("Successfully retrieved address group: %s", getRes.Name)

	// Cleanup: Delete the created address group first
	reqDel := client.AddressGroupsAPI.DeleteAddressGroupsByID(context.Background(), createdAddressGroupID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete address group during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up address group: %s", createdAddressGroupID)

	// Cleanup: Delete the test addresses
	deleteTestAddress(t, client, address1ID, address1Name)
	deleteTestAddress(t, client, address2ID, address2Name)
}

// Test_objects_AddressGroupsAPIService_Update tests updating an existing address group
// This test creates addresses, creates an address group, updates it, then deletes everything
func Test_objects_AddressGroupsAPIService_Update(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create test addresses first (both initial and updated addresses)
	randomSuffix := common.GenerateRandomString(10)
	address1Name := "test-address-update-1-" + randomSuffix
	address2Name := "test-address-update-2-" + randomSuffix
	address3Name := "updated-address-1-" + randomSuffix
	address4Name := "updated-address-2-" + randomSuffix
	address5Name := "updated-address-3-" + randomSuffix

	address1ID := createTestAddress(t, client, address1Name, "192.168.3.1/32")
	address2ID := createTestAddress(t, client, address2Name, "192.168.3.2/32")
	address3ID := createTestAddress(t, client, address3Name, "192.168.3.3/32")
	address4ID := createTestAddress(t, client, address4Name, "192.168.3.4/32")
	address5ID := createTestAddress(t, client, address5Name, "192.168.3.5/32")

	// Create an address group first to have something to update
	createdAddressGroupName := "test-address-group-update-" + randomSuffix
	addressGroup := objects.AddressGroups{
		Description: common.StringPtr("Test address group for update API testing"),
		Folder:      common.StringPtr("Prisma Access"),    // Using Prisma Access folder scope
		Name:        createdAddressGroupName,              // Unique test name
		Static:      []string{address1Name, address2Name}, // Initial static address list using created address names
	}

	// Create the address group via API
	req := client.AddressGroupsAPI.CreateAddressGroups(context.Background()).AddressGroups(addressGroup)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create address group for update test")
	require.NotNil(t, createRes, "Create response should not be nil")
	createdAddressGroupID := createRes.Id
	require.NotEmpty(t, createdAddressGroupID, "Created address group should have an ID")

	// Test Update operation with modified fields
	updatedAddressGroup := objects.AddressGroups{
		Description: common.StringPtr("Updated test address group description"), // Updated description
		Folder:      common.StringPtr("Prisma Access"),                          // Keep same folder scope
		Name:        createdAddressGroupName,                                    // Keep same name (required for update)
		Static:      []string{address3Name, address4Name, address5Name},         // Updated static address list using created address names
	}

	reqUpdate := client.AddressGroupsAPI.UpdateAddressGroupsByID(context.Background(), createdAddressGroupID).AddressGroups(updatedAddressGroup)
	updateRes, httpResUpdate, errUpdate := reqUpdate.Execute()
	if errUpdate != nil {
		handleAPIError(errUpdate)
	}

	// Verify the update operation was successful
	require.NoError(t, errUpdate, "Failed to update address group")
	assert.Equal(t, 200, httpResUpdate.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, updateRes, "Update response should not be nil")
	assert.Equal(t, createdAddressGroupName, updateRes.Name, "Address group name should remain the same")
	assert.Equal(t, common.StringPtr("Updated test address group description"), updateRes.Description, "Description should be updated")
	assert.True(t, *updateRes.Folder == "Shared" || *updateRes.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
	assert.Equal(t, []string{address3Name, address4Name, address5Name}, updateRes.Static, "Static address list should be updated")
	assert.Equal(t, createdAddressGroupID, updateRes.Id, "Address group ID should remain the same")

	t.Logf("Successfully updated address group: %s", createdAddressGroupName)

	// Cleanup: Delete the created address group first
	reqDel := client.AddressGroupsAPI.DeleteAddressGroupsByID(context.Background(), createdAddressGroupID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete address group during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up address group: %s", createdAddressGroupID)

	// Cleanup: Delete all test addresses
	deleteTestAddress(t, client, address1ID, address1Name)
	deleteTestAddress(t, client, address2ID, address2Name)
	deleteTestAddress(t, client, address3ID, address3Name)
	deleteTestAddress(t, client, address4ID, address4Name)
	deleteTestAddress(t, client, address5ID, address5Name)
}

// Test_objects_AddressGroupsAPIService_List tests listing address groups with folder filter
// This test creates addresses, creates an address group, lists address groups to verify it's included, then deletes everything
func Test_objects_AddressGroupsAPIService_List(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create test addresses first
	randomSuffix := common.GenerateRandomString(10)
	address1Name := "test-address-list-1-" + randomSuffix
	address2Name := "test-address-list-2-" + randomSuffix
	address1ID := createTestAddress(t, client, address1Name, "192.168.4.1/32")
	address2ID := createTestAddress(t, client, address2Name, "192.168.4.2/32")

	// Create an address group first to have something to list
	createdAddressGroupName := "test-address-group-list-" + randomSuffix
	addressGroup := objects.AddressGroups{
		Description: common.StringPtr("Test address group for list API testing"),
		Folder:      common.StringPtr("Prisma Access"),    // Using Prisma Access folder scope
		Name:        createdAddressGroupName,              // Unique test name
		Static:      []string{address1Name, address2Name}, // Static address list using created address names
	}

	// Create the address group via API
	req := client.AddressGroupsAPI.CreateAddressGroups(context.Background()).AddressGroups(addressGroup)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create address group for list test")
	require.NotNil(t, createRes, "Create response should not be nil")
	createdAddressGroupID := createRes.Id
	require.NotEmpty(t, createdAddressGroupID, "Created address group should have an ID")

	// Test List operation with folder filter
	reqList := client.AddressGroupsAPI.ListAddressGroups(context.Background()).Folder("Prisma Access")
	listRes, httpResList, errList := reqList.Execute()
	if errList != nil {
		handleAPIError(errList)
	}

	// Verify the list operation was successful
	require.NoError(t, errList, "Failed to list address groups")
	assert.Equal(t, 200, httpResList.StatusCode, "Expected 200 OK status")

	// Assert response object properties
	require.NotNil(t, listRes, "List response should not be nil")
	assert.NotNil(t, listRes.Data, "List response data should not be nil")
	assert.Greater(t, len(listRes.Data), 0, "Should have at least one address group in the list")

	// Verify our created address group is in the list
	foundAddressGroup := false
	for _, addrGroup := range listRes.Data {
		if addrGroup.Name == createdAddressGroupName {
			foundAddressGroup = true
			assert.Equal(t, common.StringPtr("Test address group for list API testing"), addrGroup.Description, "Description should match")
			assert.True(t, *addrGroup.Folder == "Shared" || *addrGroup.Folder == "Prisma Access", "Folder should be 'Shared' or 'Prisma Access'")
			assert.Equal(t, []string{address1Name, address2Name}, addrGroup.Static, "Static address list should match")
			break
		}
	}
	assert.True(t, foundAddressGroup, "Created address group should be found in the list")

	t.Logf("Successfully listed address groups, found created address group: %s", createdAddressGroupName)

	// Cleanup: Delete the created address group first
	reqDel := client.AddressGroupsAPI.DeleteAddressGroupsByID(context.Background(), createdAddressGroupID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}
	require.NoError(t, errDel, "Failed to delete address group during cleanup")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status for delete")

	t.Logf("Successfully cleaned up address group: %s", createdAddressGroupID)

	// Cleanup: Delete the test addresses
	deleteTestAddress(t, client, address1ID, address1Name)
	deleteTestAddress(t, client, address2ID, address2Name)
}

// Test_objects_AddressGroupsAPIService_DeleteByID tests deleting an address group by its ID
// This test creates addresses, creates an address group, deletes it, then verifies the deletion and cleans up addresses
func Test_objects_AddressGroupsAPIService_DeleteByID(t *testing.T) {
	// Setup the authenticated client
	client := SetupObjectSvcTestClient(t)

	// Create test addresses first
	randomSuffix := common.GenerateRandomString(10)
	address1Name := "test-address-delete-1-" + randomSuffix
	address2Name := "test-address-delete-2-" + randomSuffix
	address1ID := createTestAddress(t, client, address1Name, "192.168.5.1/32")
	address2ID := createTestAddress(t, client, address2Name, "192.168.5.2/32")

	// Create an address group first to have something to delete
	createdAddressGroupName := "test-address-group-delete-" + randomSuffix
	addressGroup := objects.AddressGroups{
		Description: common.StringPtr("Test address group for delete API testing"),
		Folder:      common.StringPtr("Prisma Access"),    // Using Prisma Access folder scope
		Name:        createdAddressGroupName,              // Unique test name
		Static:      []string{address1Name, address2Name}, // Static address list using created address names
	}

	// Create the address group via API
	req := client.AddressGroupsAPI.CreateAddressGroups(context.Background()).AddressGroups(addressGroup)
	createRes, _, err := req.Execute()
	if err != nil {
		handleAPIError(err)
	}
	require.NoError(t, err, "Failed to create address group for delete test")
	require.NotNil(t, createRes, "Create response should not be nil")
	createdAddressGroupID := createRes.Id
	require.NotEmpty(t, createdAddressGroupID, "Created address group should have an ID")

	// Test Delete by ID operation
	reqDel := client.AddressGroupsAPI.DeleteAddressGroupsByID(context.Background(), createdAddressGroupID)
	httpResDel, errDel := reqDel.Execute()
	if errDel != nil {
		handleAPIError(errDel)
	}

	// Verify the delete operation was successful
	require.NoError(t, errDel, "Failed to delete address group")
	assert.Equal(t, 200, httpResDel.StatusCode, "Expected 200 OK status")

	t.Logf("Successfully deleted address group: %s", createdAddressGroupID)

	// Verify deletion by trying to get the address group (should fail)
	reqGetById := client.AddressGroupsAPI.GetAddressGroupsByID(context.Background(), createdAddressGroupID)
	getRes, httpResGet, errGet := reqGetById.Execute()
	if errGet != nil {
		handleAPIError(errGet)
	}

	// We expect this to fail since the address group was deleted
	assert.Error(t, errGet, "Getting deleted address group should fail")
	if httpResGet != nil {
		assert.NotEqual(t, 200, httpResGet.StatusCode, "Should not return 200 for deleted address group")
	}

	// The response should be nil or empty since the address group was deleted
	if getRes != nil {
		assert.Empty(t, getRes.Id, "Deleted address group response should not have valid data")
	}

	t.Logf("Verified address group deletion: %s", createdAddressGroupID)

	// Cleanup: Delete the test addresses
	deleteTestAddress(t, client, address1ID, address1Name)
	deleteTestAddress(t, client, address2ID, address2Name)
}
