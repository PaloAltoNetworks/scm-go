/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
	"fmt"
)

// checks if the QuarantinedDevices type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuarantinedDevices{}

// QuarantinedDevices struct for QuarantinedDevices
type QuarantinedDevices struct {
	// Device host ID
	HostId string `json:"host_id"`
	// Device serial number
	SerialNumber         *string `json:"serial_number,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _QuarantinedDevices QuarantinedDevices

// NewQuarantinedDevices instantiates a new QuarantinedDevices object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuarantinedDevices(hostId string) *QuarantinedDevices {
	this := QuarantinedDevices{}
	this.HostId = hostId
	return &this
}

// NewQuarantinedDevicesWithDefaults instantiates a new QuarantinedDevices object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuarantinedDevicesWithDefaults() *QuarantinedDevices {
	this := QuarantinedDevices{}
	return &this
}

// GetHostId returns the HostId field value
func (o *QuarantinedDevices) GetHostId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostId
}

// GetHostIdOk returns a tuple with the HostId field value
// and a boolean to check if the value has been set.
func (o *QuarantinedDevices) GetHostIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostId, true
}

// SetHostId sets field value
func (o *QuarantinedDevices) SetHostId(v string) {
	o.HostId = v
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise.
func (o *QuarantinedDevices) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber) {
		var ret string
		return ret
	}
	return *o.SerialNumber
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuarantinedDevices) GetSerialNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SerialNumber) {
		return nil, false
	}
	return o.SerialNumber, true
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *QuarantinedDevices) HasSerialNumber() bool {
	if o != nil && !IsNil(o.SerialNumber) {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given string and assigns it to the SerialNumber field.
func (o *QuarantinedDevices) SetSerialNumber(v string) {
	o.SerialNumber = &v
}

func (o QuarantinedDevices) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuarantinedDevices) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host_id"] = o.HostId
	if !IsNil(o.SerialNumber) {
		toSerialize["serial_number"] = o.SerialNumber
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *QuarantinedDevices) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuarantinedDevices := _QuarantinedDevices{}

	err = json.Unmarshal(data, &varQuarantinedDevices)

	if err != nil {
		return err
	}

	*o = QuarantinedDevices(varQuarantinedDevices)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "host_id")
		delete(additionalProperties, "serial_number")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableQuarantinedDevices struct {
	value *QuarantinedDevices
	isSet bool
}

func (v NullableQuarantinedDevices) Get() *QuarantinedDevices {
	return v.value
}

func (v *NullableQuarantinedDevices) Set(val *QuarantinedDevices) {
	v.value = val
	v.isSet = true
}

func (v NullableQuarantinedDevices) IsSet() bool {
	return v.isSet
}

func (v *NullableQuarantinedDevices) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuarantinedDevices(val *QuarantinedDevices) *NullableQuarantinedDevices {
	return &NullableQuarantinedDevices{value: val, isSet: true}
}

func (v NullableQuarantinedDevices) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuarantinedDevices) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
