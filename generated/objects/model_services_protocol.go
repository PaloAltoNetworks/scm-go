/*
Objects

These APIs are used for defining and managing policy object configurations within Strata Cloud Manager.

API version: 2.0.0
Contact: support@paloaltonetworks.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package objects

import (
	"encoding/json"
)

// checks if the ServicesProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesProtocol{}

// ServicesProtocol struct for ServicesProtocol
type ServicesProtocol struct {
	Tcp                  *ServicesProtocolTcp `json:"tcp,omitempty"`
	Udp                  *ServicesProtocolUdp `json:"udp,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ServicesProtocol ServicesProtocol

// NewServicesProtocol instantiates a new ServicesProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesProtocol() *ServicesProtocol {
	this := ServicesProtocol{}
	return &this
}

// NewServicesProtocolWithDefaults instantiates a new ServicesProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesProtocolWithDefaults() *ServicesProtocol {
	this := ServicesProtocol{}
	return &this
}

// GetTcp returns the Tcp field value if set, zero value otherwise.
func (o *ServicesProtocol) GetTcp() ServicesProtocolTcp {
	if o == nil || IsNil(o.Tcp) {
		var ret ServicesProtocolTcp
		return ret
	}
	return *o.Tcp
}

// GetTcpOk returns a tuple with the Tcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesProtocol) GetTcpOk() (*ServicesProtocolTcp, bool) {
	if o == nil || IsNil(o.Tcp) {
		return nil, false
	}
	return o.Tcp, true
}

// HasTcp returns a boolean if a field has been set.
func (o *ServicesProtocol) HasTcp() bool {
	if o != nil && !IsNil(o.Tcp) {
		return true
	}

	return false
}

// SetTcp gets a reference to the given ServicesProtocolTcp and assigns it to the Tcp field.
func (o *ServicesProtocol) SetTcp(v ServicesProtocolTcp) {
	o.Tcp = &v
}

// GetUdp returns the Udp field value if set, zero value otherwise.
func (o *ServicesProtocol) GetUdp() ServicesProtocolUdp {
	if o == nil || IsNil(o.Udp) {
		var ret ServicesProtocolUdp
		return ret
	}
	return *o.Udp
}

// GetUdpOk returns a tuple with the Udp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesProtocol) GetUdpOk() (*ServicesProtocolUdp, bool) {
	if o == nil || IsNil(o.Udp) {
		return nil, false
	}
	return o.Udp, true
}

// HasUdp returns a boolean if a field has been set.
func (o *ServicesProtocol) HasUdp() bool {
	if o != nil && !IsNil(o.Udp) {
		return true
	}

	return false
}

// SetUdp gets a reference to the given ServicesProtocolUdp and assigns it to the Udp field.
func (o *ServicesProtocol) SetUdp(v ServicesProtocolUdp) {
	o.Udp = &v
}

func (o ServicesProtocol) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Tcp) {
		toSerialize["tcp"] = o.Tcp
	}
	if !IsNil(o.Udp) {
		toSerialize["udp"] = o.Udp
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ServicesProtocol) UnmarshalJSON(data []byte) (err error) {
	varServicesProtocol := _ServicesProtocol{}

	err = json.Unmarshal(data, &varServicesProtocol)

	if err != nil {
		return err
	}

	*o = ServicesProtocol(varServicesProtocol)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "tcp")
		delete(additionalProperties, "udp")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableServicesProtocol struct {
	value *ServicesProtocol
	isSet bool
}

func (v NullableServicesProtocol) Get() *ServicesProtocol {
	return v.value
}

func (v *NullableServicesProtocol) Set(val *ServicesProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesProtocol(val *ServicesProtocol) *NullableServicesProtocol {
	return &NullableServicesProtocol{value: val, isSet: true}
}

func (v NullableServicesProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
